#[version = "0.0.5"]
{llvm -keys=cpu -link-params=0: IRModule({GlobalVar(tvmgen_default_fused_add_5): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_5", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 64) {
    for (ax2, 0, 112) {
      for (ax3.outer, 0, 7) {
        T_add[ramp((((ax0.ax1.fused*12544) + (ax2*112)) + (ax3.outer*16)), 1, 16)] = (placeholder[ramp((((ax0.ax1.fused*12544) + (ax2*112)) + (ax3.outer*16)), 1, 16)] + x16(placeholder[ax0.ax1.fused]))
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_divide_2): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_2", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 16) {
    T_divide[ramp((ax0.outer*16), 1, 16)] = (x16(placeholder[0])/placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_3): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_3", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 128) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_relu[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = max(placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)], 0f)
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_4): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_4", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 4) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_16): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_16", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 589824], storage_scope = global
  allocate data_pad[float32 * 65536], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 28) {
    for (w, 0, 14) {
      for (vc, 0, 128) {
        data_vec[(((bs.c.fused.h.fused*1792) + (w*128)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 14)*25088) + (vc*196)) + (floormod(bs.c.fused.h.fused, 14)*14)) + w)]
      }
    }
  }
  parallel (i0.i1.fused.i2.fused, 0, 32) {
    for (i3, 0, 16) {
      data_pad[ramp(((i0.i1.fused.i2.fused*2048) + (i3*128)), 1, 128)] = tir.if_then_else(((((1 <= floormod(i0.i1.fused.i2.fused, 16)) && (floormod(i0.i1.fused.i2.fused, 16) < 15)) && (1 <= i3)) && (i3 < 15)), data_vec[ramp(((((floordiv(i0.i1.fused.i2.fused, 16)*25088) + (floormod(i0.i1.fused.i2.fused, 16)*1792)) + (i3*128)) - 1920), 1, 128)], x128(0f))
    }
  }
  parallel (occ.k_h.fused, 0, 48) {
    for (icc, 0, 2) {
      for (k_w, 0, 3) {
        for (icb, 0, 128) {
          data_vec[ramp((((((floordiv(occ.k_h.fused, 3)*36864) + (icc*18432)) + (floormod(occ.k_h.fused, 3)*6144)) + (k_w*2048)) + (icb*16)), 1, 16)] = placeholder[ramp((((((floordiv(occ.k_h.fused, 3)*36864) + (icc*1152)) + (icb*9)) + (floormod(occ.k_h.fused, 3)*3)) + k_w), 2304, 16)]
        }
      }
    }
  }
  parallel (n.c.outer.fused.h.fused, 0, 224) {
    allocate conv2d_NCHWc.global[float32x16 * 14], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(16, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(32, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(48, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(64, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(80, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(96, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(112, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(128, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(144, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(160, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(176, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(192, 1, 16)] = x16(0f)
    conv2d_NCHWc.global[ramp(208, 1, 16)] = x16(0f)
    for (ic.outer, 0, 2) {
      for (kh, 0, 3) {
        for (ic.inner, 0, 128) {
          conv2d_NCHWc.global[ramp(0, 1, 16)] = (conv2d_NCHWc.global[ramp(0, 1, 16)] + (x16(data_pad[((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(16, 1, 16)] = (conv2d_NCHWc.global[ramp(16, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 128)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(32, 1, 16)] = (conv2d_NCHWc.global[ramp(32, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 256)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(48, 1, 16)] = (conv2d_NCHWc.global[ramp(48, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 384)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(64, 1, 16)] = (conv2d_NCHWc.global[ramp(64, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 512)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(80, 1, 16)] = (conv2d_NCHWc.global[ramp(80, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 640)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(96, 1, 16)] = (conv2d_NCHWc.global[ramp(96, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 768)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(112, 1, 16)] = (conv2d_NCHWc.global[ramp(112, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 896)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(128, 1, 16)] = (conv2d_NCHWc.global[ramp(128, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1024)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(144, 1, 16)] = (conv2d_NCHWc.global[ramp(144, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1152)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(160, 1, 16)] = (conv2d_NCHWc.global[ramp(160, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1280)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(176, 1, 16)] = (conv2d_NCHWc.global[ramp(176, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1408)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(192, 1, 16)] = (conv2d_NCHWc.global[ramp(192, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1536)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(208, 1, 16)] = (conv2d_NCHWc.global[ramp(208, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1664)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(0, 1, 16)] = (conv2d_NCHWc.global[ramp(0, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 128)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(16, 1, 16)] = (conv2d_NCHWc.global[ramp(16, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 256)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(32, 1, 16)] = (conv2d_NCHWc.global[ramp(32, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 384)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(48, 1, 16)] = (conv2d_NCHWc.global[ramp(48, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 512)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(64, 1, 16)] = (conv2d_NCHWc.global[ramp(64, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 640)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(80, 1, 16)] = (conv2d_NCHWc.global[ramp(80, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 768)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(96, 1, 16)] = (conv2d_NCHWc.global[ramp(96, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 896)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(112, 1, 16)] = (conv2d_NCHWc.global[ramp(112, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1024)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(128, 1, 16)] = (conv2d_NCHWc.global[ramp(128, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1152)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(144, 1, 16)] = (conv2d_NCHWc.global[ramp(144, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1280)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(160, 1, 16)] = (conv2d_NCHWc.global[ramp(160, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1408)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(176, 1, 16)] = (conv2d_NCHWc.global[ramp(176, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1536)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(192, 1, 16)] = (conv2d_NCHWc.global[ramp(192, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1664)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(208, 1, 16)] = (conv2d_NCHWc.global[ramp(208, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1792)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 2048), 1, 16)]))
          conv2d_NCHWc.global[ramp(0, 1, 16)] = (conv2d_NCHWc.global[ramp(0, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 256)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(16, 1, 16)] = (conv2d_NCHWc.global[ramp(16, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 384)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(32, 1, 16)] = (conv2d_NCHWc.global[ramp(32, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 512)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(48, 1, 16)] = (conv2d_NCHWc.global[ramp(48, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 640)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(64, 1, 16)] = (conv2d_NCHWc.global[ramp(64, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 768)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(80, 1, 16)] = (conv2d_NCHWc.global[ramp(80, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 896)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(96, 1, 16)] = (conv2d_NCHWc.global[ramp(96, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1024)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(112, 1, 16)] = (conv2d_NCHWc.global[ramp(112, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1152)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(128, 1, 16)] = (conv2d_NCHWc.global[ramp(128, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1280)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(144, 1, 16)] = (conv2d_NCHWc.global[ramp(144, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1408)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(160, 1, 16)] = (conv2d_NCHWc.global[ramp(160, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1536)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(176, 1, 16)] = (conv2d_NCHWc.global[ramp(176, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1664)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(192, 1, 16)] = (conv2d_NCHWc.global[ramp(192, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1792)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
          conv2d_NCHWc.global[ramp(208, 1, 16)] = (conv2d_NCHWc.global[ramp(208, 1, 16)] + (x16(data_pad[(((((ic.outer*32768) + (kh*2048)) + (floormod(n.c.outer.fused.h.fused, 14)*2048)) + ic.inner) + 1920)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*36864) + (ic.outer*18432)) + (kh*6144)) + (ic.inner*16)) + 4096), 1, 16)]))
        }
      }
    }
    for (w.inner, 0, 14) {
      output_unpack[ramp((((floordiv(n.c.outer.fused.h.fused, 14)*3136) + (floormod(n.c.outer.fused.h.fused, 14)*14)) + w.inner), 196, 16)] = conv2d_NCHWc.global[ramp((w.inner*16), 1, 16)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_3): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_3", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 4) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + x16(placeholder[0]))
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_8): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_8", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 1024) {
    for (ax2, 0, 14) {
      T_relu[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = max(placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)], x14(0f))
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_12): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_12", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_multiply[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)]*placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_9): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_9", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 128) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_multiply[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)]*placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_7): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_7", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 14) {
      T_relu[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = max(placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)], x14(0f))
    }
  }
}
, GlobalVar(tvmgen_default_fused_divide_1): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_1", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 4) {
    T_divide[ramp((ax0.outer*16), 1, 16)] = (x16(placeholder[0])/placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_multiply_19): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_19", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 2048) {
    for (ax2, 0, 7) {
      T_multiply[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] = (placeholder[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)]*x7(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_reshape): PrimFunc([placeholder, T_reshape]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_reshape", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  for (ax1.outer, 0, 128) {
    T_reshape[ramp((ax1.outer*16), 1, 16)] = placeholder[ramp((ax1.outer*16), 1, 16)]
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_17): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_17", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 200704], storage_scope = global
  allocate kernel_vec[float32x4 * 131072], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 3584) {
    for (w, 0, 14) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*56) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 14)*784) + (vc*196)) + (floormod(bs.c.fused.h.fused, 14)*14)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 128) {
    for (icc, 0, 256) {
      for (icb, 0, 4) {
        kernel_vec[ramp((((occ.k_h.fused*4096) + (icc*16)) + (icb*4)), 1, 4)] = placeholder[ramp((((occ.k_h.fused*4096) + (icc*4)) + icb), 1024, 4)]
      }
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 896) {
    allocate conv2d_NCHWc.global[float32x4 * 28], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(4, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(8, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(12, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(16, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(20, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(24, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(28, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(32, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(36, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(40, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(44, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(48, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(52, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(56, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(60, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(64, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(68, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(72, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(76, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(80, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(84, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(88, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(92, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(96, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(100, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(104, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(108, 1, 4)] = x4(0f)
    for (ic.outer, 0, 256) {
      for (ic.inner, 0, 4) {
        conv2d_NCHWc.global[ramp(0, 1, 4)] = (conv2d_NCHWc.global[ramp(0, 1, 4)] + (x4(data_vec[(((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(4, 1, 4)] = (conv2d_NCHWc.global[ramp(4, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 4)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(8, 1, 4)] = (conv2d_NCHWc.global[ramp(8, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 8)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(12, 1, 4)] = (conv2d_NCHWc.global[ramp(12, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 12)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(16, 1, 4)] = (conv2d_NCHWc.global[ramp(16, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 16)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(20, 1, 4)] = (conv2d_NCHWc.global[ramp(20, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 20)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(24, 1, 4)] = (conv2d_NCHWc.global[ramp(24, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 24)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(28, 1, 4)] = (conv2d_NCHWc.global[ramp(28, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 28)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(32, 1, 4)] = (conv2d_NCHWc.global[ramp(32, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 32)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(36, 1, 4)] = (conv2d_NCHWc.global[ramp(36, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 36)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(40, 1, 4)] = (conv2d_NCHWc.global[ramp(40, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 40)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(44, 1, 4)] = (conv2d_NCHWc.global[ramp(44, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 44)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(48, 1, 4)] = (conv2d_NCHWc.global[ramp(48, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 48)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(52, 1, 4)] = (conv2d_NCHWc.global[ramp(52, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 52)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(56, 1, 4)] = (conv2d_NCHWc.global[ramp(56, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 56)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(60, 1, 4)] = (conv2d_NCHWc.global[ramp(60, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 60)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(64, 1, 4)] = (conv2d_NCHWc.global[ramp(64, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 64)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(68, 1, 4)] = (conv2d_NCHWc.global[ramp(68, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 68)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(72, 1, 4)] = (conv2d_NCHWc.global[ramp(72, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 72)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(76, 1, 4)] = (conv2d_NCHWc.global[ramp(76, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 76)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(80, 1, 4)] = (conv2d_NCHWc.global[ramp(80, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 80)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(84, 1, 4)] = (conv2d_NCHWc.global[ramp(84, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 84)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(88, 1, 4)] = (conv2d_NCHWc.global[ramp(88, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 88)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(92, 1, 4)] = (conv2d_NCHWc.global[ramp(92, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 92)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(96, 1, 4)] = (conv2d_NCHWc.global[ramp(96, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 96)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(100, 1, 4)] = (conv2d_NCHWc.global[ramp(100, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 100)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(104, 1, 4)] = (conv2d_NCHWc.global[ramp(104, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 104)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(108, 1, 4)] = (conv2d_NCHWc.global[ramp(108, 1, 4)] + (x4(data_vec[((((ic.outer*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*112)) + ic.inner) + 108)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*4096) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
      }
    }
    for (h.inner, 0, 2) {
      for (w.inner, 0, 14) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.outer.fused, 7)*784) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + (h.inner*14)) + w.inner), 196, 4)] = conv2d_NCHWc.global[ramp(((h.inner*56) + (w.inner*4)), 1, 4)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_14): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_14", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 128) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_add[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] + placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_12): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_12", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 8) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_21): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_21", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 100352], storage_scope = global
  allocate kernel_vec[float32x32 * 32768], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 3584) {
    for (w, 0, 7) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*28) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 7)*196) + (vc*49)) + (floormod(bs.c.fused.h.fused, 7)*7)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 16) {
    for (icc, 0, 512) {
      for (icb, 0, 4) {
        kernel_vec[ramp((((occ.k_h.fused*65536) + (icc*128)) + (icb*32)), 1, 32)] = placeholder[ramp((((occ.k_h.fused*65536) + (icc*4)) + icb), 2048, 32)]
      }
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 112) {
    allocate conv2d_NCHWc.global[float32x32 * 7], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(32, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(64, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(96, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(128, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(160, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(192, 1, 32)] = x32(0f)
    for (ic.outer, 0, 512) {
      for (ic.inner, 0, 4) {
        conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_vec[(((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 4)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 8)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 12)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 16)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 20)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 24)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
      }
    }
    for (w.inner, 0, 7) {
      output_unpack[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*1568) + (floormod(n.c.outer.fused.h.outer.fused, 7)*7)) + w.inner), 49, 32)] = conv2d_NCHWc.global[ramp((w.inner*32), 1, 32)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_negative_4): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_4", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 32) {
    T_negative[ramp((ax0.outer*16), 1, 16)] = (x16(0f) - placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_multiply_3): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_3", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 64) {
    for (ax2, 0, 112) {
      for (ax3.outer, 0, 7) {
        T_multiply[ramp((((ax0.ax1.fused*12544) + (ax2*112)) + (ax3.outer*16)), 1, 16)] = (placeholder[ramp((((ax0.ax1.fused*12544) + (ax2*112)) + (ax3.outer*16)), 1, 16)]*x16(placeholder[ax0.ax1.fused]))
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_9): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_9", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 16) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_10): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_10", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 7) {
      T_relu[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] = max(placeholder[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)], x7(0f))
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_4): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_4", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 802816], storage_scope = global
  allocate kernel_vec[float32x32 * 512], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 56) {
    for (w, 0, 56) {
      for (vc, 0, 256) {
        data_vec[(((bs.c.fused.h.fused*14336) + (w*256)) + vc)] = placeholder[(((vc*3136) + (bs.c.fused.h.fused*56)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 2) {
    for (icb, 0, 256) {
      kernel_vec[ramp(((occ.k_h.fused*8192) + (icb*32)), 1, 32)] = placeholder[ramp(((occ.k_h.fused*8192) + icb), 256, 32)]
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 112) {
    allocate conv2d_NCHWc.global[float32x32 * 56], storage_scope = global
    for (ow.c.outer, 0, 8) {
      conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 32)] = x32(0f)
      for (ic.inner, 0, 256) {
        conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 32)] = (conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 32)] + (x32(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 56)*14336) + (ow.c.outer*1792)) + ic.inner)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 56)*8192) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 32)] + (x32(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 56)*14336) + (ow.c.outer*1792)) + ic.inner) + 256)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 56)*8192) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 32)] + (x32(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 56)*14336) + (ow.c.outer*1792)) + ic.inner) + 512)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 56)*8192) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 32)] + (x32(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 56)*14336) + (ow.c.outer*1792)) + ic.inner) + 768)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 56)*8192) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 32)] + (x32(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 56)*14336) + (ow.c.outer*1792)) + ic.inner) + 1024)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 56)*8192) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 32)] + (x32(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 56)*14336) + (ow.c.outer*1792)) + ic.inner) + 1280)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 56)*8192) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 32)] + (x32(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 56)*14336) + (ow.c.outer*1792)) + ic.inner) + 1536)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 56)*8192) + (ic.inner*32)), 1, 32)]))
      }
    }
    for (w.outer, 0, 8) {
      for (w.inner, 0, 7) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.outer.fused, 56)*100352) + (floormod(n.c.outer.fused.h.outer.fused, 56)*56)) + (w.outer*7)) + w.inner), 3136, 32)] = conv2d_NCHWc.global[ramp(((w.outer*224) + (w.inner*32)), 1, 32)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_21): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_21", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 1024) {
    for (ax2, 0, 14) {
      T_add[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = (placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] + placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_sqrt_6): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_6", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 128) {
    T_sqrt[ramp((ax0.outer*16), 1, 16)] = tir.sqrt(placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_expand_dims_4): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_4", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    T_expand_dims[ax0.ax1.fused] = placeholder[ax0.ax1.fused]
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_6): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_6", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 401408], storage_scope = global
  allocate data_pad[float32 * 415872], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 1792) {
    for (w, 0, 56) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*224) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 56)*12544) + (vc*3136)) + (floormod(bs.c.fused.h.fused, 56)*56)) + w)]
      }
    }
  }
  parallel (i0.i1.fused.i2.fused, 0, 1824) {
    for (i3, 0, 57) {
      data_pad[ramp(((i0.i1.fused.i2.fused*228) + (i3*4)), 1, 4)] = tir.if_then_else(((1 <= floormod(i0.i1.fused.i2.fused, 57)) && (1 <= i3)), data_vec[ramp(((((floordiv(i0.i1.fused.i2.fused, 57)*12544) + (floormod(i0.i1.fused.i2.fused, 57)*224)) + (i3*4)) - 228), 1, 4)], x4(0f))
    }
  }
  parallel (occ.k_h.fused, 0, 96) {
    for (icc, 0, 32) {
      for (k_w, 0, 3) {
        for (icb, 0, 4) {
          data_vec[ramp((((((floordiv(occ.k_h.fused, 3)*4608) + (icc*144)) + (floormod(occ.k_h.fused, 3)*48)) + (k_w*16)) + (icb*4)), 1, 4)] = placeholder[ramp((((((floordiv(occ.k_h.fused, 3)*4608) + (icc*36)) + (icb*9)) + (floormod(occ.k_h.fused, 3)*3)) + k_w), 1152, 4)]
        }
      }
    }
  }
  parallel (n.c.outer.fused.h.fused, 0, 896) {
    allocate conv2d_NCHWc.global[float32x4 * 28], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(4, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(8, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(12, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(16, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(20, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(24, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(28, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(32, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(36, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(40, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(44, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(48, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(52, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(56, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(60, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(64, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(68, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(72, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(76, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(80, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(84, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(88, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(92, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(96, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(100, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(104, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(108, 1, 4)] = x4(0f)
    for (ic.outer, 0, 32) {
      for (kh, 0, 3) {
        for (kw, 0, 3) {
          for (ic.inner, 0, 4) {
            conv2d_NCHWc.global[ramp(0, 1, 4)] = (conv2d_NCHWc.global[ramp(0, 1, 4)] + (x4(data_pad[(((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(4, 1, 4)] = (conv2d_NCHWc.global[ramp(4, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 8)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(8, 1, 4)] = (conv2d_NCHWc.global[ramp(8, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 16)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(12, 1, 4)] = (conv2d_NCHWc.global[ramp(12, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 24)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(16, 1, 4)] = (conv2d_NCHWc.global[ramp(16, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 32)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(20, 1, 4)] = (conv2d_NCHWc.global[ramp(20, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 40)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(24, 1, 4)] = (conv2d_NCHWc.global[ramp(24, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 48)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(28, 1, 4)] = (conv2d_NCHWc.global[ramp(28, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 56)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(32, 1, 4)] = (conv2d_NCHWc.global[ramp(32, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 64)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(36, 1, 4)] = (conv2d_NCHWc.global[ramp(36, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 72)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(40, 1, 4)] = (conv2d_NCHWc.global[ramp(40, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 80)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(44, 1, 4)] = (conv2d_NCHWc.global[ramp(44, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 88)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(48, 1, 4)] = (conv2d_NCHWc.global[ramp(48, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 96)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(52, 1, 4)] = (conv2d_NCHWc.global[ramp(52, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 104)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(56, 1, 4)] = (conv2d_NCHWc.global[ramp(56, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 112)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(60, 1, 4)] = (conv2d_NCHWc.global[ramp(60, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 120)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(64, 1, 4)] = (conv2d_NCHWc.global[ramp(64, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 128)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(68, 1, 4)] = (conv2d_NCHWc.global[ramp(68, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 136)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(72, 1, 4)] = (conv2d_NCHWc.global[ramp(72, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 144)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(76, 1, 4)] = (conv2d_NCHWc.global[ramp(76, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 152)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(80, 1, 4)] = (conv2d_NCHWc.global[ramp(80, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 160)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(84, 1, 4)] = (conv2d_NCHWc.global[ramp(84, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 168)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(88, 1, 4)] = (conv2d_NCHWc.global[ramp(88, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 176)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(92, 1, 4)] = (conv2d_NCHWc.global[ramp(92, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 184)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(96, 1, 4)] = (conv2d_NCHWc.global[ramp(96, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 192)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(100, 1, 4)] = (conv2d_NCHWc.global[ramp(100, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 200)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(104, 1, 4)] = (conv2d_NCHWc.global[ramp(104, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 208)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(108, 1, 4)] = (conv2d_NCHWc.global[ramp(108, 1, 4)] + (x4(data_pad[((((((ic.outer*12996) + (floormod(n.c.outer.fused.h.fused, 28)*456)) + (kh*228)) + (kw*4)) + ic.inner) + 216)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 28)*4608) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
          }
        }
      }
    }
    for (w.inner, 0, 28) {
      output_unpack[ramp((((floordiv(n.c.outer.fused.h.fused, 28)*3136) + (floormod(n.c.outer.fused.h.fused, 28)*28)) + w.inner), 784, 4)] = conv2d_NCHWc.global[ramp((w.inner*4), 1, 4)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 150528], storage_scope = global
  allocate data_pad[float32 * 157323], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 224) {
    for (w, 0, 224) {
      for (vc, 0, 3) {
        data_vec[(((bs.c.fused.h.fused*672) + (w*3)) + vc)] = placeholder[(((vc*50176) + (bs.c.fused.h.fused*224)) + w)]
      }
    }
  }
  parallel (i0.i1.fused.i2.fused, 0, 229) {
    for (i3, 0, 229) {
      data_pad[ramp(((i0.i1.fused.i2.fused*687) + (i3*3)), 1, 3)] = tir.if_then_else(((((3 <= i0.i1.fused.i2.fused) && (i0.i1.fused.i2.fused < 227)) && (3 <= i3)) && (i3 < 227)), data_vec[ramp((((i0.i1.fused.i2.fused*672) + (i3*3)) - 2025), 1, 3)], x3(0f))
    }
  }
  parallel (occ.k_h.fused, 0, 14) {
    for (k_w, 0, 7) {
      for (icb, 0, 3) {
        data_vec[ramp((((occ.k_h.fused*672) + (k_w*96)) + (icb*32)), 1, 32)] = placeholder[ramp(((((floordiv(occ.k_h.fused, 7)*4704) + (icb*49)) + (floormod(occ.k_h.fused, 7)*7)) + k_w), 147, 32)]
      }
    }
  }
  parallel (n.c.outer.fused.h.fused, 0, 224) {
    allocate conv2d_NCHWc[float32x32 * 112], storage_scope = global
    allocate conv2d_NCHWc.global[float32x32 * 8], storage_scope = global
    for (ow.outer, 0, 14) {
      conv2d_NCHWc.global[ramp(0, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(32, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(64, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(96, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(128, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(160, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(192, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(224, 1, 32)] = x32(0f)
      for (kh, 0, 7) {
        for (kw, 0, 7) {
          for (ic.inner, 0, 3) {
            conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[(((((floormod(n.c.outer.fused.h.fused, 112)*1374) + (kh*687)) + (ow.outer*48)) + (kw*3)) + ic.inner)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 112)*4704) + (kh*672)) + (kw*96)) + (ic.inner*32)), 1, 32)]))
            conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[((((((floormod(n.c.outer.fused.h.fused, 112)*1374) + (kh*687)) + (ow.outer*48)) + (kw*3)) + ic.inner) + 6)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 112)*4704) + (kh*672)) + (kw*96)) + (ic.inner*32)), 1, 32)]))
            conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[((((((floormod(n.c.outer.fused.h.fused, 112)*1374) + (kh*687)) + (ow.outer*48)) + (kw*3)) + ic.inner) + 12)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 112)*4704) + (kh*672)) + (kw*96)) + (ic.inner*32)), 1, 32)]))
            conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[((((((floormod(n.c.outer.fused.h.fused, 112)*1374) + (kh*687)) + (ow.outer*48)) + (kw*3)) + ic.inner) + 18)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 112)*4704) + (kh*672)) + (kw*96)) + (ic.inner*32)), 1, 32)]))
            conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[((((((floormod(n.c.outer.fused.h.fused, 112)*1374) + (kh*687)) + (ow.outer*48)) + (kw*3)) + ic.inner) + 24)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 112)*4704) + (kh*672)) + (kw*96)) + (ic.inner*32)), 1, 32)]))
            conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[((((((floormod(n.c.outer.fused.h.fused, 112)*1374) + (kh*687)) + (ow.outer*48)) + (kw*3)) + ic.inner) + 30)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 112)*4704) + (kh*672)) + (kw*96)) + (ic.inner*32)), 1, 32)]))
            conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[((((((floormod(n.c.outer.fused.h.fused, 112)*1374) + (kh*687)) + (ow.outer*48)) + (kw*3)) + ic.inner) + 36)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 112)*4704) + (kh*672)) + (kw*96)) + (ic.inner*32)), 1, 32)]))
            conv2d_NCHWc.global[ramp(224, 1, 32)] = (conv2d_NCHWc.global[ramp(224, 1, 32)] + (x32(data_pad[((((((floormod(n.c.outer.fused.h.fused, 112)*1374) + (kh*687)) + (ow.outer*48)) + (kw*3)) + ic.inner) + 42)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 112)*4704) + (kh*672)) + (kw*96)) + (ic.inner*32)), 1, 32)]))
          }
        }
      }
      for (ow.inner, 0, 8) {
        conv2d_NCHWc[ramp(((ow.outer*256) + (ow.inner*32)), 1, 32)] = conv2d_NCHWc.global[ramp((ow.inner*32), 1, 32)]
      }
    }
    for (w.outer, 0, 14) {
      for (w.inner, 0, 8) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.fused, 112)*401408) + (floormod(n.c.outer.fused.h.fused, 112)*112)) + (w.outer*8)) + w.inner), 12544, 32)] = conv2d_NCHWc[ramp(((w.outer*256) + (w.inner*32)), 1, 32)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  T_multiply[ramp(0, 1, 3)] = (placeholder[ramp(0, 1, 3)]*placeholder[ramp(0, 1, 3)])
}
, GlobalVar(tvmgen_default_fused_add_15): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_15", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_add[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] + placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_4): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_4", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 64) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_multiply[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)]*placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_expand_dims_2): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_2", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    T_expand_dims[ax0.ax1.fused] = placeholder[ax0.ax1.fused]
  }
}
, GlobalVar(tvmgen_default_fused_negative_6): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_6", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 128) {
    T_negative[ramp((ax0.outer*16), 1, 16)] = (x16(0f) - placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_5): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_5", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 802816], storage_scope = global
  allocate kernel_vec[float32x4 * 8192], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 3584) {
    for (w, 0, 56) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*224) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 56)*12544) + (vc*3136)) + (floormod(bs.c.fused.h.fused, 56)*56)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 32) {
    for (icc, 0, 64) {
      for (icb, 0, 4) {
        kernel_vec[ramp((((occ.k_h.fused*1024) + (icc*16)) + (icb*4)), 1, 4)] = placeholder[ramp((((occ.k_h.fused*1024) + (icc*4)) + icb), 256, 4)]
      }
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 1792) {
    allocate conv2d_NCHWc.global[float32x4 * 56], storage_scope = global
    for (ow.c.outer, 0, 2) {
      conv2d_NCHWc.global[ramp((ow.c.outer*112), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 4), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 8), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 12), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 16), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 20), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 24), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 28), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 32), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 36), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 40), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 44), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 48), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 52), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 56), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 60), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 64), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 68), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 72), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 76), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 80), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 84), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 88), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 92), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 96), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 100), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 104), 1, 4)] = x4(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 108), 1, 4)] = x4(0f)
      for (ic.outer, 0, 64) {
        for (ic.inner, 0, 4) {
          conv2d_NCHWc.global[ramp((ow.c.outer*112), 1, 4)] = (conv2d_NCHWc.global[ramp((ow.c.outer*112), 1, 4)] + (x4(data_vec[((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 4), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 4), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 4)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 8), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 8), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 8)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 12), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 12), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 12)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 16), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 16), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 16)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 20), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 20), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 20)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 24), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 24), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 24)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 28), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 28), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 28)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 32), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 32), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 32)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 36), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 36), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 36)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 40), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 40), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 40)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 44), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 44), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 44)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 48), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 48), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 48)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 52), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 52), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 52)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 56), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 56), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 56)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 60), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 60), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 60)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 64), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 64), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 64)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 68), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 68), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 68)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 72), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 72), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 72)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 76), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 76), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 76)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 80), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 80), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 80)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 84), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 84), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 84)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 88), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 88), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 88)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 92), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 92), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 92)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 96), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 96), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 96)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 100), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 100), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 100)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 104), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 104), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 104)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 108), 1, 4)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*112) + 108), 1, 4)] + (x4(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*112)) + ic.inner) + 108)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        }
      }
    }
    for (w.outer, 0, 2) {
      for (w.inner, 0, 28) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.outer.fused, 56)*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*56)) + (w.outer*28)) + w.inner), 3136, 4)] = conv2d_NCHWc.global[ramp(((w.outer*112) + (w.inner*4)), 1, 4)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_sqrt): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  T_sqrt[ramp(0, 1, 3)] = tir.sqrt(placeholder[ramp(0, 1, 3)])
}
, GlobalVar(tvmgen_default_fused_nn_relu_5): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_5", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_relu[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = max(placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)], 0f)
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_sqrt_1): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_1", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 4) {
    T_sqrt[ramp((ax0.outer*16), 1, 16)] = tir.sqrt(placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_multiply_2): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_2", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 4) {
    T_multiply[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)]*placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_18): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_18", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 100352], storage_scope = global
  allocate data_pad[float32 * 115200], storage_scope = global
  allocate kernel_vec[float32x4 * 589824], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 1792) {
    for (w, 0, 14) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*56) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 14)*784) + (vc*196)) + (floormod(bs.c.fused.h.fused, 14)*14)) + w)]
      }
    }
  }
  parallel (i0.i1.fused.i2.fused, 0, 1920) {
    for (i3, 0, 15) {
      data_pad[ramp(((i0.i1.fused.i2.fused*60) + (i3*4)), 1, 4)] = tir.if_then_else(((1 <= floormod(i0.i1.fused.i2.fused, 15)) && (1 <= i3)), data_vec[ramp(((((floordiv(i0.i1.fused.i2.fused, 15)*784) + (floormod(i0.i1.fused.i2.fused, 15)*56)) + (i3*4)) - 60), 1, 4)], x4(0f))
    }
  }
  parallel (occ.k_h.fused, 0, 384) {
    for (icc, 0, 128) {
      for (k_w, 0, 3) {
        for (icb, 0, 4) {
          kernel_vec[ramp((((((floordiv(occ.k_h.fused, 3)*18432) + (icc*144)) + (floormod(occ.k_h.fused, 3)*48)) + (k_w*16)) + (icb*4)), 1, 4)] = placeholder[ramp((((((floordiv(occ.k_h.fused, 3)*18432) + (icc*36)) + (icb*9)) + (floormod(occ.k_h.fused, 3)*3)) + k_w), 4608, 4)]
        }
      }
    }
  }
  parallel (n.c.outer.fused.h.fused, 0, 896) {
    allocate conv2d_NCHWc.global[float32x4 * 7], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(4, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(8, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(12, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(16, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(20, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(24, 1, 4)] = x4(0f)
    for (ic.outer, 0, 128) {
      for (kh, 0, 3) {
        for (kw, 0, 3) {
          for (ic.inner, 0, 4) {
            conv2d_NCHWc.global[ramp(0, 1, 4)] = (conv2d_NCHWc.global[ramp(0, 1, 4)] + (x4(data_pad[(((((ic.outer*900) + (floormod(n.c.outer.fused.h.fused, 7)*120)) + (kh*60)) + (kw*4)) + ic.inner)])*kernel_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 7)*18432) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(4, 1, 4)] = (conv2d_NCHWc.global[ramp(4, 1, 4)] + (x4(data_pad[((((((ic.outer*900) + (floormod(n.c.outer.fused.h.fused, 7)*120)) + (kh*60)) + (kw*4)) + ic.inner) + 8)])*kernel_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 7)*18432) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(8, 1, 4)] = (conv2d_NCHWc.global[ramp(8, 1, 4)] + (x4(data_pad[((((((ic.outer*900) + (floormod(n.c.outer.fused.h.fused, 7)*120)) + (kh*60)) + (kw*4)) + ic.inner) + 16)])*kernel_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 7)*18432) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(12, 1, 4)] = (conv2d_NCHWc.global[ramp(12, 1, 4)] + (x4(data_pad[((((((ic.outer*900) + (floormod(n.c.outer.fused.h.fused, 7)*120)) + (kh*60)) + (kw*4)) + ic.inner) + 24)])*kernel_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 7)*18432) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(16, 1, 4)] = (conv2d_NCHWc.global[ramp(16, 1, 4)] + (x4(data_pad[((((((ic.outer*900) + (floormod(n.c.outer.fused.h.fused, 7)*120)) + (kh*60)) + (kw*4)) + ic.inner) + 32)])*kernel_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 7)*18432) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(20, 1, 4)] = (conv2d_NCHWc.global[ramp(20, 1, 4)] + (x4(data_pad[((((((ic.outer*900) + (floormod(n.c.outer.fused.h.fused, 7)*120)) + (kh*60)) + (kw*4)) + ic.inner) + 40)])*kernel_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 7)*18432) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(24, 1, 4)] = (conv2d_NCHWc.global[ramp(24, 1, 4)] + (x4(data_pad[((((((ic.outer*900) + (floormod(n.c.outer.fused.h.fused, 7)*120)) + (kh*60)) + (kw*4)) + ic.inner) + 48)])*kernel_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 7)*18432) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
          }
        }
      }
    }
    for (w.inner, 0, 7) {
      output_unpack[ramp((((floordiv(n.c.outer.fused.h.fused, 7)*196) + (floormod(n.c.outer.fused.h.fused, 7)*7)) + w.inner), 49, 4)] = conv2d_NCHWc.global[ramp((w.inner*4), 1, 4)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_7): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_7", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 8) {
    T_multiply[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)]*placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_1): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_1", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 200704], storage_scope = global
  allocate kernel_vec[float32x16 * 256], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 224) {
    for (w, 0, 56) {
      for (vc, 0, 16) {
        data_vec[(((bs.c.fused.h.fused*896) + (w*16)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 56)*50176) + (vc*3136)) + (floormod(bs.c.fused.h.fused, 56)*56)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 4) {
    for (icc, 0, 4) {
      for (icb, 0, 16) {
        kernel_vec[ramp((((occ.k_h.fused*1024) + (icc*256)) + (icb*16)), 1, 16)] = placeholder[ramp((((occ.k_h.fused*1024) + (icc*16)) + icb), 64, 16)]
      }
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 224) {
    allocate conv2d_NCHWc.global[float32x16 * 56], storage_scope = global
    for (ow.c.outer, 0, 4) {
      conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 16), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 48), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 80), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 112), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 144), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 176), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 16)] = x16(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 208), 1, 16)] = x16(0f)
      for (ic.outer, 0, 4) {
        for (ic.inner, 0, 16) {
          conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 16)] = (conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 16)] + (x16(data_vec[((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 16), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 16), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 16)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 32)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 48), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 48), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 48)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 64)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 80), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 80), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 80)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 96)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 112), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 112), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 112)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 128)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 144), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 144), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 144)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 160)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 176), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 176), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 176)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 192)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 208), 1, 16)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 208), 1, 16)] + (x16(data_vec[(((((ic.outer*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*896)) + (ow.c.outer*224)) + ic.inner) + 208)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*1024) + (ic.outer*256)) + (ic.inner*16)), 1, 16)]))
        }
      }
    }
    for (w.outer, 0, 4) {
      for (w.inner, 0, 14) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.outer.fused, 56)*50176) + (floormod(n.c.outer.fused.h.outer.fused, 56)*56)) + (w.outer*14)) + w.inner), 3136, 16)] = conv2d_NCHWc.global[ramp(((w.outer*224) + (w.inner*16)), 1, 16)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_14): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_14", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 373248], storage_scope = global
  allocate kernel_vec[float32x64 * 8192], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 27) {
    for (w, 0, 27) {
      for (vc, 0, 512) {
        data_vec[(((bs.c.fused.h.fused*13824) + (w*512)) + vc)] = placeholder[(((vc*784) + (bs.c.fused.h.fused*28)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 16) {
    for (icb, 0, 512) {
      kernel_vec[ramp(((occ.k_h.fused*32768) + (icb*64)), 1, 64)] = placeholder[ramp(((occ.k_h.fused*32768) + icb), 512, 64)]
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 112) {
    allocate conv2d_NCHWc.global[float32x64 * 28], storage_scope = global
    for (ow.c.outer, 0, 7) {
      conv2d_NCHWc.global[ramp((ow.c.outer*128), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 64), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 896), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 960), 1, 64)] = x64(0f)
      for (ic.inner, 0, 512) {
        conv2d_NCHWc.global[ramp((ow.c.outer*128), 1, 64)] = (conv2d_NCHWc.global[ramp((ow.c.outer*128), 1, 64)] + (x64(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 7)*55296) + (ow.c.outer*2048)) + ic.inner)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 64), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 64), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 7)*55296) + (ow.c.outer*2048)) + ic.inner) + 1024)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 896), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 896), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 7)*55296) + (ow.c.outer*2048)) + ic.inner) + 27648)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 960), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 960), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 7)*55296) + (ow.c.outer*2048)) + ic.inner) + 28672)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*64)), 1, 64)]))
      }
    }
    for (w.outer, 0, 7) {
      for (h.inner, 0, 2) {
        for (w.inner, 0, 2) {
          output_unpack[ramp((((((floordiv(n.c.outer.fused.h.outer.fused, 7)*12544) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + (h.inner*14)) + (w.outer*2)) + w.inner), 196, 64)] = conv2d_NCHWc.global[ramp((((h.inner*896) + (w.outer*128)) + (w.inner*64)), 1, 64)]
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_16): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_16", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 32) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + x16(placeholder[0]))
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_6): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_6", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_relu[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = max(placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)], 0f)
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_17): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_17", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 7) {
      T_multiply[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] = (placeholder[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)]*x7(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_7): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_7", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 100352], storage_scope = global
  allocate kernel_vec[float32x32 * 2048], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 896) {
    for (w, 0, 28) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*112) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 28)*3136) + (vc*784)) + (floormod(bs.c.fused.h.fused, 28)*28)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 16) {
    for (icc, 0, 32) {
      for (icb, 0, 4) {
        kernel_vec[ramp((((occ.k_h.fused*4096) + (icc*128)) + (icb*32)), 1, 32)] = placeholder[ramp((((occ.k_h.fused*4096) + (icc*4)) + icb), 128, 32)]
      }
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 448) {
    allocate conv2d_NCHWc.global[float32x32 * 28], storage_scope = global
    for (ow.c.outer, 0, 4) {
      conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 32)] = x32(0f)
      for (ic.outer, 0, 32) {
        for (ic.inner, 0, 4) {
          conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 32)] = (conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 32)] + (x32(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + (ow.c.outer*28)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*4096) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 32)] + (x32(data_vec[(((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + (ow.c.outer*28)) + ic.inner) + 4)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*4096) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 32)] + (x32(data_vec[(((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + (ow.c.outer*28)) + ic.inner) + 8)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*4096) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 32)] + (x32(data_vec[(((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + (ow.c.outer*28)) + ic.inner) + 12)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*4096) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 32)] + (x32(data_vec[(((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + (ow.c.outer*28)) + ic.inner) + 16)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*4096) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 32)] + (x32(data_vec[(((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + (ow.c.outer*28)) + ic.inner) + 20)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*4096) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 32)] + (x32(data_vec[(((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + (ow.c.outer*28)) + ic.inner) + 24)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*4096) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        }
      }
    }
    for (w.outer, 0, 4) {
      for (w.inner, 0, 7) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.outer.fused, 28)*25088) + (floormod(n.c.outer.fused.h.outer.fused, 28)*28)) + (w.outer*7)) + w.inner), 784, 32)] = conv2d_NCHWc.global[ramp(((w.outer*224) + (w.inner*32)), 1, 32)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_16): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_16", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 14) {
      T_multiply[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = (placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)]*x14(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_8): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_8", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 774400], storage_scope = global
  allocate kernel_vec[float32x64 * 2048], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 55) {
    for (w, 0, 55) {
      for (vc, 0, 256) {
        data_vec[(((bs.c.fused.h.fused*14080) + (w*256)) + vc)] = placeholder[(((vc*3136) + (bs.c.fused.h.fused*56)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 8) {
    for (icb, 0, 256) {
      kernel_vec[ramp(((occ.k_h.fused*16384) + (icb*64)), 1, 64)] = placeholder[ramp(((occ.k_h.fused*16384) + icb), 256, 64)]
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 224) {
    allocate conv2d_NCHWc.global[float32x64 * 28], storage_scope = global
    for (ow.c.outer, 0, 7) {
      conv2d_NCHWc.global[ramp((ow.c.outer*256), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 64), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 128), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 192), 1, 64)] = x64(0f)
      for (ic.inner, 0, 256) {
        conv2d_NCHWc.global[ramp((ow.c.outer*256), 1, 64)] = (conv2d_NCHWc.global[ramp((ow.c.outer*256), 1, 64)] + (x64(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 28)*28160) + (ow.c.outer*2048)) + ic.inner)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 28)*16384) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 64), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 64), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 28)*28160) + (ow.c.outer*2048)) + ic.inner) + 512)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 28)*16384) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 128), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 128), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 28)*28160) + (ow.c.outer*2048)) + ic.inner) + 1024)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 28)*16384) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 192), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 192), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 28)*28160) + (ow.c.outer*2048)) + ic.inner) + 1536)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 28)*16384) + (ic.inner*64)), 1, 64)]))
      }
    }
    for (w.outer, 0, 7) {
      for (w.inner, 0, 4) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.outer.fused, 28)*50176) + (floormod(n.c.outer.fused.h.outer.fused, 28)*28)) + (w.outer*4)) + w.inner), 784, 64)] = conv2d_NCHWc.global[ramp(((w.outer*256) + (w.inner*64)), 1, 64)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_2): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_2", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 3) {
    for (ax2, 0, 224) {
      for (ax3.outer, 0, 14) {
        T_add[ramp((((ax0.ax1.fused*50176) + (ax2*224)) + (ax3.outer*16)), 1, 16)] = (placeholder[ramp((((ax0.ax1.fused*50176) + (ax2*224)) + (ax3.outer*16)), 1, 16)] + x16(placeholder[ax0.ax1.fused]))
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_11): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_11", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 8) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + x16(placeholder[0]))
  }
}
, GlobalVar(tvmgen_default_fused_add_30): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_30", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 2048) {
    for (ax2, 0, 7) {
      T_add[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] = (placeholder[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] + x7(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_10): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_10", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 147456], storage_scope = global
  allocate data_pad[float32 * 115200], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 28) {
    for (w, 0, 28) {
      for (vc, 0, 128) {
        data_vec[(((bs.c.fused.h.fused*3584) + (w*128)) + vc)] = placeholder[(((vc*784) + (bs.c.fused.h.fused*28)) + w)]
      }
    }
  }
  parallel (i0.i1.fused.i2.fused, 0, 30) {
    for (i3, 0, 30) {
      data_pad[ramp(((i0.i1.fused.i2.fused*3840) + (i3*128)), 1, 128)] = tir.if_then_else(((((1 <= i0.i1.fused.i2.fused) && (i0.i1.fused.i2.fused < 29)) && (1 <= i3)) && (i3 < 29)), data_vec[ramp((((i0.i1.fused.i2.fused*3584) + (i3*128)) - 3712), 1, 128)], x128(0f))
    }
  }
  parallel (occ.k_h.fused, 0, 12) {
    for (k_w, 0, 3) {
      for (icb, 0, 128) {
        data_vec[ramp((((occ.k_h.fused*12288) + (k_w*4096)) + (icb*32)), 1, 32)] = placeholder[ramp(((((floordiv(occ.k_h.fused, 3)*36864) + (icb*9)) + (floormod(occ.k_h.fused, 3)*3)) + k_w), 1152, 32)]
      }
    }
  }
  parallel (n.c.outer.fused.h.fused, 0, 112) {
    allocate conv2d_NCHWc[float32x32 * 28], storage_scope = global
    allocate conv2d_NCHWc.global[float32x32 * 7], storage_scope = global
    for (ow.outer, 0, 4) {
      conv2d_NCHWc.global[ramp(0, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(32, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(64, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(96, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(128, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(160, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(192, 1, 32)] = x32(0f)
      for (kh, 0, 3) {
        for (ic.inner, 0, 128) {
          conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 128)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 256)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 384)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 512)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 640)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 768)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 128)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 256)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 384)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 512)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 640)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 768)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 896)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 256)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 8192), 1, 32)]))
          conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 384)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 8192), 1, 32)]))
          conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 512)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 8192), 1, 32)]))
          conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 640)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 8192), 1, 32)]))
          conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 768)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 8192), 1, 32)]))
          conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 896)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 8192), 1, 32)]))
          conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[(((((kh*3840) + (floormod(n.c.outer.fused.h.fused, 28)*3840)) + (ow.outer*896)) + ic.inner) + 1024)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*36864) + (kh*12288)) + (ic.inner*32)) + 8192), 1, 32)]))
        }
      }
      for (ow.inner, 0, 7) {
        conv2d_NCHWc[ramp(((ow.outer*224) + (ow.inner*32)), 1, 32)] = conv2d_NCHWc.global[ramp((ow.inner*32), 1, 32)]
      }
    }
    for (w.outer, 0, 4) {
      for (w.inner, 0, 7) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.fused, 28)*25088) + (floormod(n.c.outer.fused.h.fused, 28)*28)) + (w.outer*7)) + w.inner), 784, 32)] = conv2d_NCHWc[ramp(((w.outer*224) + (w.inner*32)), 1, 32)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_global_avg_pool2d): PrimFunc([placeholder, tensor]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_global_avg_pool2d", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate tensor[float32 * 2048], storage_scope = global
  parallel (ax0.ax1.fused, 0, 2048) {
    tensor[ax0.ax1.fused] = 0f
    for (rv0, 0, 7) {
      for (rv1, 0, 7) {
        tensor[ax0.ax1.fused] = (tensor[ax0.ax1.fused] + placeholder[(((ax0.ax1.fused*49) + (rv0*7)) + rv1)])
      }
    }
  }
  parallel (ax0.ax1.fused, 0, 2048) {
    tensor[ax0.ax1.fused] = (tensor[ax0.ax1.fused]*0.0204082f)
  }
}
, GlobalVar(tvmgen_default_fused_divide): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  T_divide[ramp(0, 1, 3)] = (x3(placeholder[0])/placeholder[ramp(0, 1, 3)])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_20): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_20", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 173056], storage_scope = global
  allocate kernel_vec[float32x32 * 65536], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 13) {
    for (w, 0, 13) {
      for (vc, 0, 1024) {
        data_vec[(((bs.c.fused.h.fused*13312) + (w*1024)) + vc)] = placeholder[(((vc*196) + (bs.c.fused.h.fused*14)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 64) {
    for (icb, 0, 1024) {
      kernel_vec[ramp(((occ.k_h.fused*32768) + (icb*32)), 1, 32)] = placeholder[ramp(((occ.k_h.fused*32768) + icb), 1024, 32)]
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 448) {
    allocate conv2d_NCHWc.global[float32x32 * 7], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(32, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(64, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(96, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(128, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(160, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(192, 1, 32)] = x32(0f)
    for (ic.inner, 0, 1024) {
      conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_vec[((floormod(n.c.outer.fused.h.outer.fused, 7)*26624) + ic.inner)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*32)), 1, 32)]))
      conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 7)*26624) + ic.inner) + 2048)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*32)), 1, 32)]))
      conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 7)*26624) + ic.inner) + 4096)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*32)), 1, 32)]))
      conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 7)*26624) + ic.inner) + 6144)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*32)), 1, 32)]))
      conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 7)*26624) + ic.inner) + 8192)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*32)), 1, 32)]))
      conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 7)*26624) + ic.inner) + 10240)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*32)), 1, 32)]))
      conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 7)*26624) + ic.inner) + 12288)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*32768) + (ic.inner*32)), 1, 32)]))
    }
    for (w.inner, 0, 7) {
      output_unpack[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*1568) + (floormod(n.c.outer.fused.h.outer.fused, 7)*7)) + w.inner), 49, 32)] = conv2d_NCHWc.global[ramp((w.inner*32), 1, 32)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_20): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_20", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 14) {
      T_add[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = (placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] + x14(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_13): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_13", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 50176], storage_scope = global
  allocate kernel_vec[float32x64 * 4096], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 14) {
    for (w, 0, 14) {
      for (vc, 0, 256) {
        data_vec[(((bs.c.fused.h.fused*3584) + (w*256)) + vc)] = placeholder[(((vc*196) + (bs.c.fused.h.fused*14)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 16) {
    for (icb, 0, 256) {
      kernel_vec[ramp(((occ.k_h.fused*16384) + (icb*64)), 1, 64)] = placeholder[ramp(((occ.k_h.fused*16384) + icb), 256, 64)]
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 112) {
    allocate conv2d_NCHWc.global[float32x64 * 28], storage_scope = global
    for (ow.c.outer, 0, 7) {
      conv2d_NCHWc.global[ramp((ow.c.outer*128), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 64), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 896), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 960), 1, 64)] = x64(0f)
      for (ic.inner, 0, 256) {
        conv2d_NCHWc.global[ramp((ow.c.outer*128), 1, 64)] = (conv2d_NCHWc.global[ramp((ow.c.outer*128), 1, 64)] + (x64(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 7)*7168) + (ow.c.outer*512)) + ic.inner)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 64), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 64), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 7)*7168) + (ow.c.outer*512)) + ic.inner) + 256)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 896), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 896), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 7)*7168) + (ow.c.outer*512)) + ic.inner) + 3584)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 960), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 960), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 7)*7168) + (ow.c.outer*512)) + ic.inner) + 3840)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.inner*64)), 1, 64)]))
      }
    }
    for (w.outer, 0, 7) {
      for (h.inner, 0, 2) {
        for (w.inner, 0, 2) {
          output_unpack[ramp((((((floordiv(n.c.outer.fused.h.outer.fused, 7)*12544) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + (h.inner*14)) + (w.outer*2)) + w.inner), 196, 64)] = conv2d_NCHWc.global[ramp((((h.inner*896) + (w.outer*128)) + (w.inner*64)), 1, 64)]
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_divide_3): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_3", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 8) {
    T_divide[ramp((ax0.outer*16), 1, 16)] = (x16(placeholder[0])/placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_expand_dims_5): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_5", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 1024) {
    T_expand_dims[ax0.ax1.fused] = placeholder[ax0.ax1.fused]
  }
}
, GlobalVar(tvmgen_default_fused_multiply_13): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_13", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 14) {
      T_multiply[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = (placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)]*x14(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_6): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_6", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_multiply[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)]*placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_11): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_11", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_multiply[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)]*placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_sqrt_4): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_4", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 32) {
    T_sqrt[ramp((ax0.outer*16), 1, 16)] = tir.sqrt(placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_15): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_15", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 200704], storage_scope = global
  allocate kernel_vec[float32x64 * 4096], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 28) {
    for (w, 0, 14) {
      for (vc, 0, 512) {
        data_vec[(((bs.c.fused.h.fused*7168) + (w*512)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 14)*100352) + (vc*196)) + (floormod(bs.c.fused.h.fused, 14)*14)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 4) {
    for (icc, 0, 2) {
      for (icb, 0, 512) {
        kernel_vec[ramp((((occ.k_h.fused*65536) + (icc*32768)) + (icb*64)), 1, 64)] = placeholder[ramp((((occ.k_h.fused*65536) + (icc*512)) + icb), 1024, 64)]
      }
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 28) {
    allocate conv2d_NCHWc.global[float32x64 * 28], storage_scope = global
    for (ow.c.outer, 0, 7) {
      conv2d_NCHWc.global[ramp((ow.c.outer*128), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 64), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 896), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 960), 1, 64)] = x64(0f)
      for (ic.outer, 0, 2) {
        for (ic.inner, 0, 512) {
          conv2d_NCHWc.global[ramp((ow.c.outer*128), 1, 64)] = (conv2d_NCHWc.global[ramp((ow.c.outer*128), 1, 64)] + (x64(data_vec[((((ic.outer*100352) + (floormod(n.c.outer.fused.h.outer.fused, 7)*14336)) + (ow.c.outer*1024)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*32768)) + (ic.inner*64)), 1, 64)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 64), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 64), 1, 64)] + (x64(data_vec[(((((ic.outer*100352) + (floormod(n.c.outer.fused.h.outer.fused, 7)*14336)) + (ow.c.outer*1024)) + ic.inner) + 512)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*32768)) + (ic.inner*64)), 1, 64)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 896), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 896), 1, 64)] + (x64(data_vec[(((((ic.outer*100352) + (floormod(n.c.outer.fused.h.outer.fused, 7)*14336)) + (ow.c.outer*1024)) + ic.inner) + 7168)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*32768)) + (ic.inner*64)), 1, 64)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 960), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*128) + 960), 1, 64)] + (x64(data_vec[(((((ic.outer*100352) + (floormod(n.c.outer.fused.h.outer.fused, 7)*14336)) + (ow.c.outer*1024)) + ic.inner) + 7680)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*65536) + (ic.outer*32768)) + (ic.inner*64)), 1, 64)]))
        }
      }
    }
    for (w.outer, 0, 7) {
      for (h.inner, 0, 2) {
        for (w.inner, 0, 2) {
          output_unpack[ramp((((((floordiv(n.c.outer.fused.h.outer.fused, 7)*12544) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + (h.inner*14)) + (w.outer*2)) + w.inner), 196, 64)] = conv2d_NCHWc.global[ramp((((h.inner*896) + (w.outer*128)) + (w.inner*64)), 1, 64)]
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  T_add[ramp(0, 1, 3)] = (placeholder[ramp(0, 1, 3)] + x3(placeholder[0]))
}
, GlobalVar(tvmgen_default_fused_add_31): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_31", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  for (ax1.outer, 0, 63) {
    for (ax1.inner.s, 0, 16) {
      if ((((ax1.outer*16) + ax1.inner.s) < 1000)) {
        T_add[((ax1.outer*16) + ax1.inner.s)] = (placeholder[((ax1.outer*16) + ax1.inner.s)] + placeholder[((ax1.outer*16) + ax1.inner.s)])
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_7): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_7", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_add[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] + placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_2): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_2", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 200704], storage_scope = global
  allocate data_pad[float32 * 215296], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 56) {
    for (w, 0, 56) {
      for (vc, 0, 64) {
        data_vec[(((bs.c.fused.h.fused*3584) + (w*64)) + vc)] = placeholder[(((vc*3136) + (bs.c.fused.h.fused*56)) + w)]
      }
    }
  }
  parallel (i0.i1.fused.i2.fused, 0, 58) {
    for (i3, 0, 58) {
      data_pad[ramp(((i0.i1.fused.i2.fused*3712) + (i3*64)), 1, 64)] = tir.if_then_else(((((1 <= i0.i1.fused.i2.fused) && (i0.i1.fused.i2.fused < 57)) && (1 <= i3)) && (i3 < 57)), data_vec[ramp((((i0.i1.fused.i2.fused*3584) + (i3*64)) - 3648), 1, 64)], x64(0f))
    }
  }
  parallel (occ.k_h.fused, 0, 6) {
    for (k_w, 0, 3) {
      for (icb, 0, 64) {
        data_vec[ramp((((occ.k_h.fused*6144) + (k_w*2048)) + (icb*32)), 1, 32)] = placeholder[ramp(((((floordiv(occ.k_h.fused, 3)*18432) + (icb*9)) + (floormod(occ.k_h.fused, 3)*3)) + k_w), 576, 32)]
      }
    }
  }
  parallel (n.c.outer.fused.h.fused, 0, 112) {
    allocate conv2d_NCHWc[float32x32 * 56], storage_scope = global
    allocate conv2d_NCHWc.global[float32x32 * 7], storage_scope = global
    for (ow.outer, 0, 8) {
      conv2d_NCHWc.global[ramp(0, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(32, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(64, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(96, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(128, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(160, 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(192, 1, 32)] = x32(0f)
      for (kh, 0, 3) {
        for (ic.inner, 0, 64) {
          conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 64)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 128)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 192)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 256)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 320)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 384)])*data_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 64)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 2048), 1, 32)]))
          conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 128)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 2048), 1, 32)]))
          conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 192)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 2048), 1, 32)]))
          conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 256)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 2048), 1, 32)]))
          conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 320)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 2048), 1, 32)]))
          conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 384)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 2048), 1, 32)]))
          conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 448)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 2048), 1, 32)]))
          conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 128)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 192)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 256)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 320)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 384)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 448)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 4096), 1, 32)]))
          conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[(((((kh*3712) + (floormod(n.c.outer.fused.h.fused, 56)*3712)) + (ow.outer*448)) + ic.inner) + 512)])*data_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*18432) + (kh*6144)) + (ic.inner*32)) + 4096), 1, 32)]))
        }
      }
      for (ow.inner, 0, 7) {
        conv2d_NCHWc[ramp(((ow.outer*224) + (ow.inner*32)), 1, 32)] = conv2d_NCHWc.global[ramp((ow.inner*32), 1, 32)]
      }
    }
    for (w.outer, 0, 8) {
      for (w.inner, 0, 7) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.fused, 56)*100352) + (floormod(n.c.outer.fused.h.fused, 56)*56)) + (w.outer*7)) + w.inner), 3136, 32)] = conv2d_NCHWc[ramp(((w.outer*224) + (w.inner*32)), 1, 32)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_4): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_4", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 128) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_relu[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = max(placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)], 0f)
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_5): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_5", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 16) {
    T_multiply[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)]*placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_add_13): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_13", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 128) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_add[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] + placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_22): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_22", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 64) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + x16(placeholder[0]))
  }
}
, GlobalVar(tvmgen_default_fused_add_26): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_26", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 7) {
      T_add[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] = (placeholder[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] + x7(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 64) {
    for (ax2, 0, 112) {
      for (ax3.outer, 0, 7) {
        T_relu[ramp((((ax0.ax1.fused*12544) + (ax2*112)) + (ax3.outer*16)), 1, 16)] = max(placeholder[ramp((((ax0.ax1.fused*12544) + (ax2*112)) + (ax3.outer*16)), 1, 16)], x16(0f))
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_28): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_28", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 128) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + x16(placeholder[0]))
  }
}
, GlobalVar(tvmgen_default_fused_negative_2): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_2", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 16) {
    T_negative[ramp((ax0.outer*16), 1, 16)] = (x16(0f) - placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_add_24): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_24", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 1024) {
    for (ax2, 0, 14) {
      T_add[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = (placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] + x14(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_expand_dims_6): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_6", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 2048) {
    T_expand_dims[ax0.ax1.fused] = placeholder[ax0.ax1.fused]
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_9): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_9", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 401408], storage_scope = global
  allocate kernel_vec[float32x64 * 1024], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 28) {
    for (w, 0, 28) {
      for (vc, 0, 512) {
        data_vec[(((bs.c.fused.h.fused*14336) + (w*512)) + vc)] = placeholder[(((vc*784) + (bs.c.fused.h.fused*28)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 2) {
    for (icb, 0, 512) {
      kernel_vec[ramp(((occ.k_h.fused*32768) + (icb*64)), 1, 64)] = placeholder[ramp(((occ.k_h.fused*32768) + icb), 512, 64)]
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 56) {
    allocate conv2d_NCHWc.global[float32x64 * 28], storage_scope = global
    for (ow.c.outer, 0, 7) {
      conv2d_NCHWc.global[ramp((ow.c.outer*256), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 64), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 128), 1, 64)] = x64(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 192), 1, 64)] = x64(0f)
      for (ic.inner, 0, 512) {
        conv2d_NCHWc.global[ramp((ow.c.outer*256), 1, 64)] = (conv2d_NCHWc.global[ramp((ow.c.outer*256), 1, 64)] + (x64(data_vec[(((floormod(n.c.outer.fused.h.outer.fused, 28)*14336) + (ow.c.outer*2048)) + ic.inner)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 28)*32768) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 64), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 64), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 28)*14336) + (ow.c.outer*2048)) + ic.inner) + 512)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 28)*32768) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 128), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 128), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 28)*14336) + (ow.c.outer*2048)) + ic.inner) + 1024)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 28)*32768) + (ic.inner*64)), 1, 64)]))
        conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 192), 1, 64)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*256) + 192), 1, 64)] + (x64(data_vec[((((floormod(n.c.outer.fused.h.outer.fused, 28)*14336) + (ow.c.outer*2048)) + ic.inner) + 1536)])*kernel_vec[ramp(((floordiv(n.c.outer.fused.h.outer.fused, 28)*32768) + (ic.inner*64)), 1, 64)]))
      }
    }
    for (w.outer, 0, 7) {
      for (w.inner, 0, 4) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.outer.fused, 28)*50176) + (floormod(n.c.outer.fused.h.outer.fused, 28)*28)) + (w.outer*4)) + w.inner), 784, 64)] = conv2d_NCHWc.global[ramp(((w.outer*256) + (w.inner*64)), 1, 64)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_10): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_10", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 32) {
    T_multiply[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)]*placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_negative_5): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_5", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 64) {
    T_negative[ramp((ax0.outer*16), 1, 16)] = (x16(0f) - placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_11): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_11", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 2048) {
    for (ax2, 0, 7) {
      T_relu[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] = max(placeholder[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)], x7(0f))
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_1): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_1", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 3) {
    for (ax2, 0, 224) {
      for (ax3.outer, 0, 14) {
        T_multiply[ramp((((ax0.ax1.fused*50176) + (ax2*224)) + (ax3.outer*16)), 1, 16)] = (placeholder[ramp((((ax0.ax1.fused*50176) + (ax2*224)) + (ax3.outer*16)), 1, 16)]*x16(placeholder[ax0.ax1.fused]))
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_18): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_18", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_add[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] + placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_22): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_22", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 25088], storage_scope = global
  allocate data_pad[float32 * 41472], storage_scope = global
  allocate kernel_vec[float32x32 * 73728], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 7) {
    for (w, 0, 7) {
      for (vc, 0, 512) {
        data_vec[(((bs.c.fused.h.fused*3584) + (w*512)) + vc)] = placeholder[(((vc*49) + (bs.c.fused.h.fused*7)) + w)]
      }
    }
  }
  parallel (i0.i1.fused.i2.fused, 0, 9) {
    for (i3, 0, 9) {
      data_pad[ramp(((i0.i1.fused.i2.fused*4608) + (i3*512)), 1, 512)] = tir.if_then_else(((((1 <= i0.i1.fused.i2.fused) && (i0.i1.fused.i2.fused < 8)) && (1 <= i3)) && (i3 < 8)), data_vec[ramp((((i0.i1.fused.i2.fused*3584) + (i3*512)) - 4096), 1, 512)], x512(0f))
    }
  }
  parallel (occ.k_h.fused, 0, 48) {
    for (k_w, 0, 3) {
      for (icb, 0, 512) {
        kernel_vec[ramp((((occ.k_h.fused*49152) + (k_w*16384)) + (icb*32)), 1, 32)] = placeholder[ramp(((((floordiv(occ.k_h.fused, 3)*147456) + (icb*9)) + (floormod(occ.k_h.fused, 3)*3)) + k_w), 4608, 32)]
      }
    }
  }
  parallel (n.c.outer.fused.h.fused, 0, 112) {
    allocate conv2d_NCHWc.global[float32x32 * 7], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(32, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(64, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(96, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(128, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(160, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(192, 1, 32)] = x32(0f)
    for (kh, 0, 3) {
      for (ic.inner, 0, 512) {
        conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[(((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 512)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 1024)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 1536)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 2048)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 2560)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 3072)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 512)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 16384), 1, 32)]))
        conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 1024)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 16384), 1, 32)]))
        conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 1536)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 16384), 1, 32)]))
        conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 2048)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 16384), 1, 32)]))
        conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 2560)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 16384), 1, 32)]))
        conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 3072)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 16384), 1, 32)]))
        conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 3584)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 16384), 1, 32)]))
        conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 1024)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 32768), 1, 32)]))
        conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 1536)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 32768), 1, 32)]))
        conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 2048)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 32768), 1, 32)]))
        conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 2560)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 32768), 1, 32)]))
        conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 3072)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 32768), 1, 32)]))
        conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 3584)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 32768), 1, 32)]))
        conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_pad[((((kh*4608) + (floormod(n.c.outer.fused.h.fused, 7)*4608)) + ic.inner) + 4096)])*kernel_vec[ramp(((((floordiv(n.c.outer.fused.h.fused, 7)*147456) + (kh*49152)) + (ic.inner*32)) + 32768), 1, 32)]))
      }
    }
    for (w.inner, 0, 7) {
      output_unpack[ramp((((floordiv(n.c.outer.fused.h.fused, 7)*1568) + (floormod(n.c.outer.fused.h.fused, 7)*7)) + w.inner), 49, 32)] = conv2d_NCHWc.global[ramp((w.inner*32), 1, 32)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_dense): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_dense", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate packed_weight[float32 * 2048000], storage_scope = global
  for (z, 0, 125) {
    for (y, 0, 2048) {
      for (x, 0, 8) {
        packed_weight[(((z*16384) + (y*8)) + x)] = placeholder[(((z*16384) + (x*2048)) + y)]
      }
    }
  }
  parallel (x.outer.y.outer.fused, 0, 125) {
    allocate compute.global[float32x8 * 1], storage_scope = global
    compute.global[ramp(0, 1, 8)] = x8(0f)
    for (k.outer, 0, 2048) {
      compute.global[ramp(0, 1, 8)] = (compute.global[ramp(0, 1, 8)] + (x8(placeholder[k.outer])*packed_weight[ramp(((x.outer.y.outer.fused*16384) + (k.outer*8)), 1, 8)]))
    }
    compute[ramp((x.outer.y.outer.fused*8), 1, 8)] = compute.global[ramp(0, 1, 8)]
  }
}
, GlobalVar(tvmgen_default_fused_multiply_20): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_20", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 63) {
    for (ax0.inner.s, 0, 16) {
      if ((((ax0.outer*16) + ax0.inner.s) < 1000)) {
        T_multiply[((ax0.outer*16) + ax0.inner.s)] = (placeholder[0]*placeholder[((ax0.outer*16) + ax0.inner.s)])
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_sqrt_2): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_2", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 16) {
    T_sqrt[ramp((ax0.outer*16), 1, 16)] = tir.sqrt(placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_expand_dims_3): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_3", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 128) {
    T_expand_dims[ax0.ax1.fused] = placeholder[ax0.ax1.fused]
  }
}
, GlobalVar(tvmgen_default_fused_add_1): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_1", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  T_add[ramp(0, 1, 3)] = (placeholder[ramp(0, 1, 3)] + placeholder[ramp(0, 1, 3)])
}
, GlobalVar(tvmgen_default_fused_add_29): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_29", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 128) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_12): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_12", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 589824], storage_scope = global
  allocate data_pad[float32 * 215296], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 1792) {
    for (w, 0, 28) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*112) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 28)*3136) + (vc*784)) + (floormod(bs.c.fused.h.fused, 28)*28)) + w)]
      }
    }
  }
  parallel (i0.i1.fused.i2.fused, 0, 1856) {
    for (i3, 0, 29) {
      data_pad[ramp(((i0.i1.fused.i2.fused*116) + (i3*4)), 1, 4)] = tir.if_then_else(((1 <= floormod(i0.i1.fused.i2.fused, 29)) && (1 <= i3)), data_vec[ramp(((((floordiv(i0.i1.fused.i2.fused, 29)*3136) + (floormod(i0.i1.fused.i2.fused, 29)*112)) + (i3*4)) - 116), 1, 4)], x4(0f))
    }
  }
  parallel (occ.k_h.fused, 0, 192) {
    for (icc, 0, 64) {
      for (k_w, 0, 3) {
        for (icb, 0, 4) {
          data_vec[ramp((((((floordiv(occ.k_h.fused, 3)*9216) + (icc*144)) + (floormod(occ.k_h.fused, 3)*48)) + (k_w*16)) + (icb*4)), 1, 4)] = placeholder[ramp((((((floordiv(occ.k_h.fused, 3)*9216) + (icc*36)) + (icb*9)) + (floormod(occ.k_h.fused, 3)*3)) + k_w), 2304, 4)]
        }
      }
    }
  }
  parallel (n.c.outer.fused.h.fused, 0, 896) {
    allocate conv2d_NCHWc.global[float32x4 * 14], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(4, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(8, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(12, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(16, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(20, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(24, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(28, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(32, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(36, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(40, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(44, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(48, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(52, 1, 4)] = x4(0f)
    for (ic.outer, 0, 64) {
      for (kh, 0, 3) {
        for (kw, 0, 3) {
          for (ic.inner, 0, 4) {
            conv2d_NCHWc.global[ramp(0, 1, 4)] = (conv2d_NCHWc.global[ramp(0, 1, 4)] + (x4(data_pad[(((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(4, 1, 4)] = (conv2d_NCHWc.global[ramp(4, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 8)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(8, 1, 4)] = (conv2d_NCHWc.global[ramp(8, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 16)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(12, 1, 4)] = (conv2d_NCHWc.global[ramp(12, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 24)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(16, 1, 4)] = (conv2d_NCHWc.global[ramp(16, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 32)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(20, 1, 4)] = (conv2d_NCHWc.global[ramp(20, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 40)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(24, 1, 4)] = (conv2d_NCHWc.global[ramp(24, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 48)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(28, 1, 4)] = (conv2d_NCHWc.global[ramp(28, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 56)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(32, 1, 4)] = (conv2d_NCHWc.global[ramp(32, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 64)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(36, 1, 4)] = (conv2d_NCHWc.global[ramp(36, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 72)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(40, 1, 4)] = (conv2d_NCHWc.global[ramp(40, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 80)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(44, 1, 4)] = (conv2d_NCHWc.global[ramp(44, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 88)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(48, 1, 4)] = (conv2d_NCHWc.global[ramp(48, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 96)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
            conv2d_NCHWc.global[ramp(52, 1, 4)] = (conv2d_NCHWc.global[ramp(52, 1, 4)] + (x4(data_pad[((((((ic.outer*3364) + (floormod(n.c.outer.fused.h.fused, 14)*232)) + (kh*116)) + (kw*4)) + ic.inner) + 104)])*data_vec[ramp((((((floordiv(n.c.outer.fused.h.fused, 14)*9216) + (ic.outer*144)) + (kh*48)) + (kw*16)) + (ic.inner*4)), 1, 4)]))
          }
        }
      }
    }
    for (w.inner, 0, 14) {
      output_unpack[ramp((((floordiv(n.c.outer.fused.h.fused, 14)*784) + (floormod(n.c.outer.fused.h.fused, 14)*14)) + w.inner), 196, 4)] = conv2d_NCHWc.global[ramp((w.inner*4), 1, 4)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_expand_dims): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 3) {
    T_expand_dims[ax0.ax1.fused] = placeholder[ax0.ax1.fused]
  }
}
, GlobalVar(tvmgen_default_fused_multiply_8): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_8", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 128) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_multiply[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)]*placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_3): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_3", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 200704], storage_scope = global
  allocate kernel_vec[float32x32 * 512], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 896) {
    for (w, 0, 56) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*224) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 56)*12544) + (vc*3136)) + (floormod(bs.c.fused.h.fused, 56)*56)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 8) {
    for (icc, 0, 16) {
      for (icb, 0, 4) {
        kernel_vec[ramp((((occ.k_h.fused*2048) + (icc*128)) + (icb*32)), 1, 32)] = placeholder[ramp((((occ.k_h.fused*2048) + (icc*4)) + icb), 64, 32)]
      }
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 448) {
    allocate conv2d_NCHWc.global[float32x32 * 56], storage_scope = global
    for (ow.c.outer, 0, 8) {
      conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 32)] = x32(0f)
      conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 32)] = x32(0f)
      for (ic.outer, 0, 16) {
        for (ic.inner, 0, 4) {
          conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 32)] = (conv2d_NCHWc.global[ramp((ow.c.outer*224), 1, 32)] + (x32(data_vec[((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*28)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*2048) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 32), 1, 32)] + (x32(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*28)) + ic.inner) + 4)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*2048) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 64), 1, 32)] + (x32(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*28)) + ic.inner) + 8)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*2048) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 96), 1, 32)] + (x32(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*28)) + ic.inner) + 12)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*2048) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 128), 1, 32)] + (x32(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*28)) + ic.inner) + 16)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*2048) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 160), 1, 32)] + (x32(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*28)) + ic.inner) + 20)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*2048) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
          conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 32)] = (conv2d_NCHWc.global[ramp(((ow.c.outer*224) + 192), 1, 32)] + (x32(data_vec[(((((ic.outer*12544) + (floormod(n.c.outer.fused.h.outer.fused, 56)*224)) + (ow.c.outer*28)) + ic.inner) + 24)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 56)*2048) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        }
      }
    }
    for (w.outer, 0, 8) {
      for (w.inner, 0, 7) {
        output_unpack[ramp(((((floordiv(n.c.outer.fused.h.outer.fused, 56)*100352) + (floormod(n.c.outer.fused.h.outer.fused, 56)*56)) + (w.outer*7)) + w.inner), 3136, 32)] = conv2d_NCHWc.global[ramp(((w.outer*224) + (w.inner*32)), 1, 32)]
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_9): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_9", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 14) {
      T_relu[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = max(placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)], x14(0f))
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_23): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_23", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 64) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_add_8): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_8", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 16) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + x16(placeholder[0]))
  }
}
, GlobalVar(tvmgen_default_fused_negative): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  T_negative[ramp(0, 1, 3)] = (x3(0f) - placeholder[ramp(0, 1, 3)])
}
, GlobalVar(tvmgen_default_fused_negative_3): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_3", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 8) {
    T_negative[ramp((ax0.outer*16), 1, 16)] = (x16(0f) - placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_sqrt_5): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_5", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 64) {
    T_sqrt[ramp((ax0.outer*16), 1, 16)] = tir.sqrt(placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_add_6): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_6", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 64) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_add[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] + placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_25): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_25", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 512) {
    for (ax2, 0, 14) {
      T_add[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = (placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] + x14(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_negative_1): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_1", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 4) {
    T_negative[ramp((ax0.outer*16), 1, 16)] = (x16(0f) - placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_divide_6): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_6", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 128) {
    T_divide[ramp((ax0.outer*16), 1, 16)] = (x16(placeholder[0])/placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_add_10): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_10", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_add[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] + placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_15): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_15", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 1024) {
    for (ax2, 0, 14) {
      T_multiply[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)] = (placeholder[ramp(((ax0.ax1.fused*196) + (ax2*14)), 1, 14)]*x14(placeholder[ax0.ax1.fused]))
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_27): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_27", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 2048) {
    for (ax2, 0, 7) {
      T_add[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] = (placeholder[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)] + placeholder[ramp(((ax0.ax1.fused*49) + (ax2*7)), 1, 7)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_divide_5): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_5", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 64) {
    T_divide[ramp((ax0.outer*16), 1, 16)] = (x16(placeholder[0])/placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_1): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_1", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 64) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_relu[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = max(placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)], 0f)
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_14): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_14", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 64) {
    T_multiply[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)]*placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_multiply_18): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_18", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 128) {
    T_multiply[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)]*placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_max_pool2d): PrimFunc([placeholder, tensor]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_max_pool2d", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 64) {
    for (ax2, 0, 56) {
      for (ax3, 0, 56) {
        tensor[(((ax0.ax1.fused*3136) + (ax2*56)) + ax3)] = -3.40282e+38f
        for (rv0, 0, 3) {
          for (rv1, 0, 3) {
            tensor[(((ax0.ax1.fused*3136) + (ax2*56)) + ax3)] = max(tensor[(((ax0.ax1.fused*3136) + (ax2*56)) + ax3)], tir.if_then_else(((1 <= ((ax2*2) + rv0)) && (1 <= ((ax3*2) + rv1))), placeholder[((((((ax0.ax1.fused*12544) + (ax2*224)) + (rv0*112)) + (ax3*2)) + rv1) - 113)], -3.40282e+38f))
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_19): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_19", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 28) {
      for (ax3.outer, 0, 2) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 28)) {
            T_add[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] = (placeholder[((((ax0.ax1.fused*784) + (ax2*28)) + (ax3.outer*16)) + ax3.inner.s)] + placeholder[ax0.ax1.fused])
          }
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_17): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_17", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 32) {
    T_add[ramp((ax0.outer*16), 1, 16)] = (placeholder[ramp((ax0.outer*16), 1, 16)] + placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_expand_dims_1): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_1", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 64) {
    T_expand_dims[ax0.ax1.fused] = placeholder[ax0.ax1.fused]
  }
}
, GlobalVar(tvmgen_default_fused_divide_4): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_4", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 32) {
    T_divide[ramp((ax0.outer*16), 1, 16)] = (x16(placeholder[0])/placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_11): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_11", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 401408], storage_scope = global
  allocate kernel_vec[float32x4 * 32768], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 3584) {
    for (w, 0, 28) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*112) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 28)*3136) + (vc*784)) + (floormod(bs.c.fused.h.fused, 28)*28)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 64) {
    for (icc, 0, 128) {
      for (icb, 0, 4) {
        kernel_vec[ramp((((occ.k_h.fused*2048) + (icc*16)) + (icb*4)), 1, 4)] = placeholder[ramp((((occ.k_h.fused*2048) + (icc*4)) + icb), 512, 4)]
      }
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 1792) {
    allocate conv2d_NCHWc.global[float32x4 * 28], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(4, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(8, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(12, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(16, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(20, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(24, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(28, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(32, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(36, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(40, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(44, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(48, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(52, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(56, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(60, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(64, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(68, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(72, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(76, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(80, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(84, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(88, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(92, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(96, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(100, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(104, 1, 4)] = x4(0f)
    conv2d_NCHWc.global[ramp(108, 1, 4)] = x4(0f)
    for (ic.outer, 0, 128) {
      for (ic.inner, 0, 4) {
        conv2d_NCHWc.global[ramp(0, 1, 4)] = (conv2d_NCHWc.global[ramp(0, 1, 4)] + (x4(data_vec[(((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(4, 1, 4)] = (conv2d_NCHWc.global[ramp(4, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 4)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(8, 1, 4)] = (conv2d_NCHWc.global[ramp(8, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 8)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(12, 1, 4)] = (conv2d_NCHWc.global[ramp(12, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 12)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(16, 1, 4)] = (conv2d_NCHWc.global[ramp(16, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 16)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(20, 1, 4)] = (conv2d_NCHWc.global[ramp(20, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 20)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(24, 1, 4)] = (conv2d_NCHWc.global[ramp(24, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 24)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(28, 1, 4)] = (conv2d_NCHWc.global[ramp(28, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 28)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(32, 1, 4)] = (conv2d_NCHWc.global[ramp(32, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 32)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(36, 1, 4)] = (conv2d_NCHWc.global[ramp(36, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 36)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(40, 1, 4)] = (conv2d_NCHWc.global[ramp(40, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 40)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(44, 1, 4)] = (conv2d_NCHWc.global[ramp(44, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 44)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(48, 1, 4)] = (conv2d_NCHWc.global[ramp(48, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 48)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(52, 1, 4)] = (conv2d_NCHWc.global[ramp(52, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 52)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(56, 1, 4)] = (conv2d_NCHWc.global[ramp(56, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 56)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(60, 1, 4)] = (conv2d_NCHWc.global[ramp(60, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 60)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(64, 1, 4)] = (conv2d_NCHWc.global[ramp(64, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 64)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(68, 1, 4)] = (conv2d_NCHWc.global[ramp(68, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 68)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(72, 1, 4)] = (conv2d_NCHWc.global[ramp(72, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 72)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(76, 1, 4)] = (conv2d_NCHWc.global[ramp(76, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 76)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(80, 1, 4)] = (conv2d_NCHWc.global[ramp(80, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 80)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(84, 1, 4)] = (conv2d_NCHWc.global[ramp(84, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 84)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(88, 1, 4)] = (conv2d_NCHWc.global[ramp(88, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 88)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(92, 1, 4)] = (conv2d_NCHWc.global[ramp(92, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 92)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(96, 1, 4)] = (conv2d_NCHWc.global[ramp(96, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 96)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(100, 1, 4)] = (conv2d_NCHWc.global[ramp(100, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 100)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(104, 1, 4)] = (conv2d_NCHWc.global[ramp(104, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 104)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
        conv2d_NCHWc.global[ramp(108, 1, 4)] = (conv2d_NCHWc.global[ramp(108, 1, 4)] + (x4(data_vec[((((ic.outer*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*112)) + ic.inner) + 108)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*2048) + (ic.outer*16)) + (ic.inner*4)), 1, 4)]))
      }
    }
    for (w.inner, 0, 28) {
      output_unpack[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 28)*3136) + (floormod(n.c.outer.fused.h.outer.fused, 28)*28)) + w.inner), 784, 4)] = conv2d_NCHWc.global[ramp((w.inner*4), 1, 4)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_19): PrimFunc([placeholder, placeholder, output_unpack]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_19", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  allocate data_vec[float32 * 25088], storage_scope = global
  allocate kernel_vec[float32x32 * 32768], storage_scope = global
  parallel (bs.c.fused.h.fused, 0, 896) {
    for (w, 0, 7) {
      for (vc, 0, 4) {
        data_vec[(((bs.c.fused.h.fused*28) + (w*4)) + vc)] = placeholder[((((floordiv(bs.c.fused.h.fused, 7)*196) + (vc*49)) + (floormod(bs.c.fused.h.fused, 7)*7)) + w)]
      }
    }
  }
  parallel (occ.k_h.fused, 0, 64) {
    for (icc, 0, 128) {
      for (icb, 0, 4) {
        kernel_vec[ramp((((occ.k_h.fused*16384) + (icc*128)) + (icb*32)), 1, 32)] = placeholder[ramp((((occ.k_h.fused*16384) + (icc*4)) + icb), 512, 32)]
      }
    }
  }
  parallel (n.c.outer.fused.h.outer.fused, 0, 448) {
    allocate conv2d_NCHWc.global[float32x32 * 7], storage_scope = global
    conv2d_NCHWc.global[ramp(0, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(32, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(64, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(96, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(128, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(160, 1, 32)] = x32(0f)
    conv2d_NCHWc.global[ramp(192, 1, 32)] = x32(0f)
    for (ic.outer, 0, 128) {
      for (ic.inner, 0, 4) {
        conv2d_NCHWc.global[ramp(0, 1, 32)] = (conv2d_NCHWc.global[ramp(0, 1, 32)] + (x32(data_vec[(((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(32, 1, 32)] = (conv2d_NCHWc.global[ramp(32, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 4)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(64, 1, 32)] = (conv2d_NCHWc.global[ramp(64, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 8)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(96, 1, 32)] = (conv2d_NCHWc.global[ramp(96, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 12)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(128, 1, 32)] = (conv2d_NCHWc.global[ramp(128, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 16)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(160, 1, 32)] = (conv2d_NCHWc.global[ramp(160, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 20)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
        conv2d_NCHWc.global[ramp(192, 1, 32)] = (conv2d_NCHWc.global[ramp(192, 1, 32)] + (x32(data_vec[((((ic.outer*196) + (floormod(n.c.outer.fused.h.outer.fused, 7)*28)) + ic.inner) + 24)])*kernel_vec[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*16384) + (ic.outer*128)) + (ic.inner*32)), 1, 32)]))
      }
    }
    for (w.inner, 0, 7) {
      output_unpack[ramp((((floordiv(n.c.outer.fused.h.outer.fused, 7)*1568) + (floormod(n.c.outer.fused.h.outer.fused, 7)*7)) + w.inner), 49, 32)] = conv2d_NCHWc.global[ramp((w.inner*32), 1, 32)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_sqrt_3): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_3", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.outer, 0, 8) {
    T_sqrt[ramp((ax0.outer*16), 1, 16)] = tir.sqrt(placeholder[ramp((ax0.outer*16), 1, 16)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_2): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_2", "tir.noalias": (bool)1, "target": llvm -keys=cpu -link-params=0} {
  parallel (ax0.ax1.fused, 0, 256) {
    for (ax2, 0, 56) {
      for (ax3.outer, 0, 4) {
        for (ax3.inner.s, 0, 16) {
          if ((((ax3.outer*16) + ax3.inner.s) < 56)) {
            T_relu[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)] = max(placeholder[((((ax0.ax1.fused*3136) + (ax2*56)) + (ax3.outer*16)) + ax3.inner.s)], 0f)
          }
        }
      }
    }
  }
}
})}