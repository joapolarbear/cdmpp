#[version = "0.0.5"]
{cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32: IRModule({GlobalVar(tvmgen_default_fused_nn_conv2d_22): PrimFunc([placeholder, placeholder, output]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_22", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  allocate kernel_pack[float32 * 4194304], storage_scope = global
  allocate data_pack[float32 * 131072], storage_scope = global
  allocate bgemm[float32 * 131072], storage_scope = global
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2048
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  kernel_pack[((blockIdx.x*128) + threadIdx.x)] = 0f
  kernel_pack[((blockIdx.x*128) + threadIdx.x)] = (kernel_pack[((blockIdx.x*128) + threadIdx.x)] + placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9))])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] + (placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 1)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] + (placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 1)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 786432)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 786432)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 786432)] + placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 2)])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1048576)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1048576)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1048576)] + (placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1048576)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1048576)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 3)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1048576)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1048576)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] + ((placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 1)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 3)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 4)]*-0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 5)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 7)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1310720)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] + ((placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 1)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 3)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 4)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 5)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 7)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1572864)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1835008)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1835008)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1835008)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1835008)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1835008)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 5)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1835008)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 1835008)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2097152)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2097152)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2097152)] + (placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2097152)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2097152)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 3)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2097152)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2097152)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] + ((placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 1)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 3)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 4)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 5)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 7)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2359296)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] + ((placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 1)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 3)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 4)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 5)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 7)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2621440)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2883584)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2883584)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2883584)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2883584)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2883584)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 5)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2883584)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 2883584)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3145728)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3145728)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3145728)] + placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 6)])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3407872)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3407872)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3407872)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3407872)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3407872)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 7)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3407872)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3407872)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3670016)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3670016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3670016)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3670016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3670016)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 7)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3670016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3670016)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3932160)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3932160)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 3932160)] + placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 512)*4608) + (floordiv(((blockIdx.x*128) + threadIdx.x), 512)*9)) + 8)])
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 64
  allocate d[float32 * 16], storage_scope = local
  allocate data_pack.local[float32 * 16], storage_scope = local
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  for (eps, 0, 4) {
    for (nu, 0, 4) {
      d[((eps*4) + nu)] = tir.if_then_else(((((1 <= ((floordiv(floormod(threadIdx.x, 16), 4)*2) + eps)) && (((floordiv(floormod(threadIdx.x, 16), 4)*2) + eps) < 8)) && (1 <= ((floormod(threadIdx.x, 4)*2) + nu))) && (((floormod(threadIdx.x, 4)*2) + nu) < 8)), placeholder[(((((((blockIdx.x*392) + (floordiv(threadIdx.x, 16)*49)) + (floordiv(floormod(threadIdx.x, 16), 4)*14)) + (eps*7)) + (floormod(threadIdx.x, 4)*2)) + nu) - 8)], 0f)
    }
  }
  data_pack.local[0] = 0f
  data_pack.local[0] = (data_pack.local[0] + d[0])
  data_pack.local[0] = (data_pack.local[0] + (d[2]*-1f))
  data_pack.local[0] = (data_pack.local[0] + (d[8]*-1f))
  data_pack.local[0] = (data_pack.local[0] + ((d[10]*-1f)*-1f))
  data_pack.local[1] = 0f
  data_pack.local[1] = (data_pack.local[1] + (d[1]*-1f))
  data_pack.local[1] = (data_pack.local[1] + d[2])
  data_pack.local[1] = (data_pack.local[1] + ((d[9]*-1f)*-1f))
  data_pack.local[1] = (data_pack.local[1] + (d[10]*-1f))
  data_pack.local[2] = 0f
  data_pack.local[2] = (data_pack.local[2] + d[1])
  data_pack.local[2] = (data_pack.local[2] + d[2])
  data_pack.local[2] = (data_pack.local[2] + (d[9]*-1f))
  data_pack.local[2] = (data_pack.local[2] + (d[10]*-1f))
  data_pack.local[3] = 0f
  data_pack.local[3] = (data_pack.local[3] + (d[1]*-1f))
  data_pack.local[3] = (data_pack.local[3] + d[3])
  data_pack.local[3] = (data_pack.local[3] + ((d[9]*-1f)*-1f))
  data_pack.local[3] = (data_pack.local[3] + (d[11]*-1f))
  data_pack.local[4] = 0f
  data_pack.local[4] = (data_pack.local[4] + (d[4]*-1f))
  data_pack.local[4] = (data_pack.local[4] + ((d[6]*-1f)*-1f))
  data_pack.local[4] = (data_pack.local[4] + d[8])
  data_pack.local[4] = (data_pack.local[4] + (d[10]*-1f))
  data_pack.local[5] = 0f
  data_pack.local[5] = (data_pack.local[5] + ((d[5]*-1f)*-1f))
  data_pack.local[5] = (data_pack.local[5] + (d[6]*-1f))
  data_pack.local[5] = (data_pack.local[5] + (d[9]*-1f))
  data_pack.local[5] = (data_pack.local[5] + d[10])
  data_pack.local[6] = 0f
  data_pack.local[6] = (data_pack.local[6] + (d[5]*-1f))
  data_pack.local[6] = (data_pack.local[6] + (d[6]*-1f))
  data_pack.local[6] = (data_pack.local[6] + d[9])
  data_pack.local[6] = (data_pack.local[6] + d[10])
  data_pack.local[7] = 0f
  data_pack.local[7] = (data_pack.local[7] + ((d[5]*-1f)*-1f))
  data_pack.local[7] = (data_pack.local[7] + (d[7]*-1f))
  data_pack.local[7] = (data_pack.local[7] + (d[9]*-1f))
  data_pack.local[7] = (data_pack.local[7] + d[11])
  data_pack.local[8] = 0f
  data_pack.local[8] = (data_pack.local[8] + d[4])
  data_pack.local[8] = (data_pack.local[8] + (d[6]*-1f))
  data_pack.local[8] = (data_pack.local[8] + d[8])
  data_pack.local[8] = (data_pack.local[8] + (d[10]*-1f))
  data_pack.local[9] = 0f
  data_pack.local[9] = (data_pack.local[9] + (d[5]*-1f))
  data_pack.local[9] = (data_pack.local[9] + d[6])
  data_pack.local[9] = (data_pack.local[9] + (d[9]*-1f))
  data_pack.local[9] = (data_pack.local[9] + d[10])
  data_pack.local[10] = 0f
  data_pack.local[10] = (data_pack.local[10] + d[5])
  data_pack.local[10] = (data_pack.local[10] + d[6])
  data_pack.local[10] = (data_pack.local[10] + d[9])
  data_pack.local[10] = (data_pack.local[10] + d[10])
  data_pack.local[11] = 0f
  data_pack.local[11] = (data_pack.local[11] + (d[5]*-1f))
  data_pack.local[11] = (data_pack.local[11] + d[7])
  data_pack.local[11] = (data_pack.local[11] + (d[9]*-1f))
  data_pack.local[11] = (data_pack.local[11] + d[11])
  data_pack.local[12] = 0f
  data_pack.local[12] = (data_pack.local[12] + (d[4]*-1f))
  data_pack.local[12] = (data_pack.local[12] + ((d[6]*-1f)*-1f))
  data_pack.local[12] = (data_pack.local[12] + d[12])
  data_pack.local[12] = (data_pack.local[12] + (d[14]*-1f))
  data_pack.local[13] = 0f
  data_pack.local[13] = (data_pack.local[13] + ((d[5]*-1f)*-1f))
  data_pack.local[13] = (data_pack.local[13] + (d[6]*-1f))
  data_pack.local[13] = (data_pack.local[13] + (d[13]*-1f))
  data_pack.local[13] = (data_pack.local[13] + d[14])
  data_pack.local[14] = 0f
  data_pack.local[14] = (data_pack.local[14] + (d[5]*-1f))
  data_pack.local[14] = (data_pack.local[14] + (d[6]*-1f))
  data_pack.local[14] = (data_pack.local[14] + d[13])
  data_pack.local[14] = (data_pack.local[14] + d[14])
  data_pack.local[15] = 0f
  data_pack.local[15] = (data_pack.local[15] + ((d[5]*-1f)*-1f))
  data_pack.local[15] = (data_pack.local[15] + (d[7]*-1f))
  data_pack.local[15] = (data_pack.local[15] + (d[13]*-1f))
  data_pack.local[15] = (data_pack.local[15] + d[15])
  for (eps, 0, 4) {
    for (nu, 0, 4) {
      data_pack[((((eps*32768) + (nu*8192)) + (blockIdx.x*128)) + threadIdx.x)] = data_pack.local[((eps*4) + nu)]
    }
  }
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 16
  allocate bgemm.local[float32 * 8], storage_scope = local
  allocate kernel_pack.shared[float32 * 1024], storage_scope = shared
  allocate data_pack.shared[float32 * 256], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 8
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 16
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 8
  for (co.c.init, 0, 4) {
    for (p.c.init, 0, 2) {
      bgemm.local[((co.c.init*2) + p.c.init)] = 0f
    }
  }
  for (ci.outer, 0, 32) {
    for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer, 0, 8) {
      // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
      // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 16
      // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 8
      kernel_pack.shared[((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + ((threadIdx.y*8) + threadIdx.x))] = kernel_pack[((((((blockIdx.z*262144) + (ci.outer*8192)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*1024)) + (floordiv(((threadIdx.y*8) + threadIdx.x), 64)*512)) + (blockIdx.y*64)) + floormod(((threadIdx.y*8) + threadIdx.x), 64))]
    }
    for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer, 0, 2) {
      // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
      // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 16
      // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 8
      data_pack.shared[((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128) + ((threadIdx.y*8) + threadIdx.x))] = data_pack[((((blockIdx.z*8192) + (ci.outer*256)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*128)) + ((threadIdx.y*8) + threadIdx.x))]
    }
    for (ci.inner, 0, 16) {
      for (co.c, 0, 4) {
        for (p.c, 0, 2) {
          bgemm.local[((co.c*2) + p.c)] = (bgemm.local[((co.c*2) + p.c)] + (kernel_pack.shared[(((ci.inner*64) + (threadIdx.y*4)) + co.c)]*data_pack.shared[(((ci.inner*16) + (threadIdx.x*2)) + p.c)]))
        }
      }
    }
  }
  for (co.inner.inner.inner, 0, 4) {
    for (p.inner.inner.inner, 0, 2) {
      bgemm[((((((blockIdx.z*8192) + (blockIdx.y*1024)) + (threadIdx.y*64)) + (co.inner.inner.inner*16)) + (threadIdx.x*2)) + p.inner.inner.inner)] = bgemm.local[((co.inner.inner.inner*2) + p.inner.inner.inner)]
    }
  }
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 64
  allocate inverse[float32 * 4], storage_scope = local
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  inverse[0] = 0f
  inverse[0] = (inverse[0] + bgemm[((blockIdx.x*128) + threadIdx.x)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 8192)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 16384)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 32768)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 40960)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 49152)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 65536)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 73728)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 81920)])
  inverse[1] = 0f
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 8192)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 16384)])
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 24576)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 40960)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 49152)])
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 57344)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 73728)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 81920)])
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 90112)])
  inverse[2] = 0f
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 32768)]*-1f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 40960)]*-1f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 49152)]*-1f))
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 65536)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 73728)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 81920)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 98304)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 106496)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 114688)])
  inverse[3] = 0f
  inverse[3] = (inverse[3] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 40960)]*-1f)*-1f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 49152)]*-1f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 57344)]*-1f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 73728)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 81920)])
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 90112)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 106496)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 114688)])
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 122880)])
  for (h.inner, 0, 2) {
    for (w.inner, 0, 2) {
      if ((((floordiv(floormod(threadIdx.x, 16), 4)*2) + h.inner) < 7)) {
        if ((((floormod(threadIdx.x, 4)*2) + w.inner) < 7)) {
          output[((((((blockIdx.x*392) + (floordiv(threadIdx.x, 16)*49)) + (floordiv(floormod(threadIdx.x, 16), 4)*14)) + (h.inner*7)) + (floormod(threadIdx.x, 4)*2)) + w.inner)] = inverse[((h.inner*2) + w.inner)]
        }
      }
    }
  }
}
, GlobalVar(tvmgen_default_fused_divide_6): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_6", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_divide[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[0]/placeholder[((blockIdx.x*1024) + threadIdx.x)])
}
, GlobalVar(tvmgen_default_fused_expand_dims_5): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_5", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_expand_dims[threadIdx.x] = placeholder[threadIdx.x]
}
, GlobalVar(tvmgen_default_fused_add_22): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_22", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[0])
}
, GlobalVar(tvmgen_default_fused_add_2): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_2", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 147
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 50176)])
}
, GlobalVar(tvmgen_default_fused_negative_5): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_5", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_negative[threadIdx.x] = (0f - placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_sqrt_3): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_3", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  T_sqrt[threadIdx.x] = tir.sqrt(placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_add_20): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_20", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 49
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 196)])
}
, GlobalVar(tvmgen_default_fused_add_27): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_27", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[((blockIdx.x*1024) + threadIdx.x)])
}
, GlobalVar(tvmgen_default_fused_multiply_4): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_4", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 3136)])
}
, GlobalVar(tvmgen_default_fused_add_23): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_23", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_8): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_8", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 4
  allocate compute.local[float32 * 28], storage_scope = local
  allocate pad_temp.shared[float32 * 440], storage_scope = shared
  allocate placeholder.shared[float32 * 1024], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 28
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 4
  compute.local[0] = 0f
  compute.local[7] = 0f
  compute.local[14] = 0f
  compute.local[21] = 0f
  compute.local[1] = 0f
  compute.local[8] = 0f
  compute.local[15] = 0f
  compute.local[22] = 0f
  compute.local[2] = 0f
  compute.local[9] = 0f
  compute.local[16] = 0f
  compute.local[23] = 0f
  compute.local[3] = 0f
  compute.local[10] = 0f
  compute.local[17] = 0f
  compute.local[24] = 0f
  compute.local[4] = 0f
  compute.local[11] = 0f
  compute.local[18] = 0f
  compute.local[25] = 0f
  compute.local[5] = 0f
  compute.local[12] = 0f
  compute.local[19] = 0f
  compute.local[26] = 0f
  compute.local[6] = 0f
  compute.local[13] = 0f
  compute.local[20] = 0f
  compute.local[27] = 0f
  for (rc.outer, 0, 32) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 4
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 4) {
      if (((((threadIdx.z*14) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 440)) {
        if ((((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 14)) {
          pad_temp.shared[(((threadIdx.z*14) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((rc.outer*25088) + (floordiv((((threadIdx.z*14) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 55)*3136)) + (blockIdx.y*112)) + floormod((((threadIdx.z*14) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 55))]
        }
      }
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 4
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 8) {
      placeholder.shared[(((threadIdx.z*32) + (threadIdx.x*8)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((blockIdx.z*32768) + (threadIdx.z*1024)) + (threadIdx.x*256)) + (rc.outer*8)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)]
    }
    for (rc.inner, 0, 8) {
      compute.local[0] = (compute.local[0] + (pad_temp.shared[((rc.inner*55) + (threadIdx.x*2))]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
      compute.local[7] = (compute.local[7] + (pad_temp.shared[((rc.inner*55) + (threadIdx.x*2))]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
      compute.local[14] = (compute.local[14] + (pad_temp.shared[((rc.inner*55) + (threadIdx.x*2))]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 512)]))
      compute.local[21] = (compute.local[21] + (pad_temp.shared[((rc.inner*55) + (threadIdx.x*2))]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 768)]))
      compute.local[1] = (compute.local[1] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 8)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
      compute.local[8] = (compute.local[8] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 8)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
      compute.local[15] = (compute.local[15] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 8)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 512)]))
      compute.local[22] = (compute.local[22] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 8)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 768)]))
      compute.local[2] = (compute.local[2] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 16)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
      compute.local[9] = (compute.local[9] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 16)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
      compute.local[16] = (compute.local[16] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 16)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 512)]))
      compute.local[23] = (compute.local[23] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 16)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 768)]))
      compute.local[3] = (compute.local[3] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 24)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
      compute.local[10] = (compute.local[10] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 24)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
      compute.local[17] = (compute.local[17] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 24)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 512)]))
      compute.local[24] = (compute.local[24] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 24)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 768)]))
      compute.local[4] = (compute.local[4] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 32)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
      compute.local[11] = (compute.local[11] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 32)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
      compute.local[18] = (compute.local[18] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 32)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 512)]))
      compute.local[25] = (compute.local[25] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 32)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 768)]))
      compute.local[5] = (compute.local[5] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 40)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
      compute.local[12] = (compute.local[12] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 40)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
      compute.local[19] = (compute.local[19] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 40)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 512)]))
      compute.local[26] = (compute.local[26] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 40)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 768)]))
      compute.local[6] = (compute.local[6] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 48)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
      compute.local[13] = (compute.local[13] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 48)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
      compute.local[20] = (compute.local[20] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 48)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 512)]))
      compute.local[27] = (compute.local[27] + (pad_temp.shared[(((rc.inner*55) + (threadIdx.x*2)) + 48)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 768)]))
    }
  }
  compute[((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x)] = compute.local[0]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 25088)] = compute.local[7]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 50176)] = compute.local[14]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 75264)] = compute.local[21]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 4)] = compute.local[1]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 25092)] = compute.local[8]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 50180)] = compute.local[15]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 75268)] = compute.local[22]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 8)] = compute.local[2]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 25096)] = compute.local[9]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 50184)] = compute.local[16]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 75272)] = compute.local[23]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 12)] = compute.local[3]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 25100)] = compute.local[10]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 50188)] = compute.local[17]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 75276)] = compute.local[24]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 16)] = compute.local[4]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 25104)] = compute.local[11]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 50192)] = compute.local[18]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 75280)] = compute.local[25]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 20)] = compute.local[5]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 25108)] = compute.local[12]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 50196)] = compute.local[19]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 75284)] = compute.local[26]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 24)] = compute.local[6]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 25112)] = compute.local[13]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 50200)] = compute.local[20]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*28)) + threadIdx.x) + 75288)] = compute.local[27]
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_9): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_9", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 4
  allocate compute.local[float32 * 4], storage_scope = local
  allocate pad_temp.shared[float32 * 448], storage_scope = shared
  allocate placeholder.shared[float32 * 256], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 14
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
  unrolled (yy.c.init, 0, 2) {
    compute.local[yy.c.init] = 0f
    compute.local[(yy.c.init + 2)] = 0f
  }
  for (rc.outer, 0, 64) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    pad_temp.shared[((threadIdx.z*28) + threadIdx.x)] = placeholder[(((((rc.outer*6272) + (floordiv(threadIdx.z, 2)*784)) + (blockIdx.y*56)) + (floormod(threadIdx.z, 2)*28)) + threadIdx.x)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    if ((((threadIdx.z*2) + floordiv(threadIdx.x, 8)) < 32)) {
      if ((((threadIdx.z*16) + threadIdx.x) < 256)) {
        if ((threadIdx.x < 16)) {
          placeholder.shared[((threadIdx.z*16) + threadIdx.x)] = placeholder[(((((blockIdx.z*16384) + (threadIdx.z*1024)) + (floordiv(threadIdx.x, 8)*512)) + (rc.outer*8)) + floormod(threadIdx.x, 8))]
        }
      }
    }
    unrolled (rc.inner, 0, 8) {
      unrolled (yy.c, 0, 2) {
        compute.local[yy.c] = (compute.local[yy.c] + (pad_temp.shared[(((rc.inner*56) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute.local[(yy.c + 2)] = (compute.local[(yy.c + 2)] + (pad_temp.shared[(((rc.inner*56) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
      }
    }
  }
  unrolled (yy.inner.inner.inner, 0, 2) {
    compute[(((((blockIdx.z*25088) + (threadIdx.z*784)) + (blockIdx.y*56)) + (yy.inner.inner.inner*28)) + threadIdx.x)] = compute.local[yy.inner.inner.inner]
    compute[((((((blockIdx.z*25088) + (threadIdx.z*784)) + (blockIdx.y*56)) + (yy.inner.inner.inner*28)) + threadIdx.x) + 12544)] = compute.local[(yy.inner.inner.inner + 2)]
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_2): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_2", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 4) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 802816)) {
      T_relu[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max(placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f)
    }
  }
}
, GlobalVar(tvmgen_default_fused_negative_2): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_2", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 256
  T_negative[threadIdx.x] = (0f - placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_relu_1): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_1", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_relu[((blockIdx.x*1024) + threadIdx.x)] = max(placeholder[((blockIdx.x*1024) + threadIdx.x)], 0f)
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_6): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_6", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 2
  allocate compute.local[float32 * 16], storage_scope = local
  allocate pad_temp.shared[float32 * 570], storage_scope = shared
  allocate placeholder.shared[float32 * 1152], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 14
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
  compute.local[0] = 0f
  compute.local[8] = 0f
  compute.local[1] = 0f
  compute.local[9] = 0f
  compute.local[2] = 0f
  compute.local[10] = 0f
  compute.local[3] = 0f
  compute.local[11] = 0f
  compute.local[4] = 0f
  compute.local[12] = 0f
  compute.local[5] = 0f
  compute.local[13] = 0f
  compute.local[6] = 0f
  compute.local[14] = 0f
  compute.local[7] = 0f
  compute.local[15] = 0f
  for (rc.outer, 0, 64) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
    if ((((threadIdx.z*36) + (threadIdx.x*3)) < 570)) {
      if ((threadIdx.x < 12)) {
        pad_temp.shared[((threadIdx.z*36) + (threadIdx.x*3))] = tir.if_then_else(((1 <= ((blockIdx.y*4) + floordiv(floormod(((threadIdx.z*36) + (threadIdx.x*3)), 285), 57))) && (1 <= floormod(((threadIdx.z*36) + (threadIdx.x*3)), 57))), placeholder[((((((rc.outer*6272) + (floordiv(((threadIdx.z*36) + (threadIdx.x*3)), 285)*3136)) + (blockIdx.y*224)) + (floordiv(floormod(((threadIdx.z*36) + (threadIdx.x*3)), 285), 57)*56)) + floormod(((threadIdx.z*36) + (threadIdx.x*3)), 57)) - 57)], 0f)
      }
    }
    if ((((threadIdx.z*36) + (threadIdx.x*3)) < 569)) {
      if ((threadIdx.x < 12)) {
        pad_temp.shared[(((threadIdx.z*36) + (threadIdx.x*3)) + 1)] = tir.if_then_else(((1 <= ((blockIdx.y*4) + floordiv(floormod((((threadIdx.z*36) + (threadIdx.x*3)) + 1), 285), 57))) && (1 <= floormod((((threadIdx.z*36) + (threadIdx.x*3)) + 1), 57))), placeholder[((((((rc.outer*6272) + (floordiv((((threadIdx.z*36) + (threadIdx.x*3)) + 1), 285)*3136)) + (blockIdx.y*224)) + (floordiv(floormod((((threadIdx.z*36) + (threadIdx.x*3)) + 1), 285), 57)*56)) + floormod((((threadIdx.z*36) + (threadIdx.x*3)) + 1), 57)) - 57)], 0f)
      }
    }
    if ((((threadIdx.z*36) + (threadIdx.x*3)) < 568)) {
      if ((threadIdx.x < 12)) {
        pad_temp.shared[(((threadIdx.z*36) + (threadIdx.x*3)) + 2)] = tir.if_then_else(((1 <= ((blockIdx.y*4) + floordiv(floormod((((threadIdx.z*36) + (threadIdx.x*3)) + 2), 285), 57))) && (1 <= floormod((((threadIdx.z*36) + (threadIdx.x*3)) + 2), 57))), placeholder[((((((rc.outer*6272) + (floordiv((((threadIdx.z*36) + (threadIdx.x*3)) + 2), 285)*3136)) + (blockIdx.y*224)) + (floordiv(floormod((((threadIdx.z*36) + (threadIdx.x*3)) + 2), 285), 57)*56)) + floormod((((threadIdx.z*36) + (threadIdx.x*3)) + 2), 57)) - 57)], 0f)
      }
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
    if ((((threadIdx.z*4) + floordiv(threadIdx.x, 3)) < 64)) {
      if ((((threadIdx.z*8) + floordiv((threadIdx.x*2), 3)) < 128)) {
        if ((((threadIdx.z*24) + (threadIdx.x*2)) < 384)) {
          if ((((threadIdx.z*72) + (threadIdx.x*6)) < 1152)) {
            if ((threadIdx.x < 12)) {
              placeholder.shared[((threadIdx.z*72) + (threadIdx.x*6))] = placeholder[(((((blockIdx.z*73728) + (threadIdx.z*4608)) + (floordiv(threadIdx.x, 3)*1152)) + (rc.outer*18)) + (floormod(threadIdx.x, 3)*6))]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(threadIdx.x, 3)) < 64)) {
      if ((((threadIdx.z*8) + floordiv((threadIdx.x*2), 3)) < 128)) {
        if ((((threadIdx.z*24) + (threadIdx.x*2)) < 384)) {
          if ((((threadIdx.z*72) + (threadIdx.x*6)) < 1151)) {
            if ((threadIdx.x < 12)) {
              placeholder.shared[(((threadIdx.z*72) + (threadIdx.x*6)) + 1)] = placeholder[((((((blockIdx.z*73728) + (threadIdx.z*4608)) + (floordiv(threadIdx.x, 3)*1152)) + (rc.outer*18)) + (floormod(threadIdx.x, 3)*6)) + 1)]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(threadIdx.x, 3)) < 64)) {
      if ((((threadIdx.z*8) + floordiv((threadIdx.x*2), 3)) < 128)) {
        if ((((threadIdx.z*24) + (threadIdx.x*2)) < 384)) {
          if ((((threadIdx.z*72) + (threadIdx.x*6)) < 1150)) {
            if ((threadIdx.x < 12)) {
              placeholder.shared[(((threadIdx.z*72) + (threadIdx.x*6)) + 2)] = placeholder[((((((blockIdx.z*73728) + (threadIdx.z*4608)) + (floordiv(threadIdx.x, 3)*1152)) + (rc.outer*18)) + (floormod(threadIdx.x, 3)*6)) + 2)]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.x*2) + 1), 6)) < 64)) {
      if ((((threadIdx.z*8) + floordiv(((threadIdx.x*2) + 1), 3)) < 128)) {
        if ((((threadIdx.z*24) + (threadIdx.x*2)) < 383)) {
          if ((((threadIdx.z*72) + (threadIdx.x*6)) < 1149)) {
            if ((threadIdx.x < 12)) {
              placeholder.shared[(((threadIdx.z*72) + (threadIdx.x*6)) + 3)] = placeholder[(((((blockIdx.z*73728) + (threadIdx.z*4608)) + (floordiv(((threadIdx.x*2) + 1), 6)*1152)) + (rc.outer*18)) + (floormod(((threadIdx.x*2) + 1), 6)*3))]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.x*2) + 1), 6)) < 64)) {
      if ((((threadIdx.z*8) + floordiv(((threadIdx.x*2) + 1), 3)) < 128)) {
        if ((((threadIdx.z*24) + (threadIdx.x*2)) < 383)) {
          if ((((threadIdx.z*72) + (threadIdx.x*6)) < 1148)) {
            if ((threadIdx.x < 12)) {
              placeholder.shared[(((threadIdx.z*72) + (threadIdx.x*6)) + 4)] = placeholder[((((((blockIdx.z*73728) + (threadIdx.z*4608)) + (floordiv(((threadIdx.x*2) + 1), 6)*1152)) + (rc.outer*18)) + (floormod(((threadIdx.x*2) + 1), 6)*3)) + 1)]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.x*2) + 1), 6)) < 64)) {
      if ((((threadIdx.z*8) + floordiv(((threadIdx.x*2) + 1), 3)) < 128)) {
        if ((((threadIdx.z*24) + (threadIdx.x*2)) < 383)) {
          if ((((threadIdx.z*72) + (threadIdx.x*6)) < 1147)) {
            if ((threadIdx.x < 12)) {
              placeholder.shared[(((threadIdx.z*72) + (threadIdx.x*6)) + 5)] = placeholder[((((((blockIdx.z*73728) + (threadIdx.z*4608)) + (floordiv(((threadIdx.x*2) + 1), 6)*1152)) + (rc.outer*18)) + (floormod(((threadIdx.x*2) + 1), 6)*3)) + 2)]
            }
          }
        }
      }
    }
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[(threadIdx.z*72)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 28)]*placeholder.shared[(threadIdx.z*72)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 114)]*placeholder.shared[(threadIdx.z*72)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 142)]*placeholder.shared[(threadIdx.z*72)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[((threadIdx.z*72) + 18)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 28)]*placeholder.shared[((threadIdx.z*72) + 18)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 114)]*placeholder.shared[((threadIdx.z*72) + 18)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 142)]*placeholder.shared[((threadIdx.z*72) + 18)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[((threadIdx.z*72) + 36)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 28)]*placeholder.shared[((threadIdx.z*72) + 36)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 114)]*placeholder.shared[((threadIdx.z*72) + 36)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 142)]*placeholder.shared[((threadIdx.z*72) + 36)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[((threadIdx.z*72) + 54)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 28)]*placeholder.shared[((threadIdx.z*72) + 54)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 114)]*placeholder.shared[((threadIdx.z*72) + 54)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 142)]*placeholder.shared[((threadIdx.z*72) + 54)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 1)]*placeholder.shared[((threadIdx.z*72) + 1)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 29)]*placeholder.shared[((threadIdx.z*72) + 1)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 115)]*placeholder.shared[((threadIdx.z*72) + 1)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 143)]*placeholder.shared[((threadIdx.z*72) + 1)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 1)]*placeholder.shared[((threadIdx.z*72) + 19)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 29)]*placeholder.shared[((threadIdx.z*72) + 19)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 115)]*placeholder.shared[((threadIdx.z*72) + 19)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 143)]*placeholder.shared[((threadIdx.z*72) + 19)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 1)]*placeholder.shared[((threadIdx.z*72) + 37)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 29)]*placeholder.shared[((threadIdx.z*72) + 37)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 115)]*placeholder.shared[((threadIdx.z*72) + 37)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 143)]*placeholder.shared[((threadIdx.z*72) + 37)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 1)]*placeholder.shared[((threadIdx.z*72) + 55)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 29)]*placeholder.shared[((threadIdx.z*72) + 55)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 115)]*placeholder.shared[((threadIdx.z*72) + 55)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 143)]*placeholder.shared[((threadIdx.z*72) + 55)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 2)]*placeholder.shared[((threadIdx.z*72) + 2)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 30)]*placeholder.shared[((threadIdx.z*72) + 2)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 116)]*placeholder.shared[((threadIdx.z*72) + 2)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 144)]*placeholder.shared[((threadIdx.z*72) + 2)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 2)]*placeholder.shared[((threadIdx.z*72) + 20)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 30)]*placeholder.shared[((threadIdx.z*72) + 20)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 116)]*placeholder.shared[((threadIdx.z*72) + 20)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 144)]*placeholder.shared[((threadIdx.z*72) + 20)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 2)]*placeholder.shared[((threadIdx.z*72) + 38)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 30)]*placeholder.shared[((threadIdx.z*72) + 38)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 116)]*placeholder.shared[((threadIdx.z*72) + 38)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 144)]*placeholder.shared[((threadIdx.z*72) + 38)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 2)]*placeholder.shared[((threadIdx.z*72) + 56)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 30)]*placeholder.shared[((threadIdx.z*72) + 56)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 116)]*placeholder.shared[((threadIdx.z*72) + 56)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 144)]*placeholder.shared[((threadIdx.z*72) + 56)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 57)]*placeholder.shared[((threadIdx.z*72) + 3)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 85)]*placeholder.shared[((threadIdx.z*72) + 3)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 171)]*placeholder.shared[((threadIdx.z*72) + 3)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 199)]*placeholder.shared[((threadIdx.z*72) + 3)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 57)]*placeholder.shared[((threadIdx.z*72) + 21)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 85)]*placeholder.shared[((threadIdx.z*72) + 21)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 171)]*placeholder.shared[((threadIdx.z*72) + 21)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 199)]*placeholder.shared[((threadIdx.z*72) + 21)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 57)]*placeholder.shared[((threadIdx.z*72) + 39)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 85)]*placeholder.shared[((threadIdx.z*72) + 39)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 171)]*placeholder.shared[((threadIdx.z*72) + 39)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 199)]*placeholder.shared[((threadIdx.z*72) + 39)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 57)]*placeholder.shared[((threadIdx.z*72) + 57)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 85)]*placeholder.shared[((threadIdx.z*72) + 57)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 171)]*placeholder.shared[((threadIdx.z*72) + 57)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 199)]*placeholder.shared[((threadIdx.z*72) + 57)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 58)]*placeholder.shared[((threadIdx.z*72) + 4)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 86)]*placeholder.shared[((threadIdx.z*72) + 4)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 172)]*placeholder.shared[((threadIdx.z*72) + 4)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 200)]*placeholder.shared[((threadIdx.z*72) + 4)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 58)]*placeholder.shared[((threadIdx.z*72) + 22)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 86)]*placeholder.shared[((threadIdx.z*72) + 22)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 172)]*placeholder.shared[((threadIdx.z*72) + 22)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 200)]*placeholder.shared[((threadIdx.z*72) + 22)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 58)]*placeholder.shared[((threadIdx.z*72) + 40)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 86)]*placeholder.shared[((threadIdx.z*72) + 40)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 172)]*placeholder.shared[((threadIdx.z*72) + 40)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 200)]*placeholder.shared[((threadIdx.z*72) + 40)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 58)]*placeholder.shared[((threadIdx.z*72) + 58)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 86)]*placeholder.shared[((threadIdx.z*72) + 58)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 172)]*placeholder.shared[((threadIdx.z*72) + 58)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 200)]*placeholder.shared[((threadIdx.z*72) + 58)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 59)]*placeholder.shared[((threadIdx.z*72) + 5)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 87)]*placeholder.shared[((threadIdx.z*72) + 5)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 173)]*placeholder.shared[((threadIdx.z*72) + 5)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 201)]*placeholder.shared[((threadIdx.z*72) + 5)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 59)]*placeholder.shared[((threadIdx.z*72) + 23)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 87)]*placeholder.shared[((threadIdx.z*72) + 23)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 173)]*placeholder.shared[((threadIdx.z*72) + 23)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 201)]*placeholder.shared[((threadIdx.z*72) + 23)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 59)]*placeholder.shared[((threadIdx.z*72) + 41)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 87)]*placeholder.shared[((threadIdx.z*72) + 41)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 173)]*placeholder.shared[((threadIdx.z*72) + 41)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 201)]*placeholder.shared[((threadIdx.z*72) + 41)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 59)]*placeholder.shared[((threadIdx.z*72) + 59)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 87)]*placeholder.shared[((threadIdx.z*72) + 59)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 173)]*placeholder.shared[((threadIdx.z*72) + 59)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 201)]*placeholder.shared[((threadIdx.z*72) + 59)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 114)]*placeholder.shared[((threadIdx.z*72) + 6)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 142)]*placeholder.shared[((threadIdx.z*72) + 6)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 228)]*placeholder.shared[((threadIdx.z*72) + 6)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 256)]*placeholder.shared[((threadIdx.z*72) + 6)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 114)]*placeholder.shared[((threadIdx.z*72) + 24)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 142)]*placeholder.shared[((threadIdx.z*72) + 24)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 228)]*placeholder.shared[((threadIdx.z*72) + 24)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 256)]*placeholder.shared[((threadIdx.z*72) + 24)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 114)]*placeholder.shared[((threadIdx.z*72) + 42)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 142)]*placeholder.shared[((threadIdx.z*72) + 42)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 228)]*placeholder.shared[((threadIdx.z*72) + 42)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 256)]*placeholder.shared[((threadIdx.z*72) + 42)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 114)]*placeholder.shared[((threadIdx.z*72) + 60)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 142)]*placeholder.shared[((threadIdx.z*72) + 60)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 228)]*placeholder.shared[((threadIdx.z*72) + 60)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 256)]*placeholder.shared[((threadIdx.z*72) + 60)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 115)]*placeholder.shared[((threadIdx.z*72) + 7)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 143)]*placeholder.shared[((threadIdx.z*72) + 7)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 229)]*placeholder.shared[((threadIdx.z*72) + 7)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 257)]*placeholder.shared[((threadIdx.z*72) + 7)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 115)]*placeholder.shared[((threadIdx.z*72) + 25)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 143)]*placeholder.shared[((threadIdx.z*72) + 25)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 229)]*placeholder.shared[((threadIdx.z*72) + 25)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 257)]*placeholder.shared[((threadIdx.z*72) + 25)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 115)]*placeholder.shared[((threadIdx.z*72) + 43)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 143)]*placeholder.shared[((threadIdx.z*72) + 43)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 229)]*placeholder.shared[((threadIdx.z*72) + 43)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 257)]*placeholder.shared[((threadIdx.z*72) + 43)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 115)]*placeholder.shared[((threadIdx.z*72) + 61)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 143)]*placeholder.shared[((threadIdx.z*72) + 61)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 229)]*placeholder.shared[((threadIdx.z*72) + 61)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 257)]*placeholder.shared[((threadIdx.z*72) + 61)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 116)]*placeholder.shared[((threadIdx.z*72) + 8)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 144)]*placeholder.shared[((threadIdx.z*72) + 8)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 230)]*placeholder.shared[((threadIdx.z*72) + 8)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 258)]*placeholder.shared[((threadIdx.z*72) + 8)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 116)]*placeholder.shared[((threadIdx.z*72) + 26)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 144)]*placeholder.shared[((threadIdx.z*72) + 26)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 230)]*placeholder.shared[((threadIdx.z*72) + 26)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 258)]*placeholder.shared[((threadIdx.z*72) + 26)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 116)]*placeholder.shared[((threadIdx.z*72) + 44)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 144)]*placeholder.shared[((threadIdx.z*72) + 44)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 230)]*placeholder.shared[((threadIdx.z*72) + 44)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 258)]*placeholder.shared[((threadIdx.z*72) + 44)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 116)]*placeholder.shared[((threadIdx.z*72) + 62)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 144)]*placeholder.shared[((threadIdx.z*72) + 62)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 230)]*placeholder.shared[((threadIdx.z*72) + 62)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 258)]*placeholder.shared[((threadIdx.z*72) + 62)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 285)]*placeholder.shared[((threadIdx.z*72) + 9)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 313)]*placeholder.shared[((threadIdx.z*72) + 9)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 399)]*placeholder.shared[((threadIdx.z*72) + 9)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 427)]*placeholder.shared[((threadIdx.z*72) + 9)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 285)]*placeholder.shared[((threadIdx.z*72) + 27)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 313)]*placeholder.shared[((threadIdx.z*72) + 27)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 399)]*placeholder.shared[((threadIdx.z*72) + 27)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 427)]*placeholder.shared[((threadIdx.z*72) + 27)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 285)]*placeholder.shared[((threadIdx.z*72) + 45)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 313)]*placeholder.shared[((threadIdx.z*72) + 45)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 399)]*placeholder.shared[((threadIdx.z*72) + 45)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 427)]*placeholder.shared[((threadIdx.z*72) + 45)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 285)]*placeholder.shared[((threadIdx.z*72) + 63)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 313)]*placeholder.shared[((threadIdx.z*72) + 63)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 399)]*placeholder.shared[((threadIdx.z*72) + 63)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 427)]*placeholder.shared[((threadIdx.z*72) + 63)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 286)]*placeholder.shared[((threadIdx.z*72) + 10)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 314)]*placeholder.shared[((threadIdx.z*72) + 10)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 400)]*placeholder.shared[((threadIdx.z*72) + 10)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 428)]*placeholder.shared[((threadIdx.z*72) + 10)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 286)]*placeholder.shared[((threadIdx.z*72) + 28)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 314)]*placeholder.shared[((threadIdx.z*72) + 28)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 400)]*placeholder.shared[((threadIdx.z*72) + 28)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 428)]*placeholder.shared[((threadIdx.z*72) + 28)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 286)]*placeholder.shared[((threadIdx.z*72) + 46)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 314)]*placeholder.shared[((threadIdx.z*72) + 46)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 400)]*placeholder.shared[((threadIdx.z*72) + 46)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 428)]*placeholder.shared[((threadIdx.z*72) + 46)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 286)]*placeholder.shared[((threadIdx.z*72) + 64)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 314)]*placeholder.shared[((threadIdx.z*72) + 64)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 400)]*placeholder.shared[((threadIdx.z*72) + 64)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 428)]*placeholder.shared[((threadIdx.z*72) + 64)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 287)]*placeholder.shared[((threadIdx.z*72) + 11)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 315)]*placeholder.shared[((threadIdx.z*72) + 11)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 401)]*placeholder.shared[((threadIdx.z*72) + 11)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 429)]*placeholder.shared[((threadIdx.z*72) + 11)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 287)]*placeholder.shared[((threadIdx.z*72) + 29)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 315)]*placeholder.shared[((threadIdx.z*72) + 29)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 401)]*placeholder.shared[((threadIdx.z*72) + 29)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 429)]*placeholder.shared[((threadIdx.z*72) + 29)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 287)]*placeholder.shared[((threadIdx.z*72) + 47)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 315)]*placeholder.shared[((threadIdx.z*72) + 47)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 401)]*placeholder.shared[((threadIdx.z*72) + 47)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 429)]*placeholder.shared[((threadIdx.z*72) + 47)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 287)]*placeholder.shared[((threadIdx.z*72) + 65)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 315)]*placeholder.shared[((threadIdx.z*72) + 65)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 401)]*placeholder.shared[((threadIdx.z*72) + 65)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 429)]*placeholder.shared[((threadIdx.z*72) + 65)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 342)]*placeholder.shared[((threadIdx.z*72) + 12)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 370)]*placeholder.shared[((threadIdx.z*72) + 12)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 456)]*placeholder.shared[((threadIdx.z*72) + 12)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 484)]*placeholder.shared[((threadIdx.z*72) + 12)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 342)]*placeholder.shared[((threadIdx.z*72) + 30)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 370)]*placeholder.shared[((threadIdx.z*72) + 30)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 456)]*placeholder.shared[((threadIdx.z*72) + 30)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 484)]*placeholder.shared[((threadIdx.z*72) + 30)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 342)]*placeholder.shared[((threadIdx.z*72) + 48)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 370)]*placeholder.shared[((threadIdx.z*72) + 48)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 456)]*placeholder.shared[((threadIdx.z*72) + 48)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 484)]*placeholder.shared[((threadIdx.z*72) + 48)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 342)]*placeholder.shared[((threadIdx.z*72) + 66)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 370)]*placeholder.shared[((threadIdx.z*72) + 66)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 456)]*placeholder.shared[((threadIdx.z*72) + 66)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 484)]*placeholder.shared[((threadIdx.z*72) + 66)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 343)]*placeholder.shared[((threadIdx.z*72) + 13)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 371)]*placeholder.shared[((threadIdx.z*72) + 13)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 457)]*placeholder.shared[((threadIdx.z*72) + 13)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 485)]*placeholder.shared[((threadIdx.z*72) + 13)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 343)]*placeholder.shared[((threadIdx.z*72) + 31)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 371)]*placeholder.shared[((threadIdx.z*72) + 31)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 457)]*placeholder.shared[((threadIdx.z*72) + 31)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 485)]*placeholder.shared[((threadIdx.z*72) + 31)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 343)]*placeholder.shared[((threadIdx.z*72) + 49)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 371)]*placeholder.shared[((threadIdx.z*72) + 49)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 457)]*placeholder.shared[((threadIdx.z*72) + 49)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 485)]*placeholder.shared[((threadIdx.z*72) + 49)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 343)]*placeholder.shared[((threadIdx.z*72) + 67)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 371)]*placeholder.shared[((threadIdx.z*72) + 67)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 457)]*placeholder.shared[((threadIdx.z*72) + 67)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 485)]*placeholder.shared[((threadIdx.z*72) + 67)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 344)]*placeholder.shared[((threadIdx.z*72) + 14)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 372)]*placeholder.shared[((threadIdx.z*72) + 14)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 458)]*placeholder.shared[((threadIdx.z*72) + 14)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 486)]*placeholder.shared[((threadIdx.z*72) + 14)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 344)]*placeholder.shared[((threadIdx.z*72) + 32)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 372)]*placeholder.shared[((threadIdx.z*72) + 32)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 458)]*placeholder.shared[((threadIdx.z*72) + 32)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 486)]*placeholder.shared[((threadIdx.z*72) + 32)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 344)]*placeholder.shared[((threadIdx.z*72) + 50)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 372)]*placeholder.shared[((threadIdx.z*72) + 50)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 458)]*placeholder.shared[((threadIdx.z*72) + 50)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 486)]*placeholder.shared[((threadIdx.z*72) + 50)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 344)]*placeholder.shared[((threadIdx.z*72) + 68)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 372)]*placeholder.shared[((threadIdx.z*72) + 68)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 458)]*placeholder.shared[((threadIdx.z*72) + 68)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 486)]*placeholder.shared[((threadIdx.z*72) + 68)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 399)]*placeholder.shared[((threadIdx.z*72) + 15)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 427)]*placeholder.shared[((threadIdx.z*72) + 15)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 513)]*placeholder.shared[((threadIdx.z*72) + 15)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 541)]*placeholder.shared[((threadIdx.z*72) + 15)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 399)]*placeholder.shared[((threadIdx.z*72) + 33)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 427)]*placeholder.shared[((threadIdx.z*72) + 33)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 513)]*placeholder.shared[((threadIdx.z*72) + 33)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 541)]*placeholder.shared[((threadIdx.z*72) + 33)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 399)]*placeholder.shared[((threadIdx.z*72) + 51)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 427)]*placeholder.shared[((threadIdx.z*72) + 51)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 513)]*placeholder.shared[((threadIdx.z*72) + 51)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 541)]*placeholder.shared[((threadIdx.z*72) + 51)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 399)]*placeholder.shared[((threadIdx.z*72) + 69)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 427)]*placeholder.shared[((threadIdx.z*72) + 69)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 513)]*placeholder.shared[((threadIdx.z*72) + 69)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 541)]*placeholder.shared[((threadIdx.z*72) + 69)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 400)]*placeholder.shared[((threadIdx.z*72) + 16)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 428)]*placeholder.shared[((threadIdx.z*72) + 16)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 514)]*placeholder.shared[((threadIdx.z*72) + 16)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 542)]*placeholder.shared[((threadIdx.z*72) + 16)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 400)]*placeholder.shared[((threadIdx.z*72) + 34)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 428)]*placeholder.shared[((threadIdx.z*72) + 34)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 514)]*placeholder.shared[((threadIdx.z*72) + 34)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 542)]*placeholder.shared[((threadIdx.z*72) + 34)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 400)]*placeholder.shared[((threadIdx.z*72) + 52)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 428)]*placeholder.shared[((threadIdx.z*72) + 52)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 514)]*placeholder.shared[((threadIdx.z*72) + 52)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 542)]*placeholder.shared[((threadIdx.z*72) + 52)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 400)]*placeholder.shared[((threadIdx.z*72) + 70)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 428)]*placeholder.shared[((threadIdx.z*72) + 70)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 514)]*placeholder.shared[((threadIdx.z*72) + 70)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 542)]*placeholder.shared[((threadIdx.z*72) + 70)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 401)]*placeholder.shared[((threadIdx.z*72) + 17)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.x*2) + 429)]*placeholder.shared[((threadIdx.z*72) + 17)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 515)]*placeholder.shared[((threadIdx.z*72) + 17)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.x*2) + 543)]*placeholder.shared[((threadIdx.z*72) + 17)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 401)]*placeholder.shared[((threadIdx.z*72) + 35)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.x*2) + 429)]*placeholder.shared[((threadIdx.z*72) + 35)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 515)]*placeholder.shared[((threadIdx.z*72) + 35)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.x*2) + 543)]*placeholder.shared[((threadIdx.z*72) + 35)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 401)]*placeholder.shared[((threadIdx.z*72) + 53)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.x*2) + 429)]*placeholder.shared[((threadIdx.z*72) + 53)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 515)]*placeholder.shared[((threadIdx.z*72) + 53)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.x*2) + 543)]*placeholder.shared[((threadIdx.z*72) + 53)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 401)]*placeholder.shared[((threadIdx.z*72) + 71)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.x*2) + 429)]*placeholder.shared[((threadIdx.z*72) + 71)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 515)]*placeholder.shared[((threadIdx.z*72) + 71)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.x*2) + 543)]*placeholder.shared[((threadIdx.z*72) + 71)]))
  }
  compute[((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x)] = compute.local[0]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 14)] = compute.local[8]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 28)] = compute.local[1]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 42)] = compute.local[9]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 784)] = compute.local[2]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 798)] = compute.local[10]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 812)] = compute.local[3]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 826)] = compute.local[11]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 1568)] = compute.local[4]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 1582)] = compute.local[12]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 1596)] = compute.local[5]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 1610)] = compute.local[13]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 2352)] = compute.local[6]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 2366)] = compute.local[14]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 2380)] = compute.local[7]
  compute[(((((blockIdx.z*50176) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 2394)] = compute.local[15]
}
, GlobalVar(tvmgen_default_fused_add_28): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_28", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[0])
}
, GlobalVar(tvmgen_default_fused_multiply_5): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_5", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 256
  T_multiply[threadIdx.x] = (placeholder[threadIdx.x]*placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_max_pool2d): PrimFunc([placeholder, tensor]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_max_pool2d", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  allocate tensor.local[float32 * 1], storage_scope = local
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  tensor.local[0] = -3.40282e+38f
  for (rv0, 0, 3) {
    for (rv1, 0, 3) {
      tensor.local[0] = max(tensor.local[0], tir.if_then_else(((1 <= ((floordiv(floormod(((blockIdx.x*1024) + threadIdx.x), 3136), 56)*2) + rv0)) && (1 <= ((floormod(((blockIdx.x*1024) + threadIdx.x), 56)*2) + rv1))), placeholder[(((((floordiv(((blockIdx.x*1024) + threadIdx.x), 56)*224) + (rv0*112)) + (floormod(((blockIdx.x*1024) + threadIdx.x), 56)*2)) + rv1) - 113)], -3.40282e+38f))
    }
  }
  tensor[((blockIdx.x*1024) + threadIdx.x)] = tensor.local[0]
}
, GlobalVar(tvmgen_default_fused_expand_dims_6): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_6", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_expand_dims[((blockIdx.x*1024) + threadIdx.x)] = placeholder[((blockIdx.x*1024) + threadIdx.x)]
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_5): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_5", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 4
  allocate compute.local[float32 * 16], storage_scope = local
  allocate pad_temp.shared[float32 * 896], storage_scope = shared
  allocate placeholder.shared[float32 * 256], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 14
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
  for (yy.c.init, 0, 2) {
    compute.local[yy.c.init] = 0f
    compute.local[(yy.c.init + 4)] = 0f
    compute.local[(yy.c.init + 8)] = 0f
    compute.local[(yy.c.init + 12)] = 0f
    compute.local[(yy.c.init + 2)] = 0f
    compute.local[(yy.c.init + 6)] = 0f
    compute.local[(yy.c.init + 10)] = 0f
    compute.local[(yy.c.init + 14)] = 0f
  }
  for (rc.outer, 0, 32) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 4) {
      pad_temp.shared[(((threadIdx.z*112) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((((rc.outer*25088) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (floordiv(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 28)*56)) + (blockIdx.x*28)) + floormod(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 28))]
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 2) {
      if ((((threadIdx.z*4) + floordiv(((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8)) < 32)) {
        if (((((threadIdx.z*32) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 256)) {
          if ((((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 32)) {
            placeholder.shared[(((threadIdx.z*32) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((blockIdx.z*8192) + (threadIdx.z*1024)) + (floordiv(((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8)*256)) + (rc.outer*8)) + floormod(((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8))]
          }
        }
      }
    }
    for (rc.inner, 0, 8) {
      for (yy.c, 0, 2) {
        compute.local[yy.c] = (compute.local[yy.c] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute.local[(yy.c + 4)] = (compute.local[(yy.c + 4)] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute.local[(yy.c + 8)] = (compute.local[(yy.c + 8)] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute.local[(yy.c + 12)] = (compute.local[(yy.c + 12)] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
        compute.local[(yy.c + 2)] = (compute.local[(yy.c + 2)] + (pad_temp.shared[((((rc.inner*112) + (yy.c*28)) + threadIdx.x) + 56)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute.local[(yy.c + 6)] = (compute.local[(yy.c + 6)] + (pad_temp.shared[((((rc.inner*112) + (yy.c*28)) + threadIdx.x) + 56)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 64)]))
        compute.local[(yy.c + 10)] = (compute.local[(yy.c + 10)] + (pad_temp.shared[((((rc.inner*112) + (yy.c*28)) + threadIdx.x) + 56)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute.local[(yy.c + 14)] = (compute.local[(yy.c + 14)] + (pad_temp.shared[((((rc.inner*112) + (yy.c*28)) + threadIdx.x) + 56)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 192)]))
      }
    }
  }
  for (yy.inner.inner.inner, 0, 2) {
    compute[((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x)] = compute.local[yy.inner.inner.inner]
    compute[(((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 25088)] = compute.local[(yy.inner.inner.inner + 4)]
    compute[(((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 50176)] = compute.local[(yy.inner.inner.inner + 8)]
    compute[(((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 75264)] = compute.local[(yy.inner.inner.inner + 12)]
    compute[(((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 112)] = compute.local[(yy.inner.inner.inner + 2)]
    compute[(((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 25200)] = compute.local[(yy.inner.inner.inner + 6)]
    compute[(((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 50288)] = compute.local[(yy.inner.inner.inner + 10)]
    compute[(((((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 75376)] = compute.local[(yy.inner.inner.inner + 14)]
  }
}
, GlobalVar(tvmgen_default_fused_multiply_9): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_9", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 784)])
}
, GlobalVar(tvmgen_default_fused_multiply_18): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_18", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[((blockIdx.x*1024) + threadIdx.x)])
}
, GlobalVar(tvmgen_default_fused_expand_dims_4): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_4", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 512
  T_expand_dims[threadIdx.x] = placeholder[threadIdx.x]
}
, GlobalVar(tvmgen_default_fused_sqrt_6): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_6", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_sqrt[((blockIdx.x*1024) + threadIdx.x)] = tir.sqrt(placeholder[((blockIdx.x*1024) + threadIdx.x)])
}
, GlobalVar(tvmgen_default_fused_sqrt_2): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_2", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 256
  T_sqrt[threadIdx.x] = tir.sqrt(placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_multiply_3): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_3", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 4) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 802816)) {
      T_multiply[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)]*placeholder[floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 12544)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_14): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_14", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 32
  allocate compute.local[float32 * 8], storage_scope = local
  allocate pad_temp.shared[float32 * 648], storage_scope = shared
  allocate placeholder.shared[float32 * 256], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 7
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
  compute.local[0] = 0f
  compute.local[4] = 0f
  compute.local[2] = 0f
  compute.local[6] = 0f
  compute.local[1] = 0f
  compute.local[5] = 0f
  compute.local[3] = 0f
  compute.local[7] = 0f
  for (rc.outer, 0, 64) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
    pad_temp.shared[((threadIdx.z*81) + (threadIdx.x*6))] = placeholder[(((((rc.outer*6272) + (threadIdx.z*784)) + (blockIdx.y*112)) + (floordiv((threadIdx.x*6), 27)*28)) + floormod((threadIdx.x*6), 27))]
    pad_temp.shared[(((threadIdx.z*81) + (threadIdx.x*6)) + 1)] = placeholder[(((((rc.outer*6272) + (threadIdx.z*784)) + (blockIdx.y*112)) + (floordiv(((threadIdx.x*6) + 1), 27)*28)) + floormod(((threadIdx.x*6) + 1), 27))]
    pad_temp.shared[(((threadIdx.z*81) + (threadIdx.x*6)) + 2)] = placeholder[(((((rc.outer*6272) + (threadIdx.z*784)) + (blockIdx.y*112)) + (floordiv(((threadIdx.x*6) + 2), 27)*28)) + floormod(((threadIdx.x*6) + 2), 27))]
    if (((floordiv(((threadIdx.x*6) + 3), 81) + threadIdx.z) < 8)) {
      if ((((threadIdx.z*3) + floordiv(((threadIdx.x*6) + 3), 27)) < 24)) {
        if ((((threadIdx.z*81) + (threadIdx.x*6)) < 645)) {
          if ((threadIdx.x < 13)) {
            pad_temp.shared[(((threadIdx.z*81) + (threadIdx.x*6)) + 3)] = placeholder[(((((rc.outer*6272) + (threadIdx.z*784)) + (blockIdx.y*112)) + (floordiv(((threadIdx.x*6) + 3), 27)*28)) + floormod(((threadIdx.x*6) + 3), 27))]
          }
        }
      }
    }
    if (((floordiv(((threadIdx.x*6) + 4), 81) + threadIdx.z) < 8)) {
      if ((((threadIdx.z*3) + floordiv(((threadIdx.x*6) + 4), 27)) < 24)) {
        if ((((threadIdx.z*81) + (threadIdx.x*6)) < 644)) {
          if ((threadIdx.x < 13)) {
            pad_temp.shared[(((threadIdx.z*81) + (threadIdx.x*6)) + 4)] = placeholder[(((((rc.outer*6272) + (threadIdx.z*784)) + (blockIdx.y*112)) + (floordiv(((threadIdx.x*6) + 4), 27)*28)) + floormod(((threadIdx.x*6) + 4), 27))]
          }
        }
      }
    }
    if (((floordiv(((threadIdx.x*6) + 5), 81) + threadIdx.z) < 8)) {
      if ((((threadIdx.z*3) + floordiv(((threadIdx.x*6) + 5), 27)) < 24)) {
        if ((((threadIdx.z*81) + (threadIdx.x*6)) < 643)) {
          if ((threadIdx.x < 13)) {
            pad_temp.shared[(((threadIdx.z*81) + (threadIdx.x*6)) + 5)] = placeholder[(((((rc.outer*6272) + (threadIdx.z*784)) + (blockIdx.y*112)) + (floordiv(((threadIdx.x*6) + 5), 27)*28)) + floormod(((threadIdx.x*6) + 5), 27))]
          }
        }
      }
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
    if ((((threadIdx.z*4) + floordiv((threadIdx.x*3), 8)) < 32)) {
      if ((((threadIdx.z*32) + (threadIdx.x*3)) < 256)) {
        if ((threadIdx.x < 11)) {
          placeholder.shared[((threadIdx.z*32) + (threadIdx.x*3))] = placeholder[(((((blockIdx.z*16384) + (threadIdx.z*2048)) + (floordiv((threadIdx.x*3), 8)*512)) + (rc.outer*8)) + floormod((threadIdx.x*3), 8))]
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.x*3) + 1), 8)) < 32)) {
      if ((((threadIdx.z*32) + (threadIdx.x*3)) < 255)) {
        if ((threadIdx.x < 11)) {
          placeholder.shared[(((threadIdx.z*32) + (threadIdx.x*3)) + 1)] = placeholder[(((((blockIdx.z*16384) + (threadIdx.z*2048)) + (floordiv(((threadIdx.x*3) + 1), 8)*512)) + (rc.outer*8)) + floormod(((threadIdx.x*3) + 1), 8))]
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.x*3) + 2), 8)) < 32)) {
      if ((((threadIdx.z*32) + (threadIdx.x*3)) < 254)) {
        if ((threadIdx.x < 10)) {
          placeholder.shared[(((threadIdx.z*32) + (threadIdx.x*3)) + 2)] = placeholder[(((((blockIdx.z*16384) + (threadIdx.z*2048)) + (floordiv(((threadIdx.x*3) + 2), 8)*512)) + (rc.outer*8)) + floormod(((threadIdx.x*3) + 2), 8))]
        }
      }
    }
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[(threadIdx.z*16)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[((threadIdx.z*16) + 128)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 54)]*placeholder.shared[(threadIdx.z*16)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 54)]*placeholder.shared[((threadIdx.z*16) + 128)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[((threadIdx.z*16) + 8)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[((threadIdx.z*16) + 136)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 54)]*placeholder.shared[((threadIdx.z*16) + 8)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 54)]*placeholder.shared[((threadIdx.z*16) + 136)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 81)]*placeholder.shared[((threadIdx.z*16) + 1)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 81)]*placeholder.shared[((threadIdx.z*16) + 129)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 135)]*placeholder.shared[((threadIdx.z*16) + 1)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 135)]*placeholder.shared[((threadIdx.z*16) + 129)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 81)]*placeholder.shared[((threadIdx.z*16) + 9)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 81)]*placeholder.shared[((threadIdx.z*16) + 137)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 135)]*placeholder.shared[((threadIdx.z*16) + 9)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 135)]*placeholder.shared[((threadIdx.z*16) + 137)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 162)]*placeholder.shared[((threadIdx.z*16) + 2)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 162)]*placeholder.shared[((threadIdx.z*16) + 130)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 216)]*placeholder.shared[((threadIdx.z*16) + 2)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 216)]*placeholder.shared[((threadIdx.z*16) + 130)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 162)]*placeholder.shared[((threadIdx.z*16) + 10)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 162)]*placeholder.shared[((threadIdx.z*16) + 138)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 216)]*placeholder.shared[((threadIdx.z*16) + 10)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 216)]*placeholder.shared[((threadIdx.z*16) + 138)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 243)]*placeholder.shared[((threadIdx.z*16) + 3)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 243)]*placeholder.shared[((threadIdx.z*16) + 131)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 297)]*placeholder.shared[((threadIdx.z*16) + 3)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 297)]*placeholder.shared[((threadIdx.z*16) + 131)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 243)]*placeholder.shared[((threadIdx.z*16) + 11)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 243)]*placeholder.shared[((threadIdx.z*16) + 139)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 297)]*placeholder.shared[((threadIdx.z*16) + 11)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 297)]*placeholder.shared[((threadIdx.z*16) + 139)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 324)]*placeholder.shared[((threadIdx.z*16) + 4)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 324)]*placeholder.shared[((threadIdx.z*16) + 132)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 378)]*placeholder.shared[((threadIdx.z*16) + 4)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 378)]*placeholder.shared[((threadIdx.z*16) + 132)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 324)]*placeholder.shared[((threadIdx.z*16) + 12)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 324)]*placeholder.shared[((threadIdx.z*16) + 140)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 378)]*placeholder.shared[((threadIdx.z*16) + 12)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 378)]*placeholder.shared[((threadIdx.z*16) + 140)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 405)]*placeholder.shared[((threadIdx.z*16) + 5)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 405)]*placeholder.shared[((threadIdx.z*16) + 133)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 459)]*placeholder.shared[((threadIdx.z*16) + 5)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 459)]*placeholder.shared[((threadIdx.z*16) + 133)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 405)]*placeholder.shared[((threadIdx.z*16) + 13)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 405)]*placeholder.shared[((threadIdx.z*16) + 141)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 459)]*placeholder.shared[((threadIdx.z*16) + 13)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 459)]*placeholder.shared[((threadIdx.z*16) + 141)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 486)]*placeholder.shared[((threadIdx.z*16) + 6)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 486)]*placeholder.shared[((threadIdx.z*16) + 134)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 540)]*placeholder.shared[((threadIdx.z*16) + 6)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 540)]*placeholder.shared[((threadIdx.z*16) + 134)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 486)]*placeholder.shared[((threadIdx.z*16) + 14)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 486)]*placeholder.shared[((threadIdx.z*16) + 142)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 540)]*placeholder.shared[((threadIdx.z*16) + 14)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 540)]*placeholder.shared[((threadIdx.z*16) + 142)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 567)]*placeholder.shared[((threadIdx.z*16) + 7)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.x*2) + 567)]*placeholder.shared[((threadIdx.z*16) + 135)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 621)]*placeholder.shared[((threadIdx.z*16) + 7)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.x*2) + 621)]*placeholder.shared[((threadIdx.z*16) + 135)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 567)]*placeholder.shared[((threadIdx.z*16) + 15)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.x*2) + 567)]*placeholder.shared[((threadIdx.z*16) + 143)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 621)]*placeholder.shared[((threadIdx.z*16) + 15)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.x*2) + 621)]*placeholder.shared[((threadIdx.z*16) + 143)]))
  }
  compute[((((blockIdx.z*6272) + (threadIdx.z*392)) + (blockIdx.y*28)) + threadIdx.x)] = compute.local[0]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*392)) + (blockIdx.y*28)) + threadIdx.x) + 3136)] = compute.local[4]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*392)) + (blockIdx.y*28)) + threadIdx.x) + 14)] = compute.local[2]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*392)) + (blockIdx.y*28)) + threadIdx.x) + 3150)] = compute.local[6]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*392)) + (blockIdx.y*28)) + threadIdx.x) + 196)] = compute.local[1]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*392)) + (blockIdx.y*28)) + threadIdx.x) + 3332)] = compute.local[5]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*392)) + (blockIdx.y*28)) + threadIdx.x) + 210)] = compute.local[3]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*392)) + (blockIdx.y*28)) + threadIdx.x) + 3346)] = compute.local[7]
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_1): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_1", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 1
  allocate compute.local[float32 * 16], storage_scope = local
  allocate pad_temp.shared[float32 * 896], storage_scope = shared
  allocate placeholder.shared[float32 * 1024], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 56
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
  compute.local[0] = 0f
  compute.local[2] = 0f
  compute.local[4] = 0f
  compute.local[6] = 0f
  compute.local[8] = 0f
  compute.local[10] = 0f
  compute.local[12] = 0f
  compute.local[14] = 0f
  compute.local[1] = 0f
  compute.local[3] = 0f
  compute.local[5] = 0f
  compute.local[7] = 0f
  compute.local[9] = 0f
  compute.local[11] = 0f
  compute.local[13] = 0f
  compute.local[15] = 0f
  for (rc.outer, 0, 4) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 4) {
      pad_temp.shared[(((threadIdx.z*112) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((rc.outer*50176) + (threadIdx.z*6272)) + (floordiv(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 56)*3136)) + (blockIdx.y*56)) + floormod(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 56))]
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 5) {
      if ((((threadIdx.z*8) + floordiv(((threadIdx.x*5) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)) < 64)) {
        if (((((threadIdx.z*128) + (threadIdx.x*5)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 1024)) {
          if ((((threadIdx.x*5) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 128)) {
            placeholder.shared[(((threadIdx.z*128) + (threadIdx.x*5)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((threadIdx.z*512) + (floordiv(((threadIdx.x*5) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)*64)) + (rc.outer*16)) + floormod(((threadIdx.x*5) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16))]
          }
        }
      }
    }
    for (rc.inner, 0, 16) {
      compute.local[0] = (compute.local[0] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[2] = (compute.local[2] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 128)]))
      compute.local[4] = (compute.local[4] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[6] = (compute.local[6] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 384)]))
      compute.local[8] = (compute.local[8] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
      compute.local[10] = (compute.local[10] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 640)]))
      compute.local[12] = (compute.local[12] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
      compute.local[14] = (compute.local[14] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 896)]))
      compute.local[1] = (compute.local[1] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[3] = (compute.local[3] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 128)]))
      compute.local[5] = (compute.local[5] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[7] = (compute.local[7] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 384)]))
      compute.local[9] = (compute.local[9] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
      compute.local[11] = (compute.local[11] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 640)]))
      compute.local[13] = (compute.local[13] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
      compute.local[15] = (compute.local[15] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 896)]))
    }
  }
  compute[(((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x)] = compute.local[0]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 25088)] = compute.local[2]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 50176)] = compute.local[4]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 75264)] = compute.local[6]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 100352)] = compute.local[8]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 125440)] = compute.local[10]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 150528)] = compute.local[12]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 175616)] = compute.local[14]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 28)] = compute.local[1]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 25116)] = compute.local[3]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 50204)] = compute.local[5]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 75292)] = compute.local[7]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 100380)] = compute.local[9]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 125468)] = compute.local[11]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 150556)] = compute.local[13]
  compute[((((threadIdx.z*3136) + (blockIdx.y*56)) + threadIdx.x) + 175644)] = compute.local[15]
}
, GlobalVar(tvmgen_default_fused_nn_relu_9): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_9", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_relu[((blockIdx.x*1024) + threadIdx.x)] = max(placeholder[((blockIdx.x*1024) + threadIdx.x)], 0f)
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_12): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_12", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 4
  allocate compute.local[float32 * 56], storage_scope = local
  allocate pad_temp.shared[float32 * 435], storage_scope = shared
  allocate placeholder.shared[float32 * 576], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 1
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1
  compute.local[0] = 0f
  compute.local[14] = 0f
  compute.local[28] = 0f
  compute.local[42] = 0f
  compute.local[7] = 0f
  compute.local[21] = 0f
  compute.local[35] = 0f
  compute.local[49] = 0f
  compute.local[1] = 0f
  compute.local[15] = 0f
  compute.local[29] = 0f
  compute.local[43] = 0f
  compute.local[8] = 0f
  compute.local[22] = 0f
  compute.local[36] = 0f
  compute.local[50] = 0f
  compute.local[2] = 0f
  compute.local[16] = 0f
  compute.local[30] = 0f
  compute.local[44] = 0f
  compute.local[9] = 0f
  compute.local[23] = 0f
  compute.local[37] = 0f
  compute.local[51] = 0f
  compute.local[3] = 0f
  compute.local[17] = 0f
  compute.local[31] = 0f
  compute.local[45] = 0f
  compute.local[10] = 0f
  compute.local[24] = 0f
  compute.local[38] = 0f
  compute.local[52] = 0f
  compute.local[4] = 0f
  compute.local[18] = 0f
  compute.local[32] = 0f
  compute.local[46] = 0f
  compute.local[11] = 0f
  compute.local[25] = 0f
  compute.local[39] = 0f
  compute.local[53] = 0f
  compute.local[5] = 0f
  compute.local[19] = 0f
  compute.local[33] = 0f
  compute.local[47] = 0f
  compute.local[12] = 0f
  compute.local[26] = 0f
  compute.local[40] = 0f
  compute.local[54] = 0f
  compute.local[6] = 0f
  compute.local[20] = 0f
  compute.local[34] = 0f
  compute.local[48] = 0f
  compute.local[13] = 0f
  compute.local[27] = 0f
  compute.local[41] = 0f
  compute.local[55] = 0f
  for (rc.outer, 0, 256) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1
    if ((((threadIdx.z*28) + (threadIdx.y*4)) < 435)) {
      pad_temp.shared[((threadIdx.z*28) + (threadIdx.y*4))] = tir.if_then_else(((15 <= ((threadIdx.z*28) + (threadIdx.y*4))) && (1 <= ((blockIdx.x*14) + floormod(((threadIdx.z*28) + (threadIdx.y*4)), 15)))), placeholder[(((((rc.outer*784) + (floordiv(((threadIdx.z*28) + (threadIdx.y*4)), 15)*28)) + (blockIdx.x*14)) + floormod(((threadIdx.z*28) + (threadIdx.y*4)), 15)) - 29)], 0f)
    }
    if ((((threadIdx.z*28) + (threadIdx.y*4)) < 434)) {
      pad_temp.shared[(((threadIdx.z*28) + (threadIdx.y*4)) + 1)] = tir.if_then_else(((14 <= ((threadIdx.z*28) + (threadIdx.y*4))) && (1 <= ((blockIdx.x*14) + floormod((((threadIdx.z*28) + (threadIdx.y*4)) + 1), 15)))), placeholder[(((((rc.outer*784) + (floordiv((((threadIdx.z*28) + (threadIdx.y*4)) + 1), 15)*28)) + (blockIdx.x*14)) + floormod((((threadIdx.z*28) + (threadIdx.y*4)) + 1), 15)) - 29)], 0f)
    }
    if ((((threadIdx.z*28) + (threadIdx.y*4)) < 433)) {
      pad_temp.shared[(((threadIdx.z*28) + (threadIdx.y*4)) + 2)] = tir.if_then_else(((13 <= ((threadIdx.z*28) + (threadIdx.y*4))) && (1 <= ((blockIdx.x*14) + floormod((((threadIdx.z*28) + (threadIdx.y*4)) + 2), 15)))), placeholder[(((((rc.outer*784) + (floordiv((((threadIdx.z*28) + (threadIdx.y*4)) + 2), 15)*28)) + (blockIdx.x*14)) + floormod((((threadIdx.z*28) + (threadIdx.y*4)) + 2), 15)) - 29)], 0f)
    }
    if ((((threadIdx.z*28) + (threadIdx.y*4)) < 432)) {
      pad_temp.shared[(((threadIdx.z*28) + (threadIdx.y*4)) + 3)] = tir.if_then_else(((12 <= ((threadIdx.z*28) + (threadIdx.y*4))) && (1 <= ((blockIdx.x*14) + floormod((((threadIdx.z*28) + (threadIdx.y*4)) + 3), 15)))), placeholder[(((((rc.outer*784) + (floordiv((((threadIdx.z*28) + (threadIdx.y*4)) + 3), 15)*28)) + (blockIdx.x*14)) + floormod((((threadIdx.z*28) + (threadIdx.y*4)) + 3), 15)) - 29)], 0f)
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1
    if ((((threadIdx.z*4) + floordiv((threadIdx.y*2), 3)) < 64)) {
      if ((((threadIdx.z*12) + (threadIdx.y*2)) < 192)) {
        if ((((threadIdx.z*36) + (threadIdx.y*6)) < 576)) {
          if ((threadIdx.y < 6)) {
            placeholder.shared[((threadIdx.z*36) + (threadIdx.y*6))] = placeholder[(((((blockIdx.z*147456) + (threadIdx.z*9216)) + (floordiv((threadIdx.y*2), 3)*2304)) + (rc.outer*9)) + (floormod((threadIdx.y*2), 3)*3))]
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv((threadIdx.y*2), 3)) < 64)) {
      if ((((threadIdx.z*12) + (threadIdx.y*2)) < 192)) {
        if ((((threadIdx.z*36) + (threadIdx.y*6)) < 575)) {
          if ((threadIdx.y < 6)) {
            placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 1)] = placeholder[((((((blockIdx.z*147456) + (threadIdx.z*9216)) + (floordiv((threadIdx.y*2), 3)*2304)) + (rc.outer*9)) + (floormod((threadIdx.y*2), 3)*3)) + 1)]
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv((threadIdx.y*2), 3)) < 64)) {
      if ((((threadIdx.z*12) + (threadIdx.y*2)) < 192)) {
        if ((((threadIdx.z*36) + (threadIdx.y*6)) < 574)) {
          if ((threadIdx.y < 6)) {
            placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 2)] = placeholder[((((((blockIdx.z*147456) + (threadIdx.z*9216)) + (floordiv((threadIdx.y*2), 3)*2304)) + (rc.outer*9)) + (floormod((threadIdx.y*2), 3)*3)) + 2)]
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.y*2) + 1), 3)) < 64)) {
      if ((((threadIdx.z*12) + (threadIdx.y*2)) < 191)) {
        if ((((threadIdx.z*36) + (threadIdx.y*6)) < 573)) {
          if ((threadIdx.y < 6)) {
            placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 3)] = placeholder[(((((blockIdx.z*147456) + (threadIdx.z*9216)) + (floordiv(((threadIdx.y*2) + 1), 3)*2304)) + (rc.outer*9)) + (floormod(((threadIdx.y*2) + 1), 3)*3))]
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.y*2) + 1), 3)) < 64)) {
      if ((((threadIdx.z*12) + (threadIdx.y*2)) < 191)) {
        if ((((threadIdx.z*36) + (threadIdx.y*6)) < 572)) {
          if ((threadIdx.y < 6)) {
            placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 4)] = placeholder[((((((blockIdx.z*147456) + (threadIdx.z*9216)) + (floordiv(((threadIdx.y*2) + 1), 3)*2304)) + (rc.outer*9)) + (floormod(((threadIdx.y*2) + 1), 3)*3)) + 1)]
          }
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.y*2) + 1), 3)) < 64)) {
      if ((((threadIdx.z*12) + (threadIdx.y*2)) < 191)) {
        if ((((threadIdx.z*36) + (threadIdx.y*6)) < 571)) {
          if ((threadIdx.y < 6)) {
            placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 5)] = placeholder[((((((blockIdx.z*147456) + (threadIdx.z*9216)) + (floordiv(((threadIdx.y*2) + 1), 3)*2304)) + (rc.outer*9)) + (floormod(((threadIdx.y*2) + 1), 3)*3)) + 2)]
          }
        }
      }
    }
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.y*30)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[(threadIdx.y*30)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[28] = (compute.local[28] + (pad_temp.shared[(threadIdx.y*30)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[42] = (compute.local[42] + (pad_temp.shared[(threadIdx.y*30)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 210)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[21] = (compute.local[21] + (pad_temp.shared[((threadIdx.y*30) + 210)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[35] = (compute.local[35] + (pad_temp.shared[((threadIdx.y*30) + 210)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[49] = (compute.local[49] + (pad_temp.shared[((threadIdx.y*30) + 210)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[29] = (compute.local[29] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[43] = (compute.local[43] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 212)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[22] = (compute.local[22] + (pad_temp.shared[((threadIdx.y*30) + 212)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[36] = (compute.local[36] + (pad_temp.shared[((threadIdx.y*30) + 212)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[50] = (compute.local[50] + (pad_temp.shared[((threadIdx.y*30) + 212)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[16] = (compute.local[16] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[30] = (compute.local[30] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[44] = (compute.local[44] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 214)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[23] = (compute.local[23] + (pad_temp.shared[((threadIdx.y*30) + 214)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[37] = (compute.local[37] + (pad_temp.shared[((threadIdx.y*30) + 214)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[51] = (compute.local[51] + (pad_temp.shared[((threadIdx.y*30) + 214)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[17] = (compute.local[17] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[31] = (compute.local[31] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[45] = (compute.local[45] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 216)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[24] = (compute.local[24] + (pad_temp.shared[((threadIdx.y*30) + 216)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[38] = (compute.local[38] + (pad_temp.shared[((threadIdx.y*30) + 216)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[52] = (compute.local[52] + (pad_temp.shared[((threadIdx.y*30) + 216)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[18] = (compute.local[18] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[32] = (compute.local[32] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[46] = (compute.local[46] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 218)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[25] = (compute.local[25] + (pad_temp.shared[((threadIdx.y*30) + 218)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[39] = (compute.local[39] + (pad_temp.shared[((threadIdx.y*30) + 218)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[53] = (compute.local[53] + (pad_temp.shared[((threadIdx.y*30) + 218)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[19] = (compute.local[19] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[33] = (compute.local[33] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[47] = (compute.local[47] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 220)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[26] = (compute.local[26] + (pad_temp.shared[((threadIdx.y*30) + 220)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[40] = (compute.local[40] + (pad_temp.shared[((threadIdx.y*30) + 220)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[54] = (compute.local[54] + (pad_temp.shared[((threadIdx.y*30) + 220)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[20] = (compute.local[20] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[34] = (compute.local[34] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[48] = (compute.local[48] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 222)]*placeholder.shared[(threadIdx.z*9)]))
    compute.local[27] = (compute.local[27] + (pad_temp.shared[((threadIdx.y*30) + 222)]*placeholder.shared[((threadIdx.z*9) + 144)]))
    compute.local[41] = (compute.local[41] + (pad_temp.shared[((threadIdx.y*30) + 222)]*placeholder.shared[((threadIdx.z*9) + 288)]))
    compute.local[55] = (compute.local[55] + (pad_temp.shared[((threadIdx.y*30) + 222)]*placeholder.shared[((threadIdx.z*9) + 432)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 1)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.y*30) + 1)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[28] = (compute.local[28] + (pad_temp.shared[((threadIdx.y*30) + 1)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[42] = (compute.local[42] + (pad_temp.shared[((threadIdx.y*30) + 1)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 211)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[21] = (compute.local[21] + (pad_temp.shared[((threadIdx.y*30) + 211)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[35] = (compute.local[35] + (pad_temp.shared[((threadIdx.y*30) + 211)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[49] = (compute.local[49] + (pad_temp.shared[((threadIdx.y*30) + 211)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 3)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.y*30) + 3)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[29] = (compute.local[29] + (pad_temp.shared[((threadIdx.y*30) + 3)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[43] = (compute.local[43] + (pad_temp.shared[((threadIdx.y*30) + 3)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 213)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[22] = (compute.local[22] + (pad_temp.shared[((threadIdx.y*30) + 213)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[36] = (compute.local[36] + (pad_temp.shared[((threadIdx.y*30) + 213)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[50] = (compute.local[50] + (pad_temp.shared[((threadIdx.y*30) + 213)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 5)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[16] = (compute.local[16] + (pad_temp.shared[((threadIdx.y*30) + 5)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[30] = (compute.local[30] + (pad_temp.shared[((threadIdx.y*30) + 5)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[44] = (compute.local[44] + (pad_temp.shared[((threadIdx.y*30) + 5)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 215)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[23] = (compute.local[23] + (pad_temp.shared[((threadIdx.y*30) + 215)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[37] = (compute.local[37] + (pad_temp.shared[((threadIdx.y*30) + 215)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[51] = (compute.local[51] + (pad_temp.shared[((threadIdx.y*30) + 215)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 7)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[17] = (compute.local[17] + (pad_temp.shared[((threadIdx.y*30) + 7)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[31] = (compute.local[31] + (pad_temp.shared[((threadIdx.y*30) + 7)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[45] = (compute.local[45] + (pad_temp.shared[((threadIdx.y*30) + 7)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 217)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[24] = (compute.local[24] + (pad_temp.shared[((threadIdx.y*30) + 217)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[38] = (compute.local[38] + (pad_temp.shared[((threadIdx.y*30) + 217)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[52] = (compute.local[52] + (pad_temp.shared[((threadIdx.y*30) + 217)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 9)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[18] = (compute.local[18] + (pad_temp.shared[((threadIdx.y*30) + 9)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[32] = (compute.local[32] + (pad_temp.shared[((threadIdx.y*30) + 9)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[46] = (compute.local[46] + (pad_temp.shared[((threadIdx.y*30) + 9)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 219)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[25] = (compute.local[25] + (pad_temp.shared[((threadIdx.y*30) + 219)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[39] = (compute.local[39] + (pad_temp.shared[((threadIdx.y*30) + 219)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[53] = (compute.local[53] + (pad_temp.shared[((threadIdx.y*30) + 219)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 11)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[19] = (compute.local[19] + (pad_temp.shared[((threadIdx.y*30) + 11)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[33] = (compute.local[33] + (pad_temp.shared[((threadIdx.y*30) + 11)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[47] = (compute.local[47] + (pad_temp.shared[((threadIdx.y*30) + 11)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 221)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[26] = (compute.local[26] + (pad_temp.shared[((threadIdx.y*30) + 221)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[40] = (compute.local[40] + (pad_temp.shared[((threadIdx.y*30) + 221)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[54] = (compute.local[54] + (pad_temp.shared[((threadIdx.y*30) + 221)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 13)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[20] = (compute.local[20] + (pad_temp.shared[((threadIdx.y*30) + 13)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[34] = (compute.local[34] + (pad_temp.shared[((threadIdx.y*30) + 13)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[48] = (compute.local[48] + (pad_temp.shared[((threadIdx.y*30) + 13)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 223)]*placeholder.shared[((threadIdx.z*9) + 1)]))
    compute.local[27] = (compute.local[27] + (pad_temp.shared[((threadIdx.y*30) + 223)]*placeholder.shared[((threadIdx.z*9) + 145)]))
    compute.local[41] = (compute.local[41] + (pad_temp.shared[((threadIdx.y*30) + 223)]*placeholder.shared[((threadIdx.z*9) + 289)]))
    compute.local[55] = (compute.local[55] + (pad_temp.shared[((threadIdx.y*30) + 223)]*placeholder.shared[((threadIdx.z*9) + 433)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[28] = (compute.local[28] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[42] = (compute.local[42] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 212)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[21] = (compute.local[21] + (pad_temp.shared[((threadIdx.y*30) + 212)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[35] = (compute.local[35] + (pad_temp.shared[((threadIdx.y*30) + 212)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[49] = (compute.local[49] + (pad_temp.shared[((threadIdx.y*30) + 212)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[29] = (compute.local[29] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[43] = (compute.local[43] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 214)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[22] = (compute.local[22] + (pad_temp.shared[((threadIdx.y*30) + 214)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[36] = (compute.local[36] + (pad_temp.shared[((threadIdx.y*30) + 214)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[50] = (compute.local[50] + (pad_temp.shared[((threadIdx.y*30) + 214)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[16] = (compute.local[16] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[30] = (compute.local[30] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[44] = (compute.local[44] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 216)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[23] = (compute.local[23] + (pad_temp.shared[((threadIdx.y*30) + 216)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[37] = (compute.local[37] + (pad_temp.shared[((threadIdx.y*30) + 216)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[51] = (compute.local[51] + (pad_temp.shared[((threadIdx.y*30) + 216)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[17] = (compute.local[17] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[31] = (compute.local[31] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[45] = (compute.local[45] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 218)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[24] = (compute.local[24] + (pad_temp.shared[((threadIdx.y*30) + 218)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[38] = (compute.local[38] + (pad_temp.shared[((threadIdx.y*30) + 218)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[52] = (compute.local[52] + (pad_temp.shared[((threadIdx.y*30) + 218)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[18] = (compute.local[18] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[32] = (compute.local[32] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[46] = (compute.local[46] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 220)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[25] = (compute.local[25] + (pad_temp.shared[((threadIdx.y*30) + 220)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[39] = (compute.local[39] + (pad_temp.shared[((threadIdx.y*30) + 220)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[53] = (compute.local[53] + (pad_temp.shared[((threadIdx.y*30) + 220)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[19] = (compute.local[19] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[33] = (compute.local[33] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[47] = (compute.local[47] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 222)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[26] = (compute.local[26] + (pad_temp.shared[((threadIdx.y*30) + 222)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[40] = (compute.local[40] + (pad_temp.shared[((threadIdx.y*30) + 222)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[54] = (compute.local[54] + (pad_temp.shared[((threadIdx.y*30) + 222)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 14)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[20] = (compute.local[20] + (pad_temp.shared[((threadIdx.y*30) + 14)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[34] = (compute.local[34] + (pad_temp.shared[((threadIdx.y*30) + 14)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[48] = (compute.local[48] + (pad_temp.shared[((threadIdx.y*30) + 14)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 224)]*placeholder.shared[((threadIdx.z*9) + 2)]))
    compute.local[27] = (compute.local[27] + (pad_temp.shared[((threadIdx.y*30) + 224)]*placeholder.shared[((threadIdx.z*9) + 146)]))
    compute.local[41] = (compute.local[41] + (pad_temp.shared[((threadIdx.y*30) + 224)]*placeholder.shared[((threadIdx.z*9) + 290)]))
    compute.local[55] = (compute.local[55] + (pad_temp.shared[((threadIdx.y*30) + 224)]*placeholder.shared[((threadIdx.z*9) + 434)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 15)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.y*30) + 15)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[28] = (compute.local[28] + (pad_temp.shared[((threadIdx.y*30) + 15)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[42] = (compute.local[42] + (pad_temp.shared[((threadIdx.y*30) + 15)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 225)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[21] = (compute.local[21] + (pad_temp.shared[((threadIdx.y*30) + 225)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[35] = (compute.local[35] + (pad_temp.shared[((threadIdx.y*30) + 225)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[49] = (compute.local[49] + (pad_temp.shared[((threadIdx.y*30) + 225)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[29] = (compute.local[29] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[43] = (compute.local[43] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[22] = (compute.local[22] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[36] = (compute.local[36] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[50] = (compute.local[50] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[16] = (compute.local[16] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[30] = (compute.local[30] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[44] = (compute.local[44] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[23] = (compute.local[23] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[37] = (compute.local[37] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[51] = (compute.local[51] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[17] = (compute.local[17] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[31] = (compute.local[31] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[45] = (compute.local[45] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[24] = (compute.local[24] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[38] = (compute.local[38] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[52] = (compute.local[52] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[18] = (compute.local[18] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[32] = (compute.local[32] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[46] = (compute.local[46] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[25] = (compute.local[25] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[39] = (compute.local[39] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[53] = (compute.local[53] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[19] = (compute.local[19] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[33] = (compute.local[33] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[47] = (compute.local[47] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[26] = (compute.local[26] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[40] = (compute.local[40] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[54] = (compute.local[54] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[20] = (compute.local[20] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[34] = (compute.local[34] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[48] = (compute.local[48] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*9) + 3)]))
    compute.local[27] = (compute.local[27] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*9) + 147)]))
    compute.local[41] = (compute.local[41] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*9) + 291)]))
    compute.local[55] = (compute.local[55] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*9) + 435)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 16)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.y*30) + 16)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[28] = (compute.local[28] + (pad_temp.shared[((threadIdx.y*30) + 16)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[42] = (compute.local[42] + (pad_temp.shared[((threadIdx.y*30) + 16)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 226)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[21] = (compute.local[21] + (pad_temp.shared[((threadIdx.y*30) + 226)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[35] = (compute.local[35] + (pad_temp.shared[((threadIdx.y*30) + 226)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[49] = (compute.local[49] + (pad_temp.shared[((threadIdx.y*30) + 226)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 18)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.y*30) + 18)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[29] = (compute.local[29] + (pad_temp.shared[((threadIdx.y*30) + 18)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[43] = (compute.local[43] + (pad_temp.shared[((threadIdx.y*30) + 18)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 228)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[22] = (compute.local[22] + (pad_temp.shared[((threadIdx.y*30) + 228)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[36] = (compute.local[36] + (pad_temp.shared[((threadIdx.y*30) + 228)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[50] = (compute.local[50] + (pad_temp.shared[((threadIdx.y*30) + 228)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 20)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[16] = (compute.local[16] + (pad_temp.shared[((threadIdx.y*30) + 20)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[30] = (compute.local[30] + (pad_temp.shared[((threadIdx.y*30) + 20)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[44] = (compute.local[44] + (pad_temp.shared[((threadIdx.y*30) + 20)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 230)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[23] = (compute.local[23] + (pad_temp.shared[((threadIdx.y*30) + 230)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[37] = (compute.local[37] + (pad_temp.shared[((threadIdx.y*30) + 230)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[51] = (compute.local[51] + (pad_temp.shared[((threadIdx.y*30) + 230)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 22)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[17] = (compute.local[17] + (pad_temp.shared[((threadIdx.y*30) + 22)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[31] = (compute.local[31] + (pad_temp.shared[((threadIdx.y*30) + 22)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[45] = (compute.local[45] + (pad_temp.shared[((threadIdx.y*30) + 22)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 232)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[24] = (compute.local[24] + (pad_temp.shared[((threadIdx.y*30) + 232)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[38] = (compute.local[38] + (pad_temp.shared[((threadIdx.y*30) + 232)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[52] = (compute.local[52] + (pad_temp.shared[((threadIdx.y*30) + 232)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 24)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[18] = (compute.local[18] + (pad_temp.shared[((threadIdx.y*30) + 24)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[32] = (compute.local[32] + (pad_temp.shared[((threadIdx.y*30) + 24)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[46] = (compute.local[46] + (pad_temp.shared[((threadIdx.y*30) + 24)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 234)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[25] = (compute.local[25] + (pad_temp.shared[((threadIdx.y*30) + 234)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[39] = (compute.local[39] + (pad_temp.shared[((threadIdx.y*30) + 234)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[53] = (compute.local[53] + (pad_temp.shared[((threadIdx.y*30) + 234)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 26)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[19] = (compute.local[19] + (pad_temp.shared[((threadIdx.y*30) + 26)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[33] = (compute.local[33] + (pad_temp.shared[((threadIdx.y*30) + 26)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[47] = (compute.local[47] + (pad_temp.shared[((threadIdx.y*30) + 26)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 236)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[26] = (compute.local[26] + (pad_temp.shared[((threadIdx.y*30) + 236)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[40] = (compute.local[40] + (pad_temp.shared[((threadIdx.y*30) + 236)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[54] = (compute.local[54] + (pad_temp.shared[((threadIdx.y*30) + 236)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 28)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[20] = (compute.local[20] + (pad_temp.shared[((threadIdx.y*30) + 28)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[34] = (compute.local[34] + (pad_temp.shared[((threadIdx.y*30) + 28)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[48] = (compute.local[48] + (pad_temp.shared[((threadIdx.y*30) + 28)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 238)]*placeholder.shared[((threadIdx.z*9) + 4)]))
    compute.local[27] = (compute.local[27] + (pad_temp.shared[((threadIdx.y*30) + 238)]*placeholder.shared[((threadIdx.z*9) + 148)]))
    compute.local[41] = (compute.local[41] + (pad_temp.shared[((threadIdx.y*30) + 238)]*placeholder.shared[((threadIdx.z*9) + 292)]))
    compute.local[55] = (compute.local[55] + (pad_temp.shared[((threadIdx.y*30) + 238)]*placeholder.shared[((threadIdx.z*9) + 436)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[28] = (compute.local[28] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[42] = (compute.local[42] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[21] = (compute.local[21] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[35] = (compute.local[35] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[49] = (compute.local[49] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[29] = (compute.local[29] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[43] = (compute.local[43] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[22] = (compute.local[22] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[36] = (compute.local[36] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[50] = (compute.local[50] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[16] = (compute.local[16] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[30] = (compute.local[30] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[44] = (compute.local[44] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[23] = (compute.local[23] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[37] = (compute.local[37] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[51] = (compute.local[51] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[17] = (compute.local[17] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[31] = (compute.local[31] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[45] = (compute.local[45] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[24] = (compute.local[24] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[38] = (compute.local[38] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[52] = (compute.local[52] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[18] = (compute.local[18] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[32] = (compute.local[32] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[46] = (compute.local[46] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[25] = (compute.local[25] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[39] = (compute.local[39] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[53] = (compute.local[53] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[19] = (compute.local[19] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[33] = (compute.local[33] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[47] = (compute.local[47] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[26] = (compute.local[26] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[40] = (compute.local[40] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[54] = (compute.local[54] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 29)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[20] = (compute.local[20] + (pad_temp.shared[((threadIdx.y*30) + 29)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[34] = (compute.local[34] + (pad_temp.shared[((threadIdx.y*30) + 29)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[48] = (compute.local[48] + (pad_temp.shared[((threadIdx.y*30) + 29)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 239)]*placeholder.shared[((threadIdx.z*9) + 5)]))
    compute.local[27] = (compute.local[27] + (pad_temp.shared[((threadIdx.y*30) + 239)]*placeholder.shared[((threadIdx.z*9) + 149)]))
    compute.local[41] = (compute.local[41] + (pad_temp.shared[((threadIdx.y*30) + 239)]*placeholder.shared[((threadIdx.z*9) + 293)]))
    compute.local[55] = (compute.local[55] + (pad_temp.shared[((threadIdx.y*30) + 239)]*placeholder.shared[((threadIdx.z*9) + 437)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 30)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.y*30) + 30)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[28] = (compute.local[28] + (pad_temp.shared[((threadIdx.y*30) + 30)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[42] = (compute.local[42] + (pad_temp.shared[((threadIdx.y*30) + 30)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 240)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[21] = (compute.local[21] + (pad_temp.shared[((threadIdx.y*30) + 240)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[35] = (compute.local[35] + (pad_temp.shared[((threadIdx.y*30) + 240)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[49] = (compute.local[49] + (pad_temp.shared[((threadIdx.y*30) + 240)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[29] = (compute.local[29] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[43] = (compute.local[43] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[22] = (compute.local[22] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[36] = (compute.local[36] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[50] = (compute.local[50] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[16] = (compute.local[16] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[30] = (compute.local[30] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[44] = (compute.local[44] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[23] = (compute.local[23] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[37] = (compute.local[37] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[51] = (compute.local[51] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[17] = (compute.local[17] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[31] = (compute.local[31] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[45] = (compute.local[45] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[24] = (compute.local[24] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[38] = (compute.local[38] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[52] = (compute.local[52] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[18] = (compute.local[18] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[32] = (compute.local[32] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[46] = (compute.local[46] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[25] = (compute.local[25] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[39] = (compute.local[39] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[53] = (compute.local[53] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[19] = (compute.local[19] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[33] = (compute.local[33] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[47] = (compute.local[47] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[26] = (compute.local[26] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[40] = (compute.local[40] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[54] = (compute.local[54] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[20] = (compute.local[20] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[34] = (compute.local[34] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[48] = (compute.local[48] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*9) + 6)]))
    compute.local[27] = (compute.local[27] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*9) + 150)]))
    compute.local[41] = (compute.local[41] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*9) + 294)]))
    compute.local[55] = (compute.local[55] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*9) + 438)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 31)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.y*30) + 31)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[28] = (compute.local[28] + (pad_temp.shared[((threadIdx.y*30) + 31)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[42] = (compute.local[42] + (pad_temp.shared[((threadIdx.y*30) + 31)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 241)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[21] = (compute.local[21] + (pad_temp.shared[((threadIdx.y*30) + 241)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[35] = (compute.local[35] + (pad_temp.shared[((threadIdx.y*30) + 241)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[49] = (compute.local[49] + (pad_temp.shared[((threadIdx.y*30) + 241)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 33)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.y*30) + 33)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[29] = (compute.local[29] + (pad_temp.shared[((threadIdx.y*30) + 33)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[43] = (compute.local[43] + (pad_temp.shared[((threadIdx.y*30) + 33)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 243)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[22] = (compute.local[22] + (pad_temp.shared[((threadIdx.y*30) + 243)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[36] = (compute.local[36] + (pad_temp.shared[((threadIdx.y*30) + 243)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[50] = (compute.local[50] + (pad_temp.shared[((threadIdx.y*30) + 243)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 35)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[16] = (compute.local[16] + (pad_temp.shared[((threadIdx.y*30) + 35)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[30] = (compute.local[30] + (pad_temp.shared[((threadIdx.y*30) + 35)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[44] = (compute.local[44] + (pad_temp.shared[((threadIdx.y*30) + 35)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 245)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[23] = (compute.local[23] + (pad_temp.shared[((threadIdx.y*30) + 245)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[37] = (compute.local[37] + (pad_temp.shared[((threadIdx.y*30) + 245)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[51] = (compute.local[51] + (pad_temp.shared[((threadIdx.y*30) + 245)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 37)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[17] = (compute.local[17] + (pad_temp.shared[((threadIdx.y*30) + 37)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[31] = (compute.local[31] + (pad_temp.shared[((threadIdx.y*30) + 37)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[45] = (compute.local[45] + (pad_temp.shared[((threadIdx.y*30) + 37)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 247)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[24] = (compute.local[24] + (pad_temp.shared[((threadIdx.y*30) + 247)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[38] = (compute.local[38] + (pad_temp.shared[((threadIdx.y*30) + 247)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[52] = (compute.local[52] + (pad_temp.shared[((threadIdx.y*30) + 247)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 39)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[18] = (compute.local[18] + (pad_temp.shared[((threadIdx.y*30) + 39)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[32] = (compute.local[32] + (pad_temp.shared[((threadIdx.y*30) + 39)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[46] = (compute.local[46] + (pad_temp.shared[((threadIdx.y*30) + 39)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 249)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[25] = (compute.local[25] + (pad_temp.shared[((threadIdx.y*30) + 249)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[39] = (compute.local[39] + (pad_temp.shared[((threadIdx.y*30) + 249)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[53] = (compute.local[53] + (pad_temp.shared[((threadIdx.y*30) + 249)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 41)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[19] = (compute.local[19] + (pad_temp.shared[((threadIdx.y*30) + 41)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[33] = (compute.local[33] + (pad_temp.shared[((threadIdx.y*30) + 41)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[47] = (compute.local[47] + (pad_temp.shared[((threadIdx.y*30) + 41)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 251)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[26] = (compute.local[26] + (pad_temp.shared[((threadIdx.y*30) + 251)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[40] = (compute.local[40] + (pad_temp.shared[((threadIdx.y*30) + 251)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[54] = (compute.local[54] + (pad_temp.shared[((threadIdx.y*30) + 251)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 43)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[20] = (compute.local[20] + (pad_temp.shared[((threadIdx.y*30) + 43)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[34] = (compute.local[34] + (pad_temp.shared[((threadIdx.y*30) + 43)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[48] = (compute.local[48] + (pad_temp.shared[((threadIdx.y*30) + 43)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 253)]*placeholder.shared[((threadIdx.z*9) + 7)]))
    compute.local[27] = (compute.local[27] + (pad_temp.shared[((threadIdx.y*30) + 253)]*placeholder.shared[((threadIdx.z*9) + 151)]))
    compute.local[41] = (compute.local[41] + (pad_temp.shared[((threadIdx.y*30) + 253)]*placeholder.shared[((threadIdx.z*9) + 295)]))
    compute.local[55] = (compute.local[55] + (pad_temp.shared[((threadIdx.y*30) + 253)]*placeholder.shared[((threadIdx.z*9) + 439)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[14] = (compute.local[14] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[28] = (compute.local[28] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[42] = (compute.local[42] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[21] = (compute.local[21] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[35] = (compute.local[35] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[49] = (compute.local[49] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[15] = (compute.local[15] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[29] = (compute.local[29] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[43] = (compute.local[43] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[22] = (compute.local[22] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[36] = (compute.local[36] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[50] = (compute.local[50] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[16] = (compute.local[16] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[30] = (compute.local[30] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[44] = (compute.local[44] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[23] = (compute.local[23] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[37] = (compute.local[37] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[51] = (compute.local[51] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[17] = (compute.local[17] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[31] = (compute.local[31] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[45] = (compute.local[45] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[24] = (compute.local[24] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[38] = (compute.local[38] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[52] = (compute.local[52] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[18] = (compute.local[18] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[32] = (compute.local[32] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[46] = (compute.local[46] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[25] = (compute.local[25] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[39] = (compute.local[39] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[53] = (compute.local[53] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[19] = (compute.local[19] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[33] = (compute.local[33] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[47] = (compute.local[47] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[26] = (compute.local[26] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[40] = (compute.local[40] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[54] = (compute.local[54] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 44)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[20] = (compute.local[20] + (pad_temp.shared[((threadIdx.y*30) + 44)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[34] = (compute.local[34] + (pad_temp.shared[((threadIdx.y*30) + 44)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[48] = (compute.local[48] + (pad_temp.shared[((threadIdx.y*30) + 44)]*placeholder.shared[((threadIdx.z*9) + 440)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 254)]*placeholder.shared[((threadIdx.z*9) + 8)]))
    compute.local[27] = (compute.local[27] + (pad_temp.shared[((threadIdx.y*30) + 254)]*placeholder.shared[((threadIdx.z*9) + 152)]))
    compute.local[41] = (compute.local[41] + (pad_temp.shared[((threadIdx.y*30) + 254)]*placeholder.shared[((threadIdx.z*9) + 296)]))
    compute.local[55] = (compute.local[55] + (pad_temp.shared[((threadIdx.y*30) + 254)]*placeholder.shared[((threadIdx.z*9) + 440)]))
  }
  compute[((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7))] = compute.local[0]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3136)] = compute.local[14]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6272)] = compute.local[28]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9408)] = compute.local[42]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 98)] = compute.local[7]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3234)] = compute.local[21]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6370)] = compute.local[35]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9506)] = compute.local[49]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 1)] = compute.local[1]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3137)] = compute.local[15]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6273)] = compute.local[29]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9409)] = compute.local[43]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 99)] = compute.local[8]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3235)] = compute.local[22]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6371)] = compute.local[36]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9507)] = compute.local[50]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 2)] = compute.local[2]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3138)] = compute.local[16]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6274)] = compute.local[30]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9410)] = compute.local[44]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 100)] = compute.local[9]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3236)] = compute.local[23]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6372)] = compute.local[37]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9508)] = compute.local[51]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3)] = compute.local[3]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3139)] = compute.local[17]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6275)] = compute.local[31]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9411)] = compute.local[45]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 101)] = compute.local[10]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3237)] = compute.local[24]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6373)] = compute.local[38]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9509)] = compute.local[52]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 4)] = compute.local[4]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3140)] = compute.local[18]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6276)] = compute.local[32]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9412)] = compute.local[46]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 102)] = compute.local[11]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3238)] = compute.local[25]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6374)] = compute.local[39]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9510)] = compute.local[53]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 5)] = compute.local[5]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3141)] = compute.local[19]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6277)] = compute.local[33]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9413)] = compute.local[47]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 103)] = compute.local[12]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3239)] = compute.local[26]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6375)] = compute.local[40]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9511)] = compute.local[54]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6)] = compute.local[6]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3142)] = compute.local[20]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6278)] = compute.local[34]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9414)] = compute.local[48]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 104)] = compute.local[13]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 3240)] = compute.local[27]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 6376)] = compute.local[41]
  compute[(((((blockIdx.z*12544) + (threadIdx.z*196)) + (threadIdx.y*14)) + (blockIdx.x*7)) + 9512)] = compute.local[55]
}
, GlobalVar(tvmgen_default_fused_add_17): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_17", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 512
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_add_11): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_11", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[0])
}
, GlobalVar(tvmgen_default_fused_add_4): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_4", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 64
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_add_31): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_31", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1000
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_sqrt_4): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_4", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 512
  T_sqrt[threadIdx.x] = tir.sqrt(placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_add): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 3
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[0])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_15): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_15", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 8
  allocate compute.local[float32 * 2], storage_scope = local
  allocate pad_temp.shared[float32 * 448], storage_scope = shared
  allocate placeholder.shared[float32 * 512], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 7
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
  compute.local[0] = 0f
  compute.local[1] = 0f
  for (rc.outer, 0, 64) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
    pad_temp.shared[(((threadIdx.z*28) + (threadIdx.y*14)) + threadIdx.x)] = placeholder[(((((rc.outer*3136) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + threadIdx.x)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
    unrolled (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 2) {
      if (((((threadIdx.z*2) + floordiv(((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)) + threadIdx.y) < 32)) {
        if ((((((threadIdx.z*32) + (threadIdx.y*16)) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 512)) {
          if (((((threadIdx.y*16) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 32)) {
            if ((((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 16)) {
              placeholder.shared[((((threadIdx.z*32) + (threadIdx.y*16)) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((((blockIdx.z*32768) + (threadIdx.z*2048)) + (threadIdx.y*1024)) + (rc.outer*16)) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)]
            }
          }
        }
      }
    }
    unrolled (rc.inner, 0, 16) {
      compute.local[0] = (compute.local[0] + (pad_temp.shared[(((rc.inner*28) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[1] = (compute.local[1] + (pad_temp.shared[(((rc.inner*28) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
    }
  }
  compute[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + threadIdx.x)] = compute.local[0]
  compute[((((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + threadIdx.x) + 3136)] = compute.local[1]
}
, GlobalVar(tvmgen_default_fused_multiply_6): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_6", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 4) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 802816)) {
      T_multiply[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)]*placeholder[floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 3136)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_divide_2): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_2", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 256
  T_divide[threadIdx.x] = (placeholder[0]/placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_7): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_7", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 4
  allocate compute.local[float32 * 16], storage_scope = local
  allocate pad_temp.shared[float32 * 896], storage_scope = shared
  allocate placeholder.shared[float32 * 1024], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 7
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
  for (yy.c.init, 0, 4) {
    compute.local[yy.c.init] = 0f
    compute.local[(yy.c.init + 4)] = 0f
    compute.local[(yy.c.init + 8)] = 0f
    compute.local[(yy.c.init + 12)] = 0f
  }
  for (rc.outer, 0, 16) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    pad_temp.shared[((threadIdx.z*28) + threadIdx.x)] = placeholder[(((((rc.outer*6272) + (floordiv(threadIdx.z, 4)*784)) + (blockIdx.y*112)) + (floormod(threadIdx.z, 4)*28)) + threadIdx.x)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 2) {
      if ((((threadIdx.z*4) + floordiv(((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8)) < 128)) {
        if (((((threadIdx.z*32) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 1024)) {
          if ((((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 32)) {
            placeholder.shared[(((threadIdx.z*32) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((blockIdx.z*16384) + (threadIdx.z*512)) + (floordiv(((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8)*128)) + (rc.outer*8)) + floormod(((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8))]
          }
        }
      }
    }
    for (rc.inner, 0, 8) {
      for (yy.c, 0, 4) {
        compute.local[yy.c] = (compute.local[yy.c] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute.local[(yy.c + 4)] = (compute.local[(yy.c + 4)] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute.local[(yy.c + 8)] = (compute.local[(yy.c + 8)] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 512)]))
        compute.local[(yy.c + 12)] = (compute.local[(yy.c + 12)] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 768)]))
      }
    }
  }
  for (yy.inner.inner.inner, 0, 4) {
    compute[(((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*112)) + (yy.inner.inner.inner*28)) + threadIdx.x)] = compute.local[yy.inner.inner.inner]
    compute[((((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*112)) + (yy.inner.inner.inner*28)) + threadIdx.x) + 25088)] = compute.local[(yy.inner.inner.inner + 4)]
    compute[((((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*112)) + (yy.inner.inner.inner*28)) + threadIdx.x) + 50176)] = compute.local[(yy.inner.inner.inner + 8)]
    compute[((((((blockIdx.z*100352) + (threadIdx.z*784)) + (blockIdx.y*112)) + (yy.inner.inner.inner*28)) + threadIdx.x) + 75264)] = compute.local[(yy.inner.inner.inner + 12)]
  }
}
, GlobalVar(tvmgen_default_fused_add_5): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_5", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 4) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 802816)) {
      T_add[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + placeholder[floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 12544)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_divide_3): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_3", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  T_divide[threadIdx.x] = (placeholder[0]/placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_relu_11): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_11", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_relu[((blockIdx.x*1024) + threadIdx.x)] = max(placeholder[((blockIdx.x*1024) + threadIdx.x)], 0f)
}
, GlobalVar(tvmgen_default_fused_multiply_10): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_10", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 512
  T_multiply[threadIdx.x] = (placeholder[threadIdx.x]*placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_divide_4): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_4", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 512
  T_divide[threadIdx.x] = (placeholder[0]/placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_sqrt_5): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_5", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_sqrt[threadIdx.x] = tir.sqrt(placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_18): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_18", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 8
  allocate compute.local[float32 * 14], storage_scope = local
  allocate pad_temp.shared[float32 * 450], storage_scope = shared
  allocate placeholder.shared[float32 * 1152], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 1
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1
  compute.local[0] = 0f
  compute.local[1] = 0f
  compute.local[2] = 0f
  compute.local[3] = 0f
  compute.local[4] = 0f
  compute.local[5] = 0f
  compute.local[6] = 0f
  compute.local[7] = 0f
  compute.local[8] = 0f
  compute.local[9] = 0f
  compute.local[10] = 0f
  compute.local[11] = 0f
  compute.local[12] = 0f
  compute.local[13] = 0f
  for (rc.outer, 0, 256) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1
    if (((floordiv(threadIdx.y, 5) + threadIdx.z) < 30)) {
      if ((((threadIdx.z*15) + (threadIdx.y*3)) < 450)) {
        if ((threadIdx.y < 5)) {
          pad_temp.shared[((threadIdx.z*15) + (threadIdx.y*3))] = tir.if_then_else(((1 <= floormod(threadIdx.z, 15)) && (1 <= threadIdx.y)), placeholder[((((((floordiv(threadIdx.z, 30)*100352) + (rc.outer*392)) + (floordiv(floormod(threadIdx.z, 30), 15)*196)) + (floormod(threadIdx.z, 15)*14)) + (threadIdx.y*3)) - 15)], 0f)
        }
      }
    }
    if (((floordiv(((threadIdx.y*3) + 1), 15) + threadIdx.z) < 30)) {
      if ((((threadIdx.z*15) + (threadIdx.y*3)) < 449)) {
        if ((threadIdx.y < 5)) {
          pad_temp.shared[(((threadIdx.z*15) + (threadIdx.y*3)) + 1)] = tir.if_then_else((1 <= floormod(threadIdx.z, 15)), placeholder[((((((floordiv(threadIdx.z, 30)*100352) + (rc.outer*392)) + (floordiv(floormod(threadIdx.z, 30), 15)*196)) + (floormod(threadIdx.z, 15)*14)) + (threadIdx.y*3)) - 14)], 0f)
        }
      }
    }
    if (((floordiv(((threadIdx.y*3) + 2), 15) + threadIdx.z) < 30)) {
      if ((((threadIdx.z*15) + (threadIdx.y*3)) < 448)) {
        if ((threadIdx.y < 5)) {
          pad_temp.shared[(((threadIdx.z*15) + (threadIdx.y*3)) + 2)] = tir.if_then_else((1 <= floormod(threadIdx.z, 15)), placeholder[((((((floordiv(threadIdx.z, 30)*100352) + (rc.outer*392)) + (floordiv(floormod(threadIdx.z, 30), 15)*196)) + (floormod(threadIdx.z, 15)*14)) + (threadIdx.y*3)) - 13)], 0f)
        }
      }
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1
    if ((((threadIdx.z*2) + floordiv(threadIdx.y, 3)) < 64)) {
      if ((((threadIdx.z*4) + floordiv((threadIdx.y*2), 3)) < 128)) {
        if ((((threadIdx.z*12) + (threadIdx.y*2)) < 384)) {
          if ((((threadIdx.z*36) + (threadIdx.y*6)) < 1152)) {
            if ((threadIdx.y < 6)) {
              placeholder.shared[((threadIdx.z*36) + (threadIdx.y*6))] = placeholder[(((((blockIdx.z*294912) + (threadIdx.z*9216)) + (floordiv(threadIdx.y, 3)*4608)) + (rc.outer*18)) + (floormod(threadIdx.y, 3)*6))]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*2) + floordiv(threadIdx.y, 3)) < 64)) {
      if ((((threadIdx.z*4) + floordiv((threadIdx.y*2), 3)) < 128)) {
        if ((((threadIdx.z*12) + (threadIdx.y*2)) < 384)) {
          if ((((threadIdx.z*36) + (threadIdx.y*6)) < 1151)) {
            if ((threadIdx.y < 6)) {
              placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 1)] = placeholder[((((((blockIdx.z*294912) + (threadIdx.z*9216)) + (floordiv(threadIdx.y, 3)*4608)) + (rc.outer*18)) + (floormod(threadIdx.y, 3)*6)) + 1)]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*2) + floordiv(threadIdx.y, 3)) < 64)) {
      if ((((threadIdx.z*4) + floordiv((threadIdx.y*2), 3)) < 128)) {
        if ((((threadIdx.z*12) + (threadIdx.y*2)) < 384)) {
          if ((((threadIdx.z*36) + (threadIdx.y*6)) < 1150)) {
            if ((threadIdx.y < 6)) {
              placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 2)] = placeholder[((((((blockIdx.z*294912) + (threadIdx.z*9216)) + (floordiv(threadIdx.y, 3)*4608)) + (rc.outer*18)) + (floormod(threadIdx.y, 3)*6)) + 2)]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*2) + floordiv(((threadIdx.y*2) + 1), 6)) < 64)) {
      if ((((threadIdx.z*4) + floordiv(((threadIdx.y*2) + 1), 3)) < 128)) {
        if ((((threadIdx.z*12) + (threadIdx.y*2)) < 383)) {
          if ((((threadIdx.z*36) + (threadIdx.y*6)) < 1149)) {
            if ((threadIdx.y < 6)) {
              placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 3)] = placeholder[(((((blockIdx.z*294912) + (threadIdx.z*9216)) + (floordiv(((threadIdx.y*2) + 1), 6)*4608)) + (rc.outer*18)) + (floormod(((threadIdx.y*2) + 1), 6)*3))]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*2) + floordiv(((threadIdx.y*2) + 1), 6)) < 64)) {
      if ((((threadIdx.z*4) + floordiv(((threadIdx.y*2) + 1), 3)) < 128)) {
        if ((((threadIdx.z*12) + (threadIdx.y*2)) < 383)) {
          if ((((threadIdx.z*36) + (threadIdx.y*6)) < 1148)) {
            if ((threadIdx.y < 6)) {
              placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 4)] = placeholder[((((((blockIdx.z*294912) + (threadIdx.z*9216)) + (floordiv(((threadIdx.y*2) + 1), 6)*4608)) + (rc.outer*18)) + (floormod(((threadIdx.y*2) + 1), 6)*3)) + 1)]
            }
          }
        }
      }
    }
    if ((((threadIdx.z*2) + floordiv(((threadIdx.y*2) + 1), 6)) < 64)) {
      if ((((threadIdx.z*4) + floordiv(((threadIdx.y*2) + 1), 3)) < 128)) {
        if ((((threadIdx.z*12) + (threadIdx.y*2)) < 383)) {
          if ((((threadIdx.z*36) + (threadIdx.y*6)) < 1147)) {
            if ((threadIdx.y < 6)) {
              placeholder.shared[(((threadIdx.z*36) + (threadIdx.y*6)) + 5)] = placeholder[((((((blockIdx.z*294912) + (threadIdx.z*9216)) + (floordiv(((threadIdx.y*2) + 1), 6)*4608)) + (rc.outer*18)) + (floormod(((threadIdx.y*2) + 1), 6)*3)) + 2)]
            }
          }
        }
      }
    }
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.y*30)]*placeholder.shared[(threadIdx.z*36)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[(threadIdx.z*36)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[(threadIdx.z*36)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[(threadIdx.z*36)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[(threadIdx.z*36)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[(threadIdx.z*36)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[(threadIdx.z*36)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[(threadIdx.y*30)]*placeholder.shared[((threadIdx.z*36) + 18)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*36) + 18)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*36) + 18)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*36) + 18)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*36) + 18)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*36) + 18)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*36) + 18)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 1)]*placeholder.shared[((threadIdx.z*36) + 1)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 3)]*placeholder.shared[((threadIdx.z*36) + 1)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 5)]*placeholder.shared[((threadIdx.z*36) + 1)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 7)]*placeholder.shared[((threadIdx.z*36) + 1)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 9)]*placeholder.shared[((threadIdx.z*36) + 1)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 11)]*placeholder.shared[((threadIdx.z*36) + 1)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 13)]*placeholder.shared[((threadIdx.z*36) + 1)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 1)]*placeholder.shared[((threadIdx.z*36) + 19)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 3)]*placeholder.shared[((threadIdx.z*36) + 19)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 5)]*placeholder.shared[((threadIdx.z*36) + 19)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 7)]*placeholder.shared[((threadIdx.z*36) + 19)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 9)]*placeholder.shared[((threadIdx.z*36) + 19)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 11)]*placeholder.shared[((threadIdx.z*36) + 19)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 13)]*placeholder.shared[((threadIdx.z*36) + 19)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*36) + 2)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*36) + 2)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*36) + 2)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*36) + 2)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*36) + 2)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*36) + 2)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 14)]*placeholder.shared[((threadIdx.z*36) + 2)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 2)]*placeholder.shared[((threadIdx.z*36) + 20)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 4)]*placeholder.shared[((threadIdx.z*36) + 20)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 6)]*placeholder.shared[((threadIdx.z*36) + 20)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 8)]*placeholder.shared[((threadIdx.z*36) + 20)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 10)]*placeholder.shared[((threadIdx.z*36) + 20)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 12)]*placeholder.shared[((threadIdx.z*36) + 20)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 14)]*placeholder.shared[((threadIdx.z*36) + 20)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 15)]*placeholder.shared[((threadIdx.z*36) + 3)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*36) + 3)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*36) + 3)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*36) + 3)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*36) + 3)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*36) + 3)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*36) + 3)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 15)]*placeholder.shared[((threadIdx.z*36) + 21)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*36) + 21)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*36) + 21)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*36) + 21)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*36) + 21)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*36) + 21)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*36) + 21)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 16)]*placeholder.shared[((threadIdx.z*36) + 4)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 18)]*placeholder.shared[((threadIdx.z*36) + 4)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 20)]*placeholder.shared[((threadIdx.z*36) + 4)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 22)]*placeholder.shared[((threadIdx.z*36) + 4)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 24)]*placeholder.shared[((threadIdx.z*36) + 4)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 26)]*placeholder.shared[((threadIdx.z*36) + 4)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 28)]*placeholder.shared[((threadIdx.z*36) + 4)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 16)]*placeholder.shared[((threadIdx.z*36) + 22)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 18)]*placeholder.shared[((threadIdx.z*36) + 22)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 20)]*placeholder.shared[((threadIdx.z*36) + 22)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 22)]*placeholder.shared[((threadIdx.z*36) + 22)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 24)]*placeholder.shared[((threadIdx.z*36) + 22)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 26)]*placeholder.shared[((threadIdx.z*36) + 22)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 28)]*placeholder.shared[((threadIdx.z*36) + 22)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*36) + 5)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*36) + 5)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*36) + 5)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*36) + 5)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*36) + 5)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*36) + 5)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 29)]*placeholder.shared[((threadIdx.z*36) + 5)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 17)]*placeholder.shared[((threadIdx.z*36) + 23)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 19)]*placeholder.shared[((threadIdx.z*36) + 23)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 21)]*placeholder.shared[((threadIdx.z*36) + 23)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 23)]*placeholder.shared[((threadIdx.z*36) + 23)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 25)]*placeholder.shared[((threadIdx.z*36) + 23)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 27)]*placeholder.shared[((threadIdx.z*36) + 23)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 29)]*placeholder.shared[((threadIdx.z*36) + 23)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 30)]*placeholder.shared[((threadIdx.z*36) + 6)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*36) + 6)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*36) + 6)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*36) + 6)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*36) + 6)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*36) + 6)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*36) + 6)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 30)]*placeholder.shared[((threadIdx.z*36) + 24)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*36) + 24)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*36) + 24)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*36) + 24)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*36) + 24)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*36) + 24)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*36) + 24)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 31)]*placeholder.shared[((threadIdx.z*36) + 7)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 33)]*placeholder.shared[((threadIdx.z*36) + 7)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 35)]*placeholder.shared[((threadIdx.z*36) + 7)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 37)]*placeholder.shared[((threadIdx.z*36) + 7)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 39)]*placeholder.shared[((threadIdx.z*36) + 7)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 41)]*placeholder.shared[((threadIdx.z*36) + 7)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 43)]*placeholder.shared[((threadIdx.z*36) + 7)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 31)]*placeholder.shared[((threadIdx.z*36) + 25)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 33)]*placeholder.shared[((threadIdx.z*36) + 25)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 35)]*placeholder.shared[((threadIdx.z*36) + 25)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 37)]*placeholder.shared[((threadIdx.z*36) + 25)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 39)]*placeholder.shared[((threadIdx.z*36) + 25)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 41)]*placeholder.shared[((threadIdx.z*36) + 25)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 43)]*placeholder.shared[((threadIdx.z*36) + 25)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*36) + 8)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*36) + 8)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*36) + 8)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*36) + 8)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*36) + 8)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*36) + 8)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 44)]*placeholder.shared[((threadIdx.z*36) + 8)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 32)]*placeholder.shared[((threadIdx.z*36) + 26)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 34)]*placeholder.shared[((threadIdx.z*36) + 26)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 36)]*placeholder.shared[((threadIdx.z*36) + 26)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 38)]*placeholder.shared[((threadIdx.z*36) + 26)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 40)]*placeholder.shared[((threadIdx.z*36) + 26)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 42)]*placeholder.shared[((threadIdx.z*36) + 26)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 44)]*placeholder.shared[((threadIdx.z*36) + 26)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 225)]*placeholder.shared[((threadIdx.z*36) + 9)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*36) + 9)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*36) + 9)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*36) + 9)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*36) + 9)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*36) + 9)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*36) + 9)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 225)]*placeholder.shared[((threadIdx.z*36) + 27)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*36) + 27)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*36) + 27)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*36) + 27)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*36) + 27)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*36) + 27)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*36) + 27)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 226)]*placeholder.shared[((threadIdx.z*36) + 10)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 228)]*placeholder.shared[((threadIdx.z*36) + 10)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 230)]*placeholder.shared[((threadIdx.z*36) + 10)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 232)]*placeholder.shared[((threadIdx.z*36) + 10)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 234)]*placeholder.shared[((threadIdx.z*36) + 10)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 236)]*placeholder.shared[((threadIdx.z*36) + 10)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 238)]*placeholder.shared[((threadIdx.z*36) + 10)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 226)]*placeholder.shared[((threadIdx.z*36) + 28)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 228)]*placeholder.shared[((threadIdx.z*36) + 28)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 230)]*placeholder.shared[((threadIdx.z*36) + 28)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 232)]*placeholder.shared[((threadIdx.z*36) + 28)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 234)]*placeholder.shared[((threadIdx.z*36) + 28)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 236)]*placeholder.shared[((threadIdx.z*36) + 28)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 238)]*placeholder.shared[((threadIdx.z*36) + 28)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*36) + 11)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*36) + 11)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*36) + 11)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*36) + 11)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*36) + 11)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*36) + 11)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 239)]*placeholder.shared[((threadIdx.z*36) + 11)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 227)]*placeholder.shared[((threadIdx.z*36) + 29)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 229)]*placeholder.shared[((threadIdx.z*36) + 29)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 231)]*placeholder.shared[((threadIdx.z*36) + 29)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 233)]*placeholder.shared[((threadIdx.z*36) + 29)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 235)]*placeholder.shared[((threadIdx.z*36) + 29)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 237)]*placeholder.shared[((threadIdx.z*36) + 29)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 239)]*placeholder.shared[((threadIdx.z*36) + 29)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 240)]*placeholder.shared[((threadIdx.z*36) + 12)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*36) + 12)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*36) + 12)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*36) + 12)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*36) + 12)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*36) + 12)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*36) + 12)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 240)]*placeholder.shared[((threadIdx.z*36) + 30)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*36) + 30)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*36) + 30)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*36) + 30)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*36) + 30)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*36) + 30)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*36) + 30)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 241)]*placeholder.shared[((threadIdx.z*36) + 13)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 243)]*placeholder.shared[((threadIdx.z*36) + 13)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 245)]*placeholder.shared[((threadIdx.z*36) + 13)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 247)]*placeholder.shared[((threadIdx.z*36) + 13)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 249)]*placeholder.shared[((threadIdx.z*36) + 13)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 251)]*placeholder.shared[((threadIdx.z*36) + 13)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 253)]*placeholder.shared[((threadIdx.z*36) + 13)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 241)]*placeholder.shared[((threadIdx.z*36) + 31)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 243)]*placeholder.shared[((threadIdx.z*36) + 31)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 245)]*placeholder.shared[((threadIdx.z*36) + 31)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 247)]*placeholder.shared[((threadIdx.z*36) + 31)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 249)]*placeholder.shared[((threadIdx.z*36) + 31)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 251)]*placeholder.shared[((threadIdx.z*36) + 31)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 253)]*placeholder.shared[((threadIdx.z*36) + 31)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*36) + 14)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*36) + 14)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*36) + 14)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*36) + 14)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*36) + 14)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*36) + 14)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 254)]*placeholder.shared[((threadIdx.z*36) + 14)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 242)]*placeholder.shared[((threadIdx.z*36) + 32)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 244)]*placeholder.shared[((threadIdx.z*36) + 32)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 246)]*placeholder.shared[((threadIdx.z*36) + 32)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 248)]*placeholder.shared[((threadIdx.z*36) + 32)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 250)]*placeholder.shared[((threadIdx.z*36) + 32)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 252)]*placeholder.shared[((threadIdx.z*36) + 32)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 254)]*placeholder.shared[((threadIdx.z*36) + 32)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 255)]*placeholder.shared[((threadIdx.z*36) + 15)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 257)]*placeholder.shared[((threadIdx.z*36) + 15)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 259)]*placeholder.shared[((threadIdx.z*36) + 15)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 261)]*placeholder.shared[((threadIdx.z*36) + 15)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 263)]*placeholder.shared[((threadIdx.z*36) + 15)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 265)]*placeholder.shared[((threadIdx.z*36) + 15)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 267)]*placeholder.shared[((threadIdx.z*36) + 15)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 255)]*placeholder.shared[((threadIdx.z*36) + 33)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 257)]*placeholder.shared[((threadIdx.z*36) + 33)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 259)]*placeholder.shared[((threadIdx.z*36) + 33)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 261)]*placeholder.shared[((threadIdx.z*36) + 33)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 263)]*placeholder.shared[((threadIdx.z*36) + 33)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 265)]*placeholder.shared[((threadIdx.z*36) + 33)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 267)]*placeholder.shared[((threadIdx.z*36) + 33)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 256)]*placeholder.shared[((threadIdx.z*36) + 16)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 258)]*placeholder.shared[((threadIdx.z*36) + 16)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 260)]*placeholder.shared[((threadIdx.z*36) + 16)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 262)]*placeholder.shared[((threadIdx.z*36) + 16)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 264)]*placeholder.shared[((threadIdx.z*36) + 16)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 266)]*placeholder.shared[((threadIdx.z*36) + 16)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 268)]*placeholder.shared[((threadIdx.z*36) + 16)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 256)]*placeholder.shared[((threadIdx.z*36) + 34)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 258)]*placeholder.shared[((threadIdx.z*36) + 34)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 260)]*placeholder.shared[((threadIdx.z*36) + 34)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 262)]*placeholder.shared[((threadIdx.z*36) + 34)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 264)]*placeholder.shared[((threadIdx.z*36) + 34)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 266)]*placeholder.shared[((threadIdx.z*36) + 34)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 268)]*placeholder.shared[((threadIdx.z*36) + 34)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.y*30) + 257)]*placeholder.shared[((threadIdx.z*36) + 17)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.y*30) + 259)]*placeholder.shared[((threadIdx.z*36) + 17)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.y*30) + 261)]*placeholder.shared[((threadIdx.z*36) + 17)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.y*30) + 263)]*placeholder.shared[((threadIdx.z*36) + 17)]))
    compute.local[4] = (compute.local[4] + (pad_temp.shared[((threadIdx.y*30) + 265)]*placeholder.shared[((threadIdx.z*36) + 17)]))
    compute.local[5] = (compute.local[5] + (pad_temp.shared[((threadIdx.y*30) + 267)]*placeholder.shared[((threadIdx.z*36) + 17)]))
    compute.local[6] = (compute.local[6] + (pad_temp.shared[((threadIdx.y*30) + 269)]*placeholder.shared[((threadIdx.z*36) + 17)]))
    compute.local[7] = (compute.local[7] + (pad_temp.shared[((threadIdx.y*30) + 257)]*placeholder.shared[((threadIdx.z*36) + 35)]))
    compute.local[8] = (compute.local[8] + (pad_temp.shared[((threadIdx.y*30) + 259)]*placeholder.shared[((threadIdx.z*36) + 35)]))
    compute.local[9] = (compute.local[9] + (pad_temp.shared[((threadIdx.y*30) + 261)]*placeholder.shared[((threadIdx.z*36) + 35)]))
    compute.local[10] = (compute.local[10] + (pad_temp.shared[((threadIdx.y*30) + 263)]*placeholder.shared[((threadIdx.z*36) + 35)]))
    compute.local[11] = (compute.local[11] + (pad_temp.shared[((threadIdx.y*30) + 265)]*placeholder.shared[((threadIdx.z*36) + 35)]))
    compute.local[12] = (compute.local[12] + (pad_temp.shared[((threadIdx.y*30) + 267)]*placeholder.shared[((threadIdx.z*36) + 35)]))
    compute.local[13] = (compute.local[13] + (pad_temp.shared[((threadIdx.y*30) + 269)]*placeholder.shared[((threadIdx.z*36) + 35)]))
  }
  compute[(((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7))] = compute.local[0]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 1)] = compute.local[1]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 2)] = compute.local[2]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 3)] = compute.local[3]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 4)] = compute.local[4]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 5)] = compute.local[5]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 6)] = compute.local[6]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 49)] = compute.local[7]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 50)] = compute.local[8]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 51)] = compute.local[9]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 52)] = compute.local[10]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 53)] = compute.local[11]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 54)] = compute.local[12]
  compute[((((blockIdx.z*3136) + (threadIdx.z*98)) + (threadIdx.y*7)) + 55)] = compute.local[13]
}
, GlobalVar(tvmgen_default_fused_divide_5): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_5", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_divide[threadIdx.x] = (placeholder[0]/placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_relu_6): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_6", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_relu[((blockIdx.x*1024) + threadIdx.x)] = max(placeholder[((blockIdx.x*1024) + threadIdx.x)], 0f)
}
, GlobalVar(tvmgen_default_fused_multiply): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 3
  T_multiply[threadIdx.x] = (placeholder[threadIdx.x]*placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 1
  allocate compute.local[float32 * 56], storage_scope = local
  allocate pad_temp.shared[float32 * 229], storage_scope = shared
  allocate placeholder.shared[float32 * 448], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 112
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 16
  for (ff.c.init, 0, 2) {
    compute.local[ff.c.init] = 0f
    compute.local[(ff.c.init + 14)] = 0f
    compute.local[(ff.c.init + 28)] = 0f
    compute.local[(ff.c.init + 42)] = 0f
    compute.local[(ff.c.init + 2)] = 0f
    compute.local[(ff.c.init + 16)] = 0f
    compute.local[(ff.c.init + 30)] = 0f
    compute.local[(ff.c.init + 44)] = 0f
    compute.local[(ff.c.init + 4)] = 0f
    compute.local[(ff.c.init + 18)] = 0f
    compute.local[(ff.c.init + 32)] = 0f
    compute.local[(ff.c.init + 46)] = 0f
    compute.local[(ff.c.init + 6)] = 0f
    compute.local[(ff.c.init + 20)] = 0f
    compute.local[(ff.c.init + 34)] = 0f
    compute.local[(ff.c.init + 48)] = 0f
    compute.local[(ff.c.init + 8)] = 0f
    compute.local[(ff.c.init + 22)] = 0f
    compute.local[(ff.c.init + 36)] = 0f
    compute.local[(ff.c.init + 50)] = 0f
    compute.local[(ff.c.init + 10)] = 0f
    compute.local[(ff.c.init + 24)] = 0f
    compute.local[(ff.c.init + 38)] = 0f
    compute.local[(ff.c.init + 52)] = 0f
    compute.local[(ff.c.init + 12)] = 0f
    compute.local[(ff.c.init + 26)] = 0f
    compute.local[(ff.c.init + 40)] = 0f
    compute.local[(ff.c.init + 54)] = 0f
  }
  for (rc.outer, 0, 3) {
    for (ry.outer, 0, 7) {
      // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
      // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
      // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 16
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 2) {
        if (((((threadIdx.z*29) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 229)) {
          if ((((threadIdx.x*2) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 29)) {
            pad_temp.shared[(((threadIdx.z*29) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = tir.if_then_else(((((3 <= ((blockIdx.y*2) + ry.outer)) && (((blockIdx.y*2) + ry.outer) < 227)) && (3 <= (((threadIdx.z*29) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner))) && ((((threadIdx.z*29) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 227)), placeholder[(((((((rc.outer*50176) + (blockIdx.y*448)) + (ry.outer*224)) + (threadIdx.z*29)) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) - 675)], 0f)
          }
        }
      }
      // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
      // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
      // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 16
      for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 4) {
        if ((((threadIdx.z*8) + floordiv(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 7)) < 64)) {
          if (((((threadIdx.z*56) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 448)) {
            if ((((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 56)) {
              placeholder.shared[(((threadIdx.z*56) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((threadIdx.z*1176) + (floordiv(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 7)*147)) + (rc.outer*49)) + (ry.outer*7)) + floormod(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 7))]
            }
          }
        }
      }
      for (rx.inner, 0, 7) {
        for (ff.c, 0, 2) {
          compute.local[ff.c] = (compute.local[ff.c] + (pad_temp.shared[((threadIdx.x*2) + rx.inner)]*placeholder.shared[(((threadIdx.z*14) + (ff.c*7)) + rx.inner)]))
          compute.local[(ff.c + 14)] = (compute.local[(ff.c + 14)] + (pad_temp.shared[((threadIdx.x*2) + rx.inner)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 112)]))
          compute.local[(ff.c + 28)] = (compute.local[(ff.c + 28)] + (pad_temp.shared[((threadIdx.x*2) + rx.inner)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 224)]))
          compute.local[(ff.c + 42)] = (compute.local[(ff.c + 42)] + (pad_temp.shared[((threadIdx.x*2) + rx.inner)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 336)]))
          compute.local[(ff.c + 2)] = (compute.local[(ff.c + 2)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 32)]*placeholder.shared[(((threadIdx.z*14) + (ff.c*7)) + rx.inner)]))
          compute.local[(ff.c + 16)] = (compute.local[(ff.c + 16)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 32)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 112)]))
          compute.local[(ff.c + 30)] = (compute.local[(ff.c + 30)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 32)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 224)]))
          compute.local[(ff.c + 44)] = (compute.local[(ff.c + 44)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 32)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 336)]))
          compute.local[(ff.c + 4)] = (compute.local[(ff.c + 4)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 64)]*placeholder.shared[(((threadIdx.z*14) + (ff.c*7)) + rx.inner)]))
          compute.local[(ff.c + 18)] = (compute.local[(ff.c + 18)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 64)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 112)]))
          compute.local[(ff.c + 32)] = (compute.local[(ff.c + 32)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 64)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 224)]))
          compute.local[(ff.c + 46)] = (compute.local[(ff.c + 46)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 64)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 336)]))
          compute.local[(ff.c + 6)] = (compute.local[(ff.c + 6)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 96)]*placeholder.shared[(((threadIdx.z*14) + (ff.c*7)) + rx.inner)]))
          compute.local[(ff.c + 20)] = (compute.local[(ff.c + 20)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 96)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 112)]))
          compute.local[(ff.c + 34)] = (compute.local[(ff.c + 34)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 96)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 224)]))
          compute.local[(ff.c + 48)] = (compute.local[(ff.c + 48)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 96)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 336)]))
          compute.local[(ff.c + 8)] = (compute.local[(ff.c + 8)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 128)]*placeholder.shared[(((threadIdx.z*14) + (ff.c*7)) + rx.inner)]))
          compute.local[(ff.c + 22)] = (compute.local[(ff.c + 22)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 128)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 112)]))
          compute.local[(ff.c + 36)] = (compute.local[(ff.c + 36)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 128)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 224)]))
          compute.local[(ff.c + 50)] = (compute.local[(ff.c + 50)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 128)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 336)]))
          compute.local[(ff.c + 10)] = (compute.local[(ff.c + 10)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 160)]*placeholder.shared[(((threadIdx.z*14) + (ff.c*7)) + rx.inner)]))
          compute.local[(ff.c + 24)] = (compute.local[(ff.c + 24)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 160)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 112)]))
          compute.local[(ff.c + 38)] = (compute.local[(ff.c + 38)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 160)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 224)]))
          compute.local[(ff.c + 52)] = (compute.local[(ff.c + 52)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 160)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 336)]))
          compute.local[(ff.c + 12)] = (compute.local[(ff.c + 12)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 192)]*placeholder.shared[(((threadIdx.z*14) + (ff.c*7)) + rx.inner)]))
          compute.local[(ff.c + 26)] = (compute.local[(ff.c + 26)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 192)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 112)]))
          compute.local[(ff.c + 40)] = (compute.local[(ff.c + 40)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 192)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 224)]))
          compute.local[(ff.c + 54)] = (compute.local[(ff.c + 54)] + (pad_temp.shared[(((threadIdx.x*2) + rx.inner) + 192)]*placeholder.shared[((((threadIdx.z*14) + (ff.c*7)) + rx.inner) + 336)]))
        }
      }
    }
  }
  for (ff.inner.inner.inner, 0, 2) {
    compute[((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x)] = compute.local[ff.inner.inner.inner]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 200704)] = compute.local[(ff.inner.inner.inner + 14)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 401408)] = compute.local[(ff.inner.inner.inner + 28)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 602112)] = compute.local[(ff.inner.inner.inner + 42)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 16)] = compute.local[(ff.inner.inner.inner + 2)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 200720)] = compute.local[(ff.inner.inner.inner + 16)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 401424)] = compute.local[(ff.inner.inner.inner + 30)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 602128)] = compute.local[(ff.inner.inner.inner + 44)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 32)] = compute.local[(ff.inner.inner.inner + 4)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 200736)] = compute.local[(ff.inner.inner.inner + 18)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 401440)] = compute.local[(ff.inner.inner.inner + 32)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 602144)] = compute.local[(ff.inner.inner.inner + 46)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 48)] = compute.local[(ff.inner.inner.inner + 6)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 200752)] = compute.local[(ff.inner.inner.inner + 20)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 401456)] = compute.local[(ff.inner.inner.inner + 34)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 602160)] = compute.local[(ff.inner.inner.inner + 48)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 64)] = compute.local[(ff.inner.inner.inner + 8)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 200768)] = compute.local[(ff.inner.inner.inner + 22)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 401472)] = compute.local[(ff.inner.inner.inner + 36)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 602176)] = compute.local[(ff.inner.inner.inner + 50)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 80)] = compute.local[(ff.inner.inner.inner + 10)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 200784)] = compute.local[(ff.inner.inner.inner + 24)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 401488)] = compute.local[(ff.inner.inner.inner + 38)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 602192)] = compute.local[(ff.inner.inner.inner + 52)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 96)] = compute.local[(ff.inner.inner.inner + 12)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 200800)] = compute.local[(ff.inner.inner.inner + 26)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 401504)] = compute.local[(ff.inner.inner.inner + 40)]
    compute[(((((threadIdx.z*25088) + (ff.inner.inner.inner*12544)) + (blockIdx.y*112)) + threadIdx.x) + 602208)] = compute.local[(ff.inner.inner.inner + 54)]
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_10): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_10", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 25
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  if ((((blockIdx.x*1024) + threadIdx.x) < 25088)) {
    T_relu[((blockIdx.x*1024) + threadIdx.x)] = max(placeholder[((blockIdx.x*1024) + threadIdx.x)], 0f)
  }
}
, GlobalVar(tvmgen_default_fused_add_25): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_25", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 196)])
}
, GlobalVar(tvmgen_default_fused_nn_dense): PrimFunc([placeholder, placeholder, T_matmul_NT]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_dense", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 1
  allocate T_matmul_NT.rf[float32 * 1], storage_scope = local
  allocate reduce_temp0[float32 * 1], storage_scope = local
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1000
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 64
  T_matmul_NT.rf[0] = 0f
  for (k.outer, 0, 32) {
    T_matmul_NT.rf[0] = (T_matmul_NT.rf[0] + (placeholder[((k.outer*64) + threadIdx.x)]*placeholder[(((blockIdx.x*2048) + (k.outer*64)) + threadIdx.x)]))
  }
  // attr [comm_reducer(result=[(x + y)], lhs=[x], rhs=[y], identity_element=[0f])] reduce_scope = tir.reinterpret((uint64)0)
  tir.tvm_thread_allreduce((uint32)1, T_matmul_NT.rf[0], (bool)1, reduce_temp0, threadIdx.x)
  if ((threadIdx.x == 0)) {
    T_matmul_NT[blockIdx.x] = reduce_temp0[0]
  }
}
, GlobalVar(tvmgen_default_fused_expand_dims_1): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_1", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 64
  T_expand_dims[threadIdx.x] = placeholder[threadIdx.x]
}
, GlobalVar(tvmgen_default_fused_add_29): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_29", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[((blockIdx.x*1024) + threadIdx.x)])
}
, GlobalVar(tvmgen_default_fused_add_15): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_15", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 2) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 401408)) {
      T_add[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_10): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_10", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 4) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 802816)) {
      T_add[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + placeholder[floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 3136)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_7): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_7", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  T_multiply[threadIdx.x] = (placeholder[threadIdx.x]*placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_21): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_21", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 16
  allocate compute.local[float32 * 1], storage_scope = local
  allocate pad_temp.shared[float32 * 112], storage_scope = shared
  allocate placeholder.shared[float32 * 512], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 7
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 7
  compute.local[0] = 0f
  for (rc.outer, 0, 128) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 7
    if ((((threadIdx.z*4) + threadIdx.x) < 112)) {
      if ((threadIdx.x < 4)) {
        pad_temp.shared[((threadIdx.z*4) + threadIdx.x)] = placeholder[((((rc.outer*784) + (floordiv(((threadIdx.z*4) + threadIdx.x), 7)*49)) + (blockIdx.y*7)) + floormod(((threadIdx.z*4) + threadIdx.x), 7))]
      }
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 7
    if (((floordiv((threadIdx.x*3), 16) + threadIdx.z) < 32)) {
      if ((((threadIdx.z*16) + (threadIdx.x*3)) < 512)) {
        if ((threadIdx.x < 6)) {
          placeholder.shared[((threadIdx.z*16) + (threadIdx.x*3))] = placeholder[((((blockIdx.z*65536) + (threadIdx.z*2048)) + (rc.outer*16)) + (threadIdx.x*3))]
        }
      }
    }
    if (((floordiv(((threadIdx.x*3) + 1), 16) + threadIdx.z) < 32)) {
      if ((((threadIdx.z*16) + (threadIdx.x*3)) < 511)) {
        if ((threadIdx.x < 5)) {
          placeholder.shared[(((threadIdx.z*16) + (threadIdx.x*3)) + 1)] = placeholder[(((((blockIdx.z*65536) + (threadIdx.z*2048)) + (rc.outer*16)) + (threadIdx.x*3)) + 1)]
        }
      }
    }
    if (((floordiv(((threadIdx.x*3) + 2), 16) + threadIdx.z) < 32)) {
      if ((((threadIdx.z*16) + (threadIdx.x*3)) < 510)) {
        if ((threadIdx.x < 5)) {
          placeholder.shared[(((threadIdx.z*16) + (threadIdx.x*3)) + 2)] = placeholder[(((((blockIdx.z*65536) + (threadIdx.z*2048)) + (rc.outer*16)) + (threadIdx.x*3)) + 2)]
        }
      }
    }
    compute.local[0] = (compute.local[0] + (pad_temp.shared[threadIdx.x]*placeholder.shared[(threadIdx.z*16)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 7)]*placeholder.shared[((threadIdx.z*16) + 1)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 14)]*placeholder.shared[((threadIdx.z*16) + 2)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 21)]*placeholder.shared[((threadIdx.z*16) + 3)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 28)]*placeholder.shared[((threadIdx.z*16) + 4)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 35)]*placeholder.shared[((threadIdx.z*16) + 5)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 42)]*placeholder.shared[((threadIdx.z*16) + 6)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 49)]*placeholder.shared[((threadIdx.z*16) + 7)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 56)]*placeholder.shared[((threadIdx.z*16) + 8)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 63)]*placeholder.shared[((threadIdx.z*16) + 9)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 70)]*placeholder.shared[((threadIdx.z*16) + 10)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 77)]*placeholder.shared[((threadIdx.z*16) + 11)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 84)]*placeholder.shared[((threadIdx.z*16) + 12)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 91)]*placeholder.shared[((threadIdx.z*16) + 13)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 98)]*placeholder.shared[((threadIdx.z*16) + 14)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x + 105)]*placeholder.shared[((threadIdx.z*16) + 15)]))
  }
  compute[((((blockIdx.z*1568) + (threadIdx.z*49)) + (blockIdx.y*7)) + threadIdx.x)] = compute.local[0]
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_17): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_17", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 16
  allocate compute.local[float32 * 4], storage_scope = local
  allocate pad_temp.shared[float32 * 448], storage_scope = shared
  allocate placeholder.shared[float32 * 512], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 7
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
  compute.local[0] = 0f
  compute.local[1] = 0f
  compute.local[2] = 0f
  compute.local[3] = 0f
  for (rc.outer, 0, 64) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 2) {
      pad_temp.shared[((((threadIdx.z*56) + (threadIdx.y*28)) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((((rc.outer*3136) + (threadIdx.z*392)) + (threadIdx.y*196)) + (blockIdx.y*28)) + (threadIdx.x*2)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)]
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 14
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 3) {
      if (((((threadIdx.z*4) + (threadIdx.y*2)) + floordiv(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)) < 32)) {
        if ((((((threadIdx.z*64) + (threadIdx.y*32)) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 512)) {
          if (((((threadIdx.y*32) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 64)) {
            if ((((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 32)) {
              placeholder.shared[((((threadIdx.z*64) + (threadIdx.y*32)) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((((blockIdx.z*32768) + (threadIdx.z*4096)) + (threadIdx.y*2048)) + (floordiv(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)*1024)) + (rc.outer*16)) + floormod(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16))]
            }
          }
        }
      }
    }
    for (rc.inner, 0, 16) {
      compute.local[0] = (compute.local[0] + (pad_temp.shared[(((rc.inner*28) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[1] = (compute.local[1] + (pad_temp.shared[(((rc.inner*28) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 128)]))
      compute.local[2] = (compute.local[2] + (pad_temp.shared[(((rc.inner*28) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[3] = (compute.local[3] + (pad_temp.shared[(((rc.inner*28) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 384)]))
    }
  }
  compute[(((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + threadIdx.x)] = compute.local[0]
  compute[((((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + threadIdx.x) + 1568)] = compute.local[1]
  compute[((((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + threadIdx.x) + 3136)] = compute.local[2]
  compute[((((((blockIdx.z*6272) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + threadIdx.x) + 4704)] = compute.local[3]
}
, GlobalVar(tvmgen_default_fused_multiply_20): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_20", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1000
  T_multiply[threadIdx.x] = (placeholder[0]*placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_add_9): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_9", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 256
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_add_21): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_21", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[((blockIdx.x*1024) + threadIdx.x)])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_11): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_11", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 4
  allocate compute.local[float32 * 28], storage_scope = local
  allocate pad_temp.shared[float32 * 896], storage_scope = shared
  allocate placeholder.shared[float32 * 1024], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 7
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2
  compute.local[0] = 0f
  compute.local[7] = 0f
  compute.local[14] = 0f
  compute.local[21] = 0f
  compute.local[1] = 0f
  compute.local[8] = 0f
  compute.local[15] = 0f
  compute.local[22] = 0f
  compute.local[2] = 0f
  compute.local[9] = 0f
  compute.local[16] = 0f
  compute.local[23] = 0f
  compute.local[3] = 0f
  compute.local[10] = 0f
  compute.local[17] = 0f
  compute.local[24] = 0f
  compute.local[4] = 0f
  compute.local[11] = 0f
  compute.local[18] = 0f
  compute.local[25] = 0f
  compute.local[5] = 0f
  compute.local[12] = 0f
  compute.local[19] = 0f
  compute.local[26] = 0f
  compute.local[6] = 0f
  compute.local[13] = 0f
  compute.local[20] = 0f
  compute.local[27] = 0f
  for (rc.outer, 0, 32) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 7) {
      pad_temp.shared[((((threadIdx.z*56) + (threadIdx.y*14)) + (threadIdx.x*7)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((((rc.outer*12544) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + (threadIdx.x*7)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)]
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 2
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 8) {
      placeholder.shared[((((threadIdx.z*64) + (threadIdx.y*16)) + (threadIdx.x*8)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((((blockIdx.z*32768) + (threadIdx.z*2048)) + (threadIdx.y*512)) + (rc.outer*16)) + (threadIdx.x*8)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)]
    }
    for (rc.inner, 0, 16) {
      compute.local[0] = (compute.local[0] + (pad_temp.shared[(((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[7] = (compute.local[7] + (pad_temp.shared[(((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[14] = (compute.local[14] + (pad_temp.shared[(((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
      compute.local[21] = (compute.local[21] + (pad_temp.shared[(((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
      compute.local[1] = (compute.local[1] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 2)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[8] = (compute.local[8] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 2)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[15] = (compute.local[15] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 2)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
      compute.local[22] = (compute.local[22] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 2)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
      compute.local[2] = (compute.local[2] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 4)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[9] = (compute.local[9] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 4)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[16] = (compute.local[16] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 4)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
      compute.local[23] = (compute.local[23] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 4)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
      compute.local[3] = (compute.local[3] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 6)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[10] = (compute.local[10] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 6)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[17] = (compute.local[17] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 6)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
      compute.local[24] = (compute.local[24] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 6)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
      compute.local[4] = (compute.local[4] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 8)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[11] = (compute.local[11] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 8)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[18] = (compute.local[18] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 8)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
      compute.local[25] = (compute.local[25] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 8)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
      compute.local[5] = (compute.local[5] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 10)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[12] = (compute.local[12] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 10)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[19] = (compute.local[19] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 10)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
      compute.local[26] = (compute.local[26] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 10)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
      compute.local[6] = (compute.local[6] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 12)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[13] = (compute.local[13] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 12)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[20] = (compute.local[20] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 12)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
      compute.local[27] = (compute.local[27] + (pad_temp.shared[((((rc.inner*56) + (threadIdx.y*14)) + threadIdx.x) + 12)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
    }
  }
  compute[((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x)] = compute.local[0]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 12544)] = compute.local[7]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 25088)] = compute.local[14]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 37632)] = compute.local[21]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 2)] = compute.local[1]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 12546)] = compute.local[8]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 25090)] = compute.local[15]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 37634)] = compute.local[22]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 4)] = compute.local[2]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 12548)] = compute.local[9]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 25092)] = compute.local[16]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 37636)] = compute.local[23]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 6)] = compute.local[3]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 12550)] = compute.local[10]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 25094)] = compute.local[17]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 37638)] = compute.local[24]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 8)] = compute.local[4]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 12552)] = compute.local[11]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 25096)] = compute.local[18]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 37640)] = compute.local[25]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 10)] = compute.local[5]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 12554)] = compute.local[12]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 25098)] = compute.local[19]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 37642)] = compute.local[26]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 12)] = compute.local[6]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 12556)] = compute.local[13]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 25100)] = compute.local[20]
  compute[(((((((blockIdx.z*50176) + (threadIdx.z*784)) + (blockIdx.y*112)) + (threadIdx.y*28)) + (blockIdx.x*14)) + threadIdx.x) + 37644)] = compute.local[27]
}
, GlobalVar(tvmgen_default_fused_negative_1): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_1", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 64
  T_negative[threadIdx.x] = (0f - placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_divide_1): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide_1", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 64
  T_divide[threadIdx.x] = (placeholder[0]/placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_negative): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 3
  T_negative[threadIdx.x] = (0f - placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_20): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_20", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 16
  allocate compute.local[float32 * 4], storage_scope = local
  allocate pad_temp.shared[float32 * 104], storage_scope = shared
  allocate placeholder.shared[float32 * 1024], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 7
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 7
  compute.local[0] = 0f
  compute.local[1] = 0f
  compute.local[2] = 0f
  compute.local[3] = 0f
  for (rc.outer, 0, 128) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 7
    if ((((threadIdx.z*4) + threadIdx.x) < 104)) {
      if ((threadIdx.x < 4)) {
        pad_temp.shared[((threadIdx.z*4) + threadIdx.x)] = placeholder[((((rc.outer*1568) + (floordiv(((threadIdx.z*4) + threadIdx.x), 13)*196)) + (blockIdx.y*28)) + floormod(((threadIdx.z*4) + threadIdx.x), 13))]
      }
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 32
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 7
    placeholder.shared[((threadIdx.z*32) + (threadIdx.x*5))] = placeholder[(((((blockIdx.z*131072) + (threadIdx.z*4096)) + (floordiv((threadIdx.x*5), 8)*1024)) + (rc.outer*8)) + floormod((threadIdx.x*5), 8))]
    placeholder.shared[(((threadIdx.z*32) + (threadIdx.x*5)) + 1)] = placeholder[(((((blockIdx.z*131072) + (threadIdx.z*4096)) + (floordiv(((threadIdx.x*5) + 1), 8)*1024)) + (rc.outer*8)) + floormod(((threadIdx.x*5) + 1), 8))]
    if ((((threadIdx.z*4) + floordiv(((threadIdx.x*5) + 2), 8)) < 128)) {
      if ((((threadIdx.z*32) + (threadIdx.x*5)) < 1022)) {
        if ((threadIdx.x < 6)) {
          placeholder.shared[(((threadIdx.z*32) + (threadIdx.x*5)) + 2)] = placeholder[(((((blockIdx.z*131072) + (threadIdx.z*4096)) + (floordiv(((threadIdx.x*5) + 2), 8)*1024)) + (rc.outer*8)) + floormod(((threadIdx.x*5) + 2), 8))]
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.x*5) + 3), 8)) < 128)) {
      if ((((threadIdx.z*32) + (threadIdx.x*5)) < 1021)) {
        if ((threadIdx.x < 6)) {
          placeholder.shared[(((threadIdx.z*32) + (threadIdx.x*5)) + 3)] = placeholder[(((((blockIdx.z*131072) + (threadIdx.z*4096)) + (floordiv(((threadIdx.x*5) + 3), 8)*1024)) + (rc.outer*8)) + floormod(((threadIdx.x*5) + 3), 8))]
        }
      }
    }
    if ((((threadIdx.z*4) + floordiv(((threadIdx.x*5) + 4), 8)) < 128)) {
      if ((((threadIdx.z*32) + (threadIdx.x*5)) < 1020)) {
        if ((threadIdx.x < 6)) {
          placeholder.shared[(((threadIdx.z*32) + (threadIdx.x*5)) + 4)] = placeholder[(((((blockIdx.z*131072) + (threadIdx.z*4096)) + (floordiv(((threadIdx.x*5) + 4), 8)*1024)) + (rc.outer*8)) + floormod(((threadIdx.x*5) + 4), 8))]
        }
      }
    }
    compute.local[0] = (compute.local[0] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[(threadIdx.z*8)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[((threadIdx.z*8) + 256)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[((threadIdx.z*8) + 512)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[(threadIdx.x*2)]*placeholder.shared[((threadIdx.z*8) + 768)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 13)]*placeholder.shared[((threadIdx.z*8) + 1)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 13)]*placeholder.shared[((threadIdx.z*8) + 257)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 13)]*placeholder.shared[((threadIdx.z*8) + 513)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 13)]*placeholder.shared[((threadIdx.z*8) + 769)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 26)]*placeholder.shared[((threadIdx.z*8) + 2)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 26)]*placeholder.shared[((threadIdx.z*8) + 258)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 26)]*placeholder.shared[((threadIdx.z*8) + 514)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 26)]*placeholder.shared[((threadIdx.z*8) + 770)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 39)]*placeholder.shared[((threadIdx.z*8) + 3)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 39)]*placeholder.shared[((threadIdx.z*8) + 259)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 39)]*placeholder.shared[((threadIdx.z*8) + 515)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 39)]*placeholder.shared[((threadIdx.z*8) + 771)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 52)]*placeholder.shared[((threadIdx.z*8) + 4)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 52)]*placeholder.shared[((threadIdx.z*8) + 260)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 52)]*placeholder.shared[((threadIdx.z*8) + 516)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 52)]*placeholder.shared[((threadIdx.z*8) + 772)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 65)]*placeholder.shared[((threadIdx.z*8) + 5)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 65)]*placeholder.shared[((threadIdx.z*8) + 261)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 65)]*placeholder.shared[((threadIdx.z*8) + 517)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 65)]*placeholder.shared[((threadIdx.z*8) + 773)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 78)]*placeholder.shared[((threadIdx.z*8) + 6)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 78)]*placeholder.shared[((threadIdx.z*8) + 262)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 78)]*placeholder.shared[((threadIdx.z*8) + 518)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 78)]*placeholder.shared[((threadIdx.z*8) + 774)]))
    compute.local[0] = (compute.local[0] + (pad_temp.shared[((threadIdx.x*2) + 91)]*placeholder.shared[((threadIdx.z*8) + 7)]))
    compute.local[1] = (compute.local[1] + (pad_temp.shared[((threadIdx.x*2) + 91)]*placeholder.shared[((threadIdx.z*8) + 263)]))
    compute.local[2] = (compute.local[2] + (pad_temp.shared[((threadIdx.x*2) + 91)]*placeholder.shared[((threadIdx.z*8) + 519)]))
    compute.local[3] = (compute.local[3] + (pad_temp.shared[((threadIdx.x*2) + 91)]*placeholder.shared[((threadIdx.z*8) + 775)]))
  }
  compute[((((blockIdx.z*6272) + (threadIdx.z*49)) + (blockIdx.y*7)) + threadIdx.x)] = compute.local[0]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (blockIdx.y*7)) + threadIdx.x) + 1568)] = compute.local[1]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (blockIdx.y*7)) + threadIdx.x) + 3136)] = compute.local[2]
  compute[(((((blockIdx.z*6272) + (threadIdx.z*49)) + (blockIdx.y*7)) + threadIdx.x) + 4704)] = compute.local[3]
}
, GlobalVar(tvmgen_default_fused_multiply_19): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_19", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 49)])
}
, GlobalVar(tvmgen_default_fused_nn_relu_8): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_8", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_relu[((blockIdx.x*1024) + threadIdx.x)] = max(placeholder[((blockIdx.x*1024) + threadIdx.x)], 0f)
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_13): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_13", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 16
  allocate compute.local[float32 * 8], storage_scope = local
  allocate pad_temp.shared[float32 * 224], storage_scope = shared
  allocate placeholder.shared[float32 * 512], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 7
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 7
  unrolled (xx.c.init, 0, 2) {
    compute.local[xx.c.init] = 0f
    compute.local[(xx.c.init + 2)] = 0f
    compute.local[(xx.c.init + 4)] = 0f
    compute.local[(xx.c.init + 6)] = 0f
  }
  for (rc.outer, 0, 32) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 7
    pad_temp.shared[(((threadIdx.z*14) + (threadIdx.y*7)) + threadIdx.x)] = placeholder[((((((rc.outer*1568) + (floordiv(threadIdx.z, 2)*196)) + (blockIdx.y*28)) + (floormod(threadIdx.z, 2)*14)) + (threadIdx.y*7)) + threadIdx.x)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 7
    unrolled (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 3) {
      if (((((threadIdx.z*4) + (threadIdx.y*2)) + floordiv(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8)) < 64)) {
        if ((((((threadIdx.z*32) + (threadIdx.y*16)) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 512)) {
          if (((((threadIdx.y*16) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 32)) {
            if ((((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 16)) {
              placeholder.shared[((((threadIdx.z*32) + (threadIdx.y*16)) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((((blockIdx.z*16384) + (threadIdx.z*1024)) + (threadIdx.y*512)) + (floordiv(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8)*256)) + (rc.outer*8)) + floormod(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 8))]
            }
          }
        }
      }
    }
    unrolled (rc.inner, 0, 8) {
      unrolled (xx.c, 0, 2) {
        compute.local[xx.c] = (compute.local[xx.c] + (pad_temp.shared[((((rc.inner*28) + (threadIdx.y*14)) + (threadIdx.x*2)) + xx.c)]*placeholder.shared[((threadIdx.z*8) + rc.inner)]))
        compute.local[(xx.c + 2)] = (compute.local[(xx.c + 2)] + (pad_temp.shared[((((rc.inner*28) + (threadIdx.y*14)) + (threadIdx.x*2)) + xx.c)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 128)]))
        compute.local[(xx.c + 4)] = (compute.local[(xx.c + 4)] + (pad_temp.shared[((((rc.inner*28) + (threadIdx.y*14)) + (threadIdx.x*2)) + xx.c)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 256)]))
        compute.local[(xx.c + 6)] = (compute.local[(xx.c + 6)] + (pad_temp.shared[((((rc.inner*28) + (threadIdx.y*14)) + (threadIdx.x*2)) + xx.c)]*placeholder.shared[(((threadIdx.z*8) + rc.inner) + 384)]))
      }
    }
  }
  unrolled (xx.inner.inner.inner, 0, 2) {
    compute[((((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + (threadIdx.x*2)) + xx.inner.inner.inner)] = compute.local[xx.inner.inner.inner]
    compute[(((((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + (threadIdx.x*2)) + xx.inner.inner.inner) + 3136)] = compute.local[(xx.inner.inner.inner + 2)]
    compute[(((((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + (threadIdx.x*2)) + xx.inner.inner.inner) + 6272)] = compute.local[(xx.inner.inner.inner + 4)]
    compute[(((((((blockIdx.z*12544) + (threadIdx.z*196)) + (blockIdx.y*28)) + (threadIdx.y*14)) + (threadIdx.x*2)) + xx.inner.inner.inner) + 9408)] = compute.local[(xx.inner.inner.inner + 6)]
  }
}
, GlobalVar(tvmgen_default_fused_multiply_13): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_13", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 49
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 196)])
}
, GlobalVar(tvmgen_default_fused_multiply_16): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_16", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 196)])
}
, GlobalVar(tvmgen_default_fused_multiply_8): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_8", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 2) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 401408)) {
      T_multiply[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)]*placeholder[floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 3136)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_1): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_1", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 147
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 50176)])
}
, GlobalVar(tvmgen_default_fused_expand_dims): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 3
  T_expand_dims[threadIdx.x] = placeholder[threadIdx.x]
}
, GlobalVar(tvmgen_default_fused_add_1): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_1", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 3
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_relu_4): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_4", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_relu[((blockIdx.x*1024) + threadIdx.x)] = max(placeholder[((blockIdx.x*1024) + threadIdx.x)], 0f)
}
, GlobalVar(tvmgen_default_fused_add_30): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_30", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 49)])
}
, GlobalVar(tvmgen_default_fused_add_7): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_7", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 4) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 802816)) {
      T_add[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_10): PrimFunc([placeholder, placeholder, output]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_10", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  allocate kernel_pack[float32 * 262144], storage_scope = global
  allocate data_pack[float32 * 401408], storage_scope = global
  allocate bgemm[float32 * 401408], storage_scope = global
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 128
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  kernel_pack[((blockIdx.x*128) + threadIdx.x)] = 0f
  kernel_pack[((blockIdx.x*128) + threadIdx.x)] = (kernel_pack[((blockIdx.x*128) + threadIdx.x)] + placeholder[((threadIdx.x*1152) + (blockIdx.x*9))])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] + (placeholder[((threadIdx.x*1152) + (blockIdx.x*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 1)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + (placeholder[((threadIdx.x*1152) + (blockIdx.x*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 1)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] + placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 2)])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + (placeholder[((threadIdx.x*1152) + (blockIdx.x*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 3)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[((threadIdx.x*1152) + (blockIdx.x*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 1)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 3)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 4)]*-0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 5)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 7)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + ((placeholder[((threadIdx.x*1152) + (blockIdx.x*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 1)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 3)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 4)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 5)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 7)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 5)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] + (placeholder[((threadIdx.x*1152) + (blockIdx.x*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 3)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] + ((placeholder[((threadIdx.x*1152) + (blockIdx.x*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 1)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 3)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 4)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 5)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 7)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 147456)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] + ((placeholder[((threadIdx.x*1152) + (blockIdx.x*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 1)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 3)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 4)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 5)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 7)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 163840)] + ((placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 180224)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 180224)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 180224)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 180224)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 180224)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 5)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 180224)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 180224)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 196608)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 196608)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 196608)] + placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 6)])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 212992)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 212992)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 212992)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 212992)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 212992)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 7)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 212992)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 212992)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 229376)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 229376)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 229376)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 229376)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 229376)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 7)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 229376)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 229376)] + (placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 245760)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 245760)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 245760)] + placeholder[(((threadIdx.x*1152) + (blockIdx.x*9)) + 8)])
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  allocate d[float32 * 16], storage_scope = local
  allocate data_pack.local[float32 * 16], storage_scope = local
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  for (eps, 0, 4) {
    for (nu, 0, 4) {
      d[((eps*4) + nu)] = tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*2) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*2) + eps) < 29)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 14)*2) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 14)*2) + nu) < 29)), placeholder[(((((floordiv(((blockIdx.x*128) + threadIdx.x), 14)*56) + (eps*28)) + (floormod(((blockIdx.x*128) + threadIdx.x), 14)*2)) + nu) - 29)], 0f)
    }
  }
  data_pack.local[0] = 0f
  data_pack.local[0] = (data_pack.local[0] + d[0])
  data_pack.local[0] = (data_pack.local[0] + (d[2]*-1f))
  data_pack.local[0] = (data_pack.local[0] + (d[8]*-1f))
  data_pack.local[0] = (data_pack.local[0] + ((d[10]*-1f)*-1f))
  data_pack.local[1] = 0f
  data_pack.local[1] = (data_pack.local[1] + (d[1]*-1f))
  data_pack.local[1] = (data_pack.local[1] + d[2])
  data_pack.local[1] = (data_pack.local[1] + ((d[9]*-1f)*-1f))
  data_pack.local[1] = (data_pack.local[1] + (d[10]*-1f))
  data_pack.local[2] = 0f
  data_pack.local[2] = (data_pack.local[2] + d[1])
  data_pack.local[2] = (data_pack.local[2] + d[2])
  data_pack.local[2] = (data_pack.local[2] + (d[9]*-1f))
  data_pack.local[2] = (data_pack.local[2] + (d[10]*-1f))
  data_pack.local[3] = 0f
  data_pack.local[3] = (data_pack.local[3] + (d[1]*-1f))
  data_pack.local[3] = (data_pack.local[3] + d[3])
  data_pack.local[3] = (data_pack.local[3] + ((d[9]*-1f)*-1f))
  data_pack.local[3] = (data_pack.local[3] + (d[11]*-1f))
  data_pack.local[4] = 0f
  data_pack.local[4] = (data_pack.local[4] + (d[4]*-1f))
  data_pack.local[4] = (data_pack.local[4] + ((d[6]*-1f)*-1f))
  data_pack.local[4] = (data_pack.local[4] + d[8])
  data_pack.local[4] = (data_pack.local[4] + (d[10]*-1f))
  data_pack.local[5] = 0f
  data_pack.local[5] = (data_pack.local[5] + ((d[5]*-1f)*-1f))
  data_pack.local[5] = (data_pack.local[5] + (d[6]*-1f))
  data_pack.local[5] = (data_pack.local[5] + (d[9]*-1f))
  data_pack.local[5] = (data_pack.local[5] + d[10])
  data_pack.local[6] = 0f
  data_pack.local[6] = (data_pack.local[6] + (d[5]*-1f))
  data_pack.local[6] = (data_pack.local[6] + (d[6]*-1f))
  data_pack.local[6] = (data_pack.local[6] + d[9])
  data_pack.local[6] = (data_pack.local[6] + d[10])
  data_pack.local[7] = 0f
  data_pack.local[7] = (data_pack.local[7] + ((d[5]*-1f)*-1f))
  data_pack.local[7] = (data_pack.local[7] + (d[7]*-1f))
  data_pack.local[7] = (data_pack.local[7] + (d[9]*-1f))
  data_pack.local[7] = (data_pack.local[7] + d[11])
  data_pack.local[8] = 0f
  data_pack.local[8] = (data_pack.local[8] + d[4])
  data_pack.local[8] = (data_pack.local[8] + (d[6]*-1f))
  data_pack.local[8] = (data_pack.local[8] + d[8])
  data_pack.local[8] = (data_pack.local[8] + (d[10]*-1f))
  data_pack.local[9] = 0f
  data_pack.local[9] = (data_pack.local[9] + (d[5]*-1f))
  data_pack.local[9] = (data_pack.local[9] + d[6])
  data_pack.local[9] = (data_pack.local[9] + (d[9]*-1f))
  data_pack.local[9] = (data_pack.local[9] + d[10])
  data_pack.local[10] = 0f
  data_pack.local[10] = (data_pack.local[10] + d[5])
  data_pack.local[10] = (data_pack.local[10] + d[6])
  data_pack.local[10] = (data_pack.local[10] + d[9])
  data_pack.local[10] = (data_pack.local[10] + d[10])
  data_pack.local[11] = 0f
  data_pack.local[11] = (data_pack.local[11] + (d[5]*-1f))
  data_pack.local[11] = (data_pack.local[11] + d[7])
  data_pack.local[11] = (data_pack.local[11] + (d[9]*-1f))
  data_pack.local[11] = (data_pack.local[11] + d[11])
  data_pack.local[12] = 0f
  data_pack.local[12] = (data_pack.local[12] + (d[4]*-1f))
  data_pack.local[12] = (data_pack.local[12] + ((d[6]*-1f)*-1f))
  data_pack.local[12] = (data_pack.local[12] + d[12])
  data_pack.local[12] = (data_pack.local[12] + (d[14]*-1f))
  data_pack.local[13] = 0f
  data_pack.local[13] = (data_pack.local[13] + ((d[5]*-1f)*-1f))
  data_pack.local[13] = (data_pack.local[13] + (d[6]*-1f))
  data_pack.local[13] = (data_pack.local[13] + (d[13]*-1f))
  data_pack.local[13] = (data_pack.local[13] + d[14])
  data_pack.local[14] = 0f
  data_pack.local[14] = (data_pack.local[14] + (d[5]*-1f))
  data_pack.local[14] = (data_pack.local[14] + (d[6]*-1f))
  data_pack.local[14] = (data_pack.local[14] + d[13])
  data_pack.local[14] = (data_pack.local[14] + d[14])
  data_pack.local[15] = 0f
  data_pack.local[15] = (data_pack.local[15] + ((d[5]*-1f)*-1f))
  data_pack.local[15] = (data_pack.local[15] + (d[7]*-1f))
  data_pack.local[15] = (data_pack.local[15] + (d[13]*-1f))
  data_pack.local[15] = (data_pack.local[15] + d[15])
  for (eps, 0, 4) {
    for (nu, 0, 4) {
      data_pack[((((eps*100352) + (nu*25088)) + (blockIdx.x*128)) + threadIdx.x)] = data_pack.local[((eps*4) + nu)]
    }
  }
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 16
  allocate bgemm.local[float32 * 16], storage_scope = local
  allocate kernel_pack.shared[float32 * 512], storage_scope = shared
  allocate data_pack.shared[float32 * 1568], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 4
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
  bgemm.local[0] = 0f
  bgemm.local[4] = 0f
  bgemm.local[8] = 0f
  bgemm.local[12] = 0f
  bgemm.local[2] = 0f
  bgemm.local[6] = 0f
  bgemm.local[10] = 0f
  bgemm.local[14] = 0f
  bgemm.local[1] = 0f
  bgemm.local[5] = 0f
  bgemm.local[9] = 0f
  bgemm.local[13] = 0f
  bgemm.local[3] = 0f
  bgemm.local[7] = 0f
  bgemm.local[11] = 0f
  bgemm.local[15] = 0f
  for (ci.outer, 0, 8) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    kernel_pack.shared[((threadIdx.y*49) + threadIdx.x)] = kernel_pack[(((((blockIdx.z*16384) + (ci.outer*2048)) + (floordiv(((threadIdx.y*49) + threadIdx.x), 32)*128)) + (blockIdx.y*32)) + floormod(((threadIdx.y*49) + threadIdx.x), 32))]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    kernel_pack.shared[(((threadIdx.y*49) + threadIdx.x) + 196)] = kernel_pack[(((((blockIdx.z*16384) + (ci.outer*2048)) + (floordiv((((threadIdx.y*49) + threadIdx.x) + 196), 32)*128)) + (blockIdx.y*32)) + floormod((((threadIdx.y*49) + threadIdx.x) + 4), 32))]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    if ((((threadIdx.y*49) + threadIdx.x) < 120)) {
      if ((threadIdx.y < 3)) {
        kernel_pack.shared[(((threadIdx.y*49) + threadIdx.x) + 392)] = kernel_pack[(((((blockIdx.z*16384) + (ci.outer*2048)) + (floordiv((((threadIdx.y*49) + threadIdx.x) + 392), 32)*128)) + (blockIdx.y*32)) + floormod((((threadIdx.y*49) + threadIdx.x) + 8), 32))]
      }
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    data_pack.shared[((threadIdx.y*49) + threadIdx.x)] = data_pack[(((((blockIdx.z*25088) + (ci.outer*3136)) + (floordiv(((threadIdx.y*49) + threadIdx.x), 98)*196)) + (blockIdx.x*98)) + floormod(((threadIdx.y*49) + threadIdx.x), 98))]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    data_pack.shared[(((threadIdx.y*49) + threadIdx.x) + 196)] = data_pack[((((((blockIdx.z*25088) + (ci.outer*3136)) + (floordiv(((threadIdx.y*49) + threadIdx.x), 98)*196)) + (blockIdx.x*98)) + floormod(((threadIdx.y*49) + threadIdx.x), 98)) + 392)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    data_pack.shared[(((threadIdx.y*49) + threadIdx.x) + 392)] = data_pack[((((((blockIdx.z*25088) + (ci.outer*3136)) + (floordiv(((threadIdx.y*49) + threadIdx.x), 98)*196)) + (blockIdx.x*98)) + floormod(((threadIdx.y*49) + threadIdx.x), 98)) + 784)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    data_pack.shared[(((threadIdx.y*49) + threadIdx.x) + 588)] = data_pack[((((((blockIdx.z*25088) + (ci.outer*3136)) + (floordiv(((threadIdx.y*49) + threadIdx.x), 98)*196)) + (blockIdx.x*98)) + floormod(((threadIdx.y*49) + threadIdx.x), 98)) + 1176)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    data_pack.shared[(((threadIdx.y*49) + threadIdx.x) + 784)] = data_pack[((((((blockIdx.z*25088) + (ci.outer*3136)) + (floordiv(((threadIdx.y*49) + threadIdx.x), 98)*196)) + (blockIdx.x*98)) + floormod(((threadIdx.y*49) + threadIdx.x), 98)) + 1568)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    data_pack.shared[(((threadIdx.y*49) + threadIdx.x) + 980)] = data_pack[((((((blockIdx.z*25088) + (ci.outer*3136)) + (floordiv(((threadIdx.y*49) + threadIdx.x), 98)*196)) + (blockIdx.x*98)) + floormod(((threadIdx.y*49) + threadIdx.x), 98)) + 1960)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    data_pack.shared[(((threadIdx.y*49) + threadIdx.x) + 1176)] = data_pack[((((((blockIdx.z*25088) + (ci.outer*3136)) + (floordiv(((threadIdx.y*49) + threadIdx.x), 98)*196)) + (blockIdx.x*98)) + floormod(((threadIdx.y*49) + threadIdx.x), 98)) + 2352)]
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 4
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
    data_pack.shared[(((threadIdx.y*49) + threadIdx.x) + 1372)] = data_pack[((((((blockIdx.z*25088) + (ci.outer*3136)) + (floordiv(((threadIdx.y*49) + threadIdx.x), 98)*196)) + (blockIdx.x*98)) + floormod(((threadIdx.y*49) + threadIdx.x), 98)) + 2744)]
    for (ci.inner, 0, 16) {
      bgemm.local[0] = (bgemm.local[0] + (kernel_pack.shared[((ci.inner*32) + (threadIdx.y*2))]*data_pack.shared[((ci.inner*98) + threadIdx.x)]))
      bgemm.local[4] = (bgemm.local[4] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 8)]*data_pack.shared[((ci.inner*98) + threadIdx.x)]))
      bgemm.local[8] = (bgemm.local[8] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 16)]*data_pack.shared[((ci.inner*98) + threadIdx.x)]))
      bgemm.local[12] = (bgemm.local[12] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 24)]*data_pack.shared[((ci.inner*98) + threadIdx.x)]))
      bgemm.local[2] = (bgemm.local[2] + (kernel_pack.shared[((ci.inner*32) + (threadIdx.y*2))]*data_pack.shared[(((ci.inner*98) + threadIdx.x) + 49)]))
      bgemm.local[6] = (bgemm.local[6] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 8)]*data_pack.shared[(((ci.inner*98) + threadIdx.x) + 49)]))
      bgemm.local[10] = (bgemm.local[10] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 16)]*data_pack.shared[(((ci.inner*98) + threadIdx.x) + 49)]))
      bgemm.local[14] = (bgemm.local[14] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 24)]*data_pack.shared[(((ci.inner*98) + threadIdx.x) + 49)]))
      bgemm.local[1] = (bgemm.local[1] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 1)]*data_pack.shared[((ci.inner*98) + threadIdx.x)]))
      bgemm.local[5] = (bgemm.local[5] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 9)]*data_pack.shared[((ci.inner*98) + threadIdx.x)]))
      bgemm.local[9] = (bgemm.local[9] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 17)]*data_pack.shared[((ci.inner*98) + threadIdx.x)]))
      bgemm.local[13] = (bgemm.local[13] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 25)]*data_pack.shared[((ci.inner*98) + threadIdx.x)]))
      bgemm.local[3] = (bgemm.local[3] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 1)]*data_pack.shared[(((ci.inner*98) + threadIdx.x) + 49)]))
      bgemm.local[7] = (bgemm.local[7] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 9)]*data_pack.shared[(((ci.inner*98) + threadIdx.x) + 49)]))
      bgemm.local[11] = (bgemm.local[11] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 17)]*data_pack.shared[(((ci.inner*98) + threadIdx.x) + 49)]))
      bgemm.local[15] = (bgemm.local[15] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*2)) + 25)]*data_pack.shared[(((ci.inner*98) + threadIdx.x) + 49)]))
    }
  }
  bgemm[(((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x)] = bgemm.local[0]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 1568)] = bgemm.local[4]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 3136)] = bgemm.local[8]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 4704)] = bgemm.local[12]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 49)] = bgemm.local[2]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 1617)] = bgemm.local[6]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 3185)] = bgemm.local[10]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 4753)] = bgemm.local[14]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 196)] = bgemm.local[1]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 1764)] = bgemm.local[5]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 3332)] = bgemm.local[9]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 4900)] = bgemm.local[13]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 245)] = bgemm.local[3]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 1813)] = bgemm.local[7]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 3381)] = bgemm.local[11]
  bgemm[((((((blockIdx.z*25088) + (blockIdx.y*6272)) + (threadIdx.y*392)) + (blockIdx.x*98)) + threadIdx.x) + 4949)] = bgemm.local[15]
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  allocate inverse[float32 * 4], storage_scope = local
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  inverse[0] = 0f
  inverse[0] = (inverse[0] + bgemm[((blockIdx.x*128) + threadIdx.x)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 25088)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 50176)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 150528)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 225792)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)])
  inverse[1] = 0f
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 25088)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 50176)])
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 75264)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 150528)])
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 225792)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)])
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)])
  inverse[2] = 0f
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)]*-1f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 150528)]*-1f))
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 225792)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 301056)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)])
  inverse[3] = 0f
  inverse[3] = (inverse[3] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f)*-1f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 150528)]*-1f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)]*-1f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 225792)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)])
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)])
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 376320)])
  for (h.inner, 0, 2) {
    for (w.inner, 0, 2) {
      output[((((floordiv(((blockIdx.x*128) + threadIdx.x), 14)*56) + (h.inner*28)) + (floormod(((blockIdx.x*128) + threadIdx.x), 14)*2)) + w.inner)] = inverse[((h.inner*2) + w.inner)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_3): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_3", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 64
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[0])
}
, GlobalVar(tvmgen_default_fused_add_18): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_18", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 2) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 401408)) {
      T_add[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + placeholder[floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 784)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_7): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_7", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 49
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_relu[((blockIdx.x*1024) + threadIdx.x)] = max(placeholder[((blockIdx.x*1024) + threadIdx.x)], 0f)
}
, GlobalVar(tvmgen_default_fused_add_14): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_14", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 784)])
}
, GlobalVar(tvmgen_default_fused_add_24): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_24", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 196)])
}
, GlobalVar(tvmgen_default_fused_divide): PrimFunc([placeholder, placeholder, T_divide]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_divide", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 3
  T_divide[threadIdx.x] = (placeholder[0]/placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_reshape): PrimFunc([placeholder, T_reshape]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_reshape", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_reshape[((blockIdx.x*1024) + threadIdx.x)] = placeholder[((blockIdx.x*1024) + threadIdx.x)]
}
, GlobalVar(tvmgen_default_fused_expand_dims_2): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_2", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 256
  T_expand_dims[threadIdx.x] = placeholder[threadIdx.x]
}
, GlobalVar(tvmgen_default_fused_add_26): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_26", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 25
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  if ((((blockIdx.x*1024) + threadIdx.x) < 25088)) {
    T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 49)])
  }
}
, GlobalVar(tvmgen_default_fused_negative_6): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_6", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_negative[((blockIdx.x*1024) + threadIdx.x)] = (0f - placeholder[((blockIdx.x*1024) + threadIdx.x)])
}
, GlobalVar(tvmgen_default_fused_sqrt_1): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt_1", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 64
  T_sqrt[threadIdx.x] = tir.sqrt(placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_relu): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 4) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 802816)) {
      T_relu[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max(placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f)
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_relu_5): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_5", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 2) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 401408)) {
      T_relu[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max(placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f)
    }
  }
}
, GlobalVar(tvmgen_default_fused_add_8): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_8", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 256
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[0])
}
, GlobalVar(tvmgen_default_fused_add_19): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_19", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 784)])
}
, GlobalVar(tvmgen_default_fused_negative_3): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_3", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  T_negative[threadIdx.x] = (0f - placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_19): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_19", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 64
  allocate compute.local[float32 * 14], storage_scope = local
  allocate pad_temp.shared[float32 * 784], storage_scope = shared
  allocate placeholder.shared[float32 * 512], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 1
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1
  for (xx.c.init, 0, 7) {
    compute.local[xx.c.init] = 0f
    compute.local[(xx.c.init + 7)] = 0f
  }
  for (rc.outer, 0, 32) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 7) {
      pad_temp.shared[(((threadIdx.z*49) + (threadIdx.y*7)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((rc.outer*784) + (threadIdx.z*49)) + (threadIdx.y*7)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)]
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 7
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 5) {
      if ((((threadIdx.z*2) + floordiv(((threadIdx.y*5) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)) < 32)) {
        if (((((threadIdx.z*32) + (threadIdx.y*5)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 512)) {
          if ((((threadIdx.y*5) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 32)) {
            placeholder.shared[(((threadIdx.z*32) + (threadIdx.y*5)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((blockIdx.z*16384) + (threadIdx.z*1024)) + (floordiv(((threadIdx.y*5) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)*512)) + (rc.outer*16)) + floormod(((threadIdx.y*5) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16))]
          }
        }
      }
    }
    for (rc.inner, 0, 16) {
      for (xx.c, 0, 7) {
        compute.local[xx.c] = (compute.local[xx.c] + (pad_temp.shared[(((rc.inner*49) + (threadIdx.y*7)) + xx.c)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
        compute.local[(xx.c + 7)] = (compute.local[(xx.c + 7)] + (pad_temp.shared[(((rc.inner*49) + (threadIdx.y*7)) + xx.c)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      }
    }
  }
  for (xx.inner.inner.inner, 0, 7) {
    compute[((((blockIdx.z*1568) + (threadIdx.z*49)) + (threadIdx.y*7)) + xx.inner.inner.inner)] = compute.local[xx.inner.inner.inner]
    compute[(((((blockIdx.z*1568) + (threadIdx.z*49)) + (threadIdx.y*7)) + xx.inner.inner.inner) + 784)] = compute.local[(xx.inner.inner.inner + 7)]
  }
}
, GlobalVar(tvmgen_default_fused_multiply_11): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_11", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 2) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 401408)) {
      T_multiply[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)]*placeholder[floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 784)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_negative_4): PrimFunc([placeholder, T_negative]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_negative_4", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 512
  T_negative[threadIdx.x] = (0f - placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_multiply_15): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_15", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 196)])
}
, GlobalVar(tvmgen_default_fused_nn_relu_3): PrimFunc([placeholder, T_relu]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_relu_3", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 2) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 401408)) {
      T_relu[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = max(placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)], 0f)
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_3): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_3", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 4
  allocate compute.local[float32 * 16], storage_scope = local
  allocate pad_temp.shared[float32 * 1792], storage_scope = shared
  allocate placeholder.shared[float32 * 1024], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 14
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
  for (yy.c.init, 0, 4) {
    compute.local[yy.c.init] = 0f
    compute.local[(yy.c.init + 4)] = 0f
    compute.local[(yy.c.init + 8)] = 0f
    compute.local[(yy.c.init + 12)] = 0f
  }
  for (rc.outer, 0, 4) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 4) {
      pad_temp.shared[(((threadIdx.z*112) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[((((((rc.outer*50176) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (floordiv(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 28)*56)) + (blockIdx.x*28)) + floormod(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 28))]
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 16
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 3) {
      if ((((threadIdx.z*4) + floordiv(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)) < 64)) {
        if (((((threadIdx.z*64) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 1024)) {
          if ((((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 64)) {
            placeholder.shared[(((threadIdx.z*64) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((blockIdx.z*4096) + (threadIdx.z*256)) + (floordiv(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)*64)) + (rc.outer*16)) + floormod(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16))]
          }
        }
      }
    }
    for (rc.inner, 0, 16) {
      for (yy.c, 0, 4) {
        compute.local[yy.c] = (compute.local[yy.c] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
        compute.local[(yy.c + 4)] = (compute.local[(yy.c + 4)] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
        compute.local[(yy.c + 8)] = (compute.local[(yy.c + 8)] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 512)]))
        compute.local[(yy.c + 12)] = (compute.local[(yy.c + 12)] + (pad_temp.shared[(((rc.inner*112) + (yy.c*28)) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 768)]))
      }
    }
  }
  for (yy.inner.inner.inner, 0, 4) {
    compute[((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x)] = compute.local[yy.inner.inner.inner]
    compute[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 50176)] = compute.local[(yy.inner.inner.inner + 4)]
    compute[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 100352)] = compute.local[(yy.inner.inner.inner + 8)]
    compute[(((((((blockIdx.z*200704) + (threadIdx.z*3136)) + (blockIdx.y*224)) + (yy.inner.inner.inner*56)) + (blockIdx.x*28)) + threadIdx.x) + 150528)] = compute.local[(yy.inner.inner.inner + 12)]
  }
}
, GlobalVar(tvmgen_default_fused_add_16): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_16", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 512
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[0])
}
, GlobalVar(tvmgen_default_fused_add_13): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_13", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 256
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  for (ax0.ax1.fused.ax2.fused.ax3.fused.outer, 0, 2) {
    if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x) < 401408)) {
      T_add[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] = (placeholder[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x)] + placeholder[floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer*262144) + (blockIdx.x*1024)) + threadIdx.x), 3136)])
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_2): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_2", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 64
  T_multiply[threadIdx.x] = (placeholder[threadIdx.x]*placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_expand_dims_3): PrimFunc([placeholder, T_expand_dims]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_expand_dims_3", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  T_expand_dims[threadIdx.x] = placeholder[threadIdx.x]
}
, GlobalVar(tvmgen_default_fused_multiply_14): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_14", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[threadIdx.x] = (placeholder[threadIdx.x]*placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_sqrt): PrimFunc([placeholder, T_sqrt]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_sqrt", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 3
  T_sqrt[threadIdx.x] = tir.sqrt(placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_16): PrimFunc([placeholder, placeholder, output]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_16", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  allocate kernel_pack[float32 * 1048576], storage_scope = global
  allocate data_pack[float32 * 200704], storage_scope = global
  allocate bgemm[float32 * 200704], storage_scope = global
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 512
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  kernel_pack[((blockIdx.x*128) + threadIdx.x)] = 0f
  kernel_pack[((blockIdx.x*128) + threadIdx.x)] = (kernel_pack[((blockIdx.x*128) + threadIdx.x)] + placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9))])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + (placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 1)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] + (placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 1)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 196608)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 196608)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 196608)] + placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 2)])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] + (placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 3)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 262144)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] + ((placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 1)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 3)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 4)]*-0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 5)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 7)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 327680)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] + ((placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 1)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 3)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 4)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 5)]*-0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 7)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 393216)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 458752)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 458752)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 458752)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 458752)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 458752)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 5)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 458752)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 458752)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] + (placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9))]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 3)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 524288)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] + ((placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 1)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 3)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 4)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 5)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 7)]*0.5f)*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 589824)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] + ((placeholder[((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9))]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 1)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 2)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 3)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 4)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 5)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 6)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 7)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 655360)] + ((placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 8)]*0.5f)*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 720896)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 720896)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 720896)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 2)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 720896)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 720896)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 5)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 720896)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 720896)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 786432)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 786432)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 786432)] + placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 6)])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 851968)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 851968)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 851968)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 851968)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 851968)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 7)]*-0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 851968)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 851968)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 917504)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 917504)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 917504)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 6)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 917504)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 917504)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 7)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 917504)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 917504)] + (placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 8)]*0.5f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 983040)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 983040)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 983040)] + placeholder[(((floormod(((blockIdx.x*128) + threadIdx.x), 256)*2304) + (floordiv(((blockIdx.x*128) + threadIdx.x), 256)*9)) + 8)])
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  allocate d[float32 * 16], storage_scope = local
  allocate data_pack.local[float32 * 16], storage_scope = local
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  for (eps, 0, 4) {
    for (nu, 0, 4) {
      d[((eps*4) + nu)] = tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*2) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 49), 7)*2) + eps) < 15)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 7)*2) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 7)*2) + nu) < 15)), placeholder[(((((floordiv(((blockIdx.x*128) + threadIdx.x), 7)*28) + (eps*14)) + (floormod(((blockIdx.x*128) + threadIdx.x), 7)*2)) + nu) - 15)], 0f)
    }
  }
  data_pack.local[0] = 0f
  data_pack.local[0] = (data_pack.local[0] + d[0])
  data_pack.local[0] = (data_pack.local[0] + (d[2]*-1f))
  data_pack.local[0] = (data_pack.local[0] + (d[8]*-1f))
  data_pack.local[0] = (data_pack.local[0] + ((d[10]*-1f)*-1f))
  data_pack.local[1] = 0f
  data_pack.local[1] = (data_pack.local[1] + (d[1]*-1f))
  data_pack.local[1] = (data_pack.local[1] + d[2])
  data_pack.local[1] = (data_pack.local[1] + ((d[9]*-1f)*-1f))
  data_pack.local[1] = (data_pack.local[1] + (d[10]*-1f))
  data_pack.local[2] = 0f
  data_pack.local[2] = (data_pack.local[2] + d[1])
  data_pack.local[2] = (data_pack.local[2] + d[2])
  data_pack.local[2] = (data_pack.local[2] + (d[9]*-1f))
  data_pack.local[2] = (data_pack.local[2] + (d[10]*-1f))
  data_pack.local[3] = 0f
  data_pack.local[3] = (data_pack.local[3] + (d[1]*-1f))
  data_pack.local[3] = (data_pack.local[3] + d[3])
  data_pack.local[3] = (data_pack.local[3] + ((d[9]*-1f)*-1f))
  data_pack.local[3] = (data_pack.local[3] + (d[11]*-1f))
  data_pack.local[4] = 0f
  data_pack.local[4] = (data_pack.local[4] + (d[4]*-1f))
  data_pack.local[4] = (data_pack.local[4] + ((d[6]*-1f)*-1f))
  data_pack.local[4] = (data_pack.local[4] + d[8])
  data_pack.local[4] = (data_pack.local[4] + (d[10]*-1f))
  data_pack.local[5] = 0f
  data_pack.local[5] = (data_pack.local[5] + ((d[5]*-1f)*-1f))
  data_pack.local[5] = (data_pack.local[5] + (d[6]*-1f))
  data_pack.local[5] = (data_pack.local[5] + (d[9]*-1f))
  data_pack.local[5] = (data_pack.local[5] + d[10])
  data_pack.local[6] = 0f
  data_pack.local[6] = (data_pack.local[6] + (d[5]*-1f))
  data_pack.local[6] = (data_pack.local[6] + (d[6]*-1f))
  data_pack.local[6] = (data_pack.local[6] + d[9])
  data_pack.local[6] = (data_pack.local[6] + d[10])
  data_pack.local[7] = 0f
  data_pack.local[7] = (data_pack.local[7] + ((d[5]*-1f)*-1f))
  data_pack.local[7] = (data_pack.local[7] + (d[7]*-1f))
  data_pack.local[7] = (data_pack.local[7] + (d[9]*-1f))
  data_pack.local[7] = (data_pack.local[7] + d[11])
  data_pack.local[8] = 0f
  data_pack.local[8] = (data_pack.local[8] + d[4])
  data_pack.local[8] = (data_pack.local[8] + (d[6]*-1f))
  data_pack.local[8] = (data_pack.local[8] + d[8])
  data_pack.local[8] = (data_pack.local[8] + (d[10]*-1f))
  data_pack.local[9] = 0f
  data_pack.local[9] = (data_pack.local[9] + (d[5]*-1f))
  data_pack.local[9] = (data_pack.local[9] + d[6])
  data_pack.local[9] = (data_pack.local[9] + (d[9]*-1f))
  data_pack.local[9] = (data_pack.local[9] + d[10])
  data_pack.local[10] = 0f
  data_pack.local[10] = (data_pack.local[10] + d[5])
  data_pack.local[10] = (data_pack.local[10] + d[6])
  data_pack.local[10] = (data_pack.local[10] + d[9])
  data_pack.local[10] = (data_pack.local[10] + d[10])
  data_pack.local[11] = 0f
  data_pack.local[11] = (data_pack.local[11] + (d[5]*-1f))
  data_pack.local[11] = (data_pack.local[11] + d[7])
  data_pack.local[11] = (data_pack.local[11] + (d[9]*-1f))
  data_pack.local[11] = (data_pack.local[11] + d[11])
  data_pack.local[12] = 0f
  data_pack.local[12] = (data_pack.local[12] + (d[4]*-1f))
  data_pack.local[12] = (data_pack.local[12] + ((d[6]*-1f)*-1f))
  data_pack.local[12] = (data_pack.local[12] + d[12])
  data_pack.local[12] = (data_pack.local[12] + (d[14]*-1f))
  data_pack.local[13] = 0f
  data_pack.local[13] = (data_pack.local[13] + ((d[5]*-1f)*-1f))
  data_pack.local[13] = (data_pack.local[13] + (d[6]*-1f))
  data_pack.local[13] = (data_pack.local[13] + (d[13]*-1f))
  data_pack.local[13] = (data_pack.local[13] + d[14])
  data_pack.local[14] = 0f
  data_pack.local[14] = (data_pack.local[14] + (d[5]*-1f))
  data_pack.local[14] = (data_pack.local[14] + (d[6]*-1f))
  data_pack.local[14] = (data_pack.local[14] + d[13])
  data_pack.local[14] = (data_pack.local[14] + d[14])
  data_pack.local[15] = 0f
  data_pack.local[15] = (data_pack.local[15] + ((d[5]*-1f)*-1f))
  data_pack.local[15] = (data_pack.local[15] + (d[7]*-1f))
  data_pack.local[15] = (data_pack.local[15] + (d[13]*-1f))
  data_pack.local[15] = (data_pack.local[15] + d[15])
  for (eps, 0, 4) {
    for (nu, 0, 4) {
      data_pack[((((eps*50176) + (nu*12544)) + (blockIdx.x*128)) + threadIdx.x)] = data_pack.local[((eps*4) + nu)]
    }
  }
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 16
  allocate bgemm.local[float32 * 16], storage_scope = local
  allocate kernel_pack.shared[float32 * 128], storage_scope = shared
  allocate data_pack.shared[float32 * 392], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 16
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
  unrolled (co.c.init, 0, 8) {
    bgemm.local[co.c.init] = 0f
    bgemm.local[(co.c.init + 8)] = 0f
  }
  for (ci.outer, 0, 32) {
    unrolled (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer, 0, 3) {
      // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
      // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
      // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
      if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*49) + threadIdx.x) < 128)) {
        kernel_pack.shared[((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*49) + threadIdx.x)] = kernel_pack[(((((blockIdx.z*65536) + (ci.outer*2048)) + (floordiv(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*49) + threadIdx.x), 16)*256)) + (blockIdx.y*16)) + floormod(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*49) + threadIdx.x), 16))]
      }
    }
    unrolled (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer, 0, 8) {
      // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
      // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
      // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 49
      data_pack.shared[((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*49) + threadIdx.x)] = data_pack[((((blockIdx.z*12544) + (ci.outer*392)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*49)) + threadIdx.x)]
    }
    unrolled (ci.inner, 0, 8) {
      unrolled (co.c, 0, 8) {
        bgemm.local[co.c] = (bgemm.local[co.c] + (kernel_pack.shared[((ci.inner*16) + co.c)]*data_pack.shared[((ci.inner*49) + threadIdx.x)]))
        bgemm.local[(co.c + 8)] = (bgemm.local[(co.c + 8)] + (kernel_pack.shared[(((ci.inner*16) + co.c) + 8)]*data_pack.shared[((ci.inner*49) + threadIdx.x)]))
      }
    }
  }
  unrolled (co.inner.inner.inner, 0, 8) {
    bgemm[((((blockIdx.z*12544) + (blockIdx.y*784)) + (co.inner.inner.inner*49)) + threadIdx.x)] = bgemm.local[co.inner.inner.inner]
    bgemm[(((((blockIdx.z*12544) + (blockIdx.y*784)) + (co.inner.inner.inner*49)) + threadIdx.x) + 392)] = bgemm.local[(co.inner.inner.inner + 8)]
  }
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  allocate inverse[float32 * 4], storage_scope = local
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  inverse[0] = 0f
  inverse[0] = (inverse[0] + bgemm[((blockIdx.x*128) + threadIdx.x)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 12544)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 25088)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 50176)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 62720)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 75264)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)])
  inverse[1] = 0f
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 12544)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 25088)])
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 37632)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 62720)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 75264)])
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)])
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 137984)])
  inverse[2] = 0f
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 50176)]*-1f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 62720)]*-1f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 75264)]*-1f))
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 150528)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[3] = 0f
  inverse[3] = (inverse[3] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 62720)]*-1f)*-1f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 75264)]*-1f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)])
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 137984)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)])
  for (h.inner, 0, 2) {
    for (w.inner, 0, 2) {
      output[((((floordiv(((blockIdx.x*128) + threadIdx.x), 7)*28) + (h.inner*14)) + (floormod(((blockIdx.x*128) + threadIdx.x), 7)*2)) + w.inner)] = inverse[((h.inner*2) + w.inner)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_4): PrimFunc([placeholder, placeholder, compute]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_4", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 2
  allocate compute.local[float32 * 8], storage_scope = local
  allocate pad_temp.shared[float32 * 896], storage_scope = shared
  allocate placeholder.shared[float32 * 512], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 56
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
  compute.local[0] = 0f
  compute.local[2] = 0f
  compute.local[4] = 0f
  compute.local[6] = 0f
  compute.local[1] = 0f
  compute.local[3] = 0f
  compute.local[5] = 0f
  compute.local[7] = 0f
  for (rc.outer, 0, 16) {
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 4) {
      pad_temp.shared[(((threadIdx.z*112) + (threadIdx.x*4)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((rc.outer*50176) + (threadIdx.z*6272)) + (floordiv(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 56)*3136)) + (blockIdx.y*56)) + floormod(((threadIdx.x*4) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 56))]
    }
    // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 8
    // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 1
    // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 28
    for (ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner, 0, 3) {
      if ((((threadIdx.z*4) + floordiv(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)) < 32)) {
        if (((((threadIdx.z*64) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 512)) {
          if ((((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner) < 64)) {
            placeholder.shared[(((threadIdx.z*64) + (threadIdx.x*3)) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner)] = placeholder[(((((blockIdx.z*8192) + (threadIdx.z*1024)) + (floordiv(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16)*256)) + (rc.outer*16)) + floormod(((threadIdx.x*3) + ax0.ax1.fused.ax2.fused.ax3.fused.inner.inner.inner), 16))]
          }
        }
      }
    }
    for (rc.inner, 0, 16) {
      compute.local[0] = (compute.local[0] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[2] = (compute.local[2] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 128)]))
      compute.local[4] = (compute.local[4] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[6] = (compute.local[6] + (pad_temp.shared[((rc.inner*56) + threadIdx.x)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 384)]))
      compute.local[1] = (compute.local[1] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[((threadIdx.z*16) + rc.inner)]))
      compute.local[3] = (compute.local[3] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 128)]))
      compute.local[5] = (compute.local[5] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 256)]))
      compute.local[7] = (compute.local[7] + (pad_temp.shared[(((rc.inner*56) + threadIdx.x) + 28)]*placeholder.shared[(((threadIdx.z*16) + rc.inner) + 384)]))
    }
  }
  compute[((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x)] = compute.local[0]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 25088)] = compute.local[2]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 50176)] = compute.local[4]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 75264)] = compute.local[6]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 28)] = compute.local[1]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 25116)] = compute.local[3]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 50204)] = compute.local[5]
  compute[(((((blockIdx.z*100352) + (threadIdx.z*3136)) + (blockIdx.y*56)) + threadIdx.x) + 75292)] = compute.local[7]
}
, GlobalVar(tvmgen_default_fused_add_6): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_6", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_add[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)] + placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 3136)])
}
, GlobalVar(tvmgen_default_fused_add_12): PrimFunc([placeholder, placeholder, T_add]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_add_12", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  T_add[threadIdx.x] = (placeholder[threadIdx.x] + placeholder[threadIdx.x])
}
, GlobalVar(tvmgen_default_fused_nn_global_avg_pool2d): PrimFunc([placeholder, tensor]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_global_avg_pool2d", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  allocate tensor[float32 * 2048], storage_scope = global
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 64
  allocate tensor.rf[float32 * 1], storage_scope = local
  allocate reduce_temp0[float32 * 1], storage_scope = local
  // attr [iter_var(threadIdx.y, range(min=0, ext=32), threadIdx.y)] thread_extent = 32
  // attr [iter_var(threadIdx.x, range(min=0, ext=32), threadIdx.x)] thread_extent = 32
  tensor.rf[0] = 0f
  for (rv0.rv1.fused.outer, 0, 2) {
    if (((((rv0.rv1.fused.outer*32) + threadIdx.x) < 49) && (((rv0.rv1.fused.outer*32) + threadIdx.x) < 49))) {
      tensor.rf[0] = (tensor.rf[0] + placeholder[((((blockIdx.x*1568) + (threadIdx.y*49)) + (rv0.rv1.fused.outer*32)) + threadIdx.x)])
    }
  }
  // attr [comm_reducer(result=[(x + y)], lhs=[x], rhs=[y], identity_element=[0f])] reduce_scope = tir.reinterpret((uint64)0)
  tir.tvm_thread_allreduce((uint32)1, tensor.rf[0], (bool)1, reduce_temp0, threadIdx.x)
  if ((threadIdx.x == 0)) {
    tensor[((blockIdx.x*32) + threadIdx.y)] = reduce_temp0[0]
  }
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  tensor[((blockIdx.x*1024) + threadIdx.x)] = (tensor[((blockIdx.x*1024) + threadIdx.x)]*0.0204082f)
}
, GlobalVar(tvmgen_default_fused_multiply_17): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_17", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 25
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  if ((((blockIdx.x*1024) + threadIdx.x) < 25088)) {
    T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 49)])
  }
}
, GlobalVar(tvmgen_default_fused_nn_conv2d_2): PrimFunc([placeholder, placeholder, output]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_nn_conv2d_2", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  allocate kernel_pack[float32 * 147456], storage_scope = global
  allocate data_pack[float32 * 451584], storage_scope = global
  allocate bgemm[float32 * 451584], storage_scope = global
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 32
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  kernel_pack[((blockIdx.x*128) + threadIdx.x)] = 0f
  kernel_pack[((blockIdx.x*128) + threadIdx.x)] = (kernel_pack[((blockIdx.x*128) + threadIdx.x)] + placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 4096)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 4096)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 4096)] + (placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 4096)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 4096)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 4096)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 4096)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 8192)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 8192)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 8192)] + (placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 8192)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 8192)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 8192)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 8192)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 12288)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 12288)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 12288)] + (placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 12288)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 12288)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 12288)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 12288)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] + (placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 16384)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 20480)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 20480)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 20480)] + placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 24576)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 24576)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 24576)] + (placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 24576)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 24576)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 24576)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 24576)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 28672)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 32768)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-0.333333f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-0.333333f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-0.333333f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*0.333333f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.333333f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.333333f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 36864)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.333333f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-0.333333f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-0.333333f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-0.333333f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*0.333333f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.333333f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.333333f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 40960)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.333333f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 45056)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 45056)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 45056)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 45056)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 45056)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 45056)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 45056)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] + (placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 49152)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 53248)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.333333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 57344)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.333333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.333333f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.333333f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.333333f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*0.333333f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.333333f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.333333f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 61440)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.333333f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.333333f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.333333f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.333333f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*0.333333f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*0.333333f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.333333f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.333333f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 65536)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.333333f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 69632)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 69632)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 69632)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 69632)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 69632)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 69632)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 69632)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 73728)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 73728)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 73728)] + (placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 73728)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 73728)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 73728)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 73728)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-1.06667f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-1.06667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-1.06667f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.533333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*-0.533333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.533333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.266667f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.266667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 77824)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.266667f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-1.06667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-1.06667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-1.06667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.533333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*-0.533333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.533333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.266667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.266667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 81920)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.266667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-1.06667f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-1.06667f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-1.06667f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.533333f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*-0.533333f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.533333f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.266667f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.266667f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 86016)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.266667f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*-1.06667f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*-1.06667f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-1.06667f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.533333f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*-0.533333f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.533333f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.266667f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.266667f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 90112)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.266667f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 94208)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 94208)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 94208)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 94208)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 94208)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 94208)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 94208)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + (placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 98304)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.0666667f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.0666667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.0666667f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.133333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*-0.133333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.133333f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.266667f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.266667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 102400)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.266667f)*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.0666667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.0666667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.0666667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.133333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*-0.133333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.133333f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.266667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.266667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 106496)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.266667f)*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.0666667f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.0666667f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.0666667f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.133333f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*-0.133333f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.133333f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.266667f)*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.266667f)*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 110592)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.266667f)*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + ((placeholder[(((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9))]*0.0666667f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 1)]*0.0666667f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.0666667f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 3)]*-0.133333f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 4)]*-0.133333f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.133333f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.266667f)*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.266667f)*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 114688)] + ((placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.266667f)*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 118784)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 118784)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 118784)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 2)]*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 118784)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 118784)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 5)]*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 118784)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 118784)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 122880)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 122880)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 122880)] + placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)])
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 126976)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 126976)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 126976)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 126976)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 126976)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 126976)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 126976)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 131072)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.333333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 135168)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 135168)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 135168)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*-1.06667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 135168)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 135168)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.533333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 135168)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 135168)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*-0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 139264)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 139264)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 139264)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 6)]*0.0666667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 139264)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 139264)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 7)]*-0.133333f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 139264)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 139264)] + (placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)]*0.266667f))
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 143360)] = 0f
  kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 143360)] = (kernel_pack[(((blockIdx.x*128) + threadIdx.x) + 143360)] + placeholder[((((floormod(threadIdx.x, 64)*576) + (blockIdx.x*18)) + (floordiv(threadIdx.x, 64)*9)) + 8)])
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  allocate d[float32 * 36], storage_scope = local
  allocate data_pack.local[float32 * 36], storage_scope = local
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  for (eps, 0, 6) {
    for (nu, 0, 6) {
      d[((eps*6) + nu)] = tir.if_then_else(((((1 <= ((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*4) + eps)) && (((floordiv(floormod(((blockIdx.x*128) + threadIdx.x), 196), 14)*4) + eps) < 57)) && (1 <= ((floormod(((blockIdx.x*128) + threadIdx.x), 14)*4) + nu))) && (((floormod(((blockIdx.x*128) + threadIdx.x), 14)*4) + nu) < 57)), placeholder[(((((floordiv(((blockIdx.x*128) + threadIdx.x), 14)*224) + (eps*56)) + (floormod(((blockIdx.x*128) + threadIdx.x), 14)*4)) + nu) - 57)], 0f)
    }
  }
  data_pack.local[0] = 0f
  data_pack.local[0] = (data_pack.local[0] + d[0])
  data_pack.local[0] = (data_pack.local[0] + (d[1]*-1.5f))
  data_pack.local[0] = (data_pack.local[0] + (d[2]*-2f))
  data_pack.local[0] = (data_pack.local[0] + (d[3]*1.5f))
  data_pack.local[0] = (data_pack.local[0] + d[4])
  data_pack.local[0] = (data_pack.local[0] + (d[6]*-1.5f))
  data_pack.local[0] = (data_pack.local[0] + ((d[7]*-1.5f)*-1.5f))
  data_pack.local[0] = (data_pack.local[0] + ((d[8]*-1.5f)*-2f))
  data_pack.local[0] = (data_pack.local[0] + ((d[9]*-1.5f)*1.5f))
  data_pack.local[0] = (data_pack.local[0] + (d[10]*-1.5f))
  data_pack.local[0] = (data_pack.local[0] + (d[12]*-2f))
  data_pack.local[0] = (data_pack.local[0] + ((d[13]*-2f)*-1.5f))
  data_pack.local[0] = (data_pack.local[0] + ((d[14]*-2f)*-2f))
  data_pack.local[0] = (data_pack.local[0] + ((d[15]*-2f)*1.5f))
  data_pack.local[0] = (data_pack.local[0] + (d[16]*-2f))
  data_pack.local[0] = (data_pack.local[0] + (d[18]*1.5f))
  data_pack.local[0] = (data_pack.local[0] + ((d[19]*1.5f)*-1.5f))
  data_pack.local[0] = (data_pack.local[0] + ((d[20]*1.5f)*-2f))
  data_pack.local[0] = (data_pack.local[0] + ((d[21]*1.5f)*1.5f))
  data_pack.local[0] = (data_pack.local[0] + (d[22]*1.5f))
  data_pack.local[0] = (data_pack.local[0] + d[24])
  data_pack.local[0] = (data_pack.local[0] + (d[25]*-1.5f))
  data_pack.local[0] = (data_pack.local[0] + (d[26]*-2f))
  data_pack.local[0] = (data_pack.local[0] + (d[27]*1.5f))
  data_pack.local[0] = (data_pack.local[0] + d[28])
  data_pack.local[1] = 0f
  data_pack.local[1] = (data_pack.local[1] + d[1])
  data_pack.local[1] = (data_pack.local[1] + (d[2]*-2.5f))
  data_pack.local[1] = (data_pack.local[1] + (d[3]*0.5f))
  data_pack.local[1] = (data_pack.local[1] + d[4])
  data_pack.local[1] = (data_pack.local[1] + (d[7]*-1.5f))
  data_pack.local[1] = (data_pack.local[1] + ((d[8]*-1.5f)*-2.5f))
  data_pack.local[1] = (data_pack.local[1] + ((d[9]*-1.5f)*0.5f))
  data_pack.local[1] = (data_pack.local[1] + (d[10]*-1.5f))
  data_pack.local[1] = (data_pack.local[1] + (d[13]*-2f))
  data_pack.local[1] = (data_pack.local[1] + ((d[14]*-2f)*-2.5f))
  data_pack.local[1] = (data_pack.local[1] + ((d[15]*-2f)*0.5f))
  data_pack.local[1] = (data_pack.local[1] + (d[16]*-2f))
  data_pack.local[1] = (data_pack.local[1] + (d[19]*1.5f))
  data_pack.local[1] = (data_pack.local[1] + ((d[20]*1.5f)*-2.5f))
  data_pack.local[1] = (data_pack.local[1] + ((d[21]*1.5f)*0.5f))
  data_pack.local[1] = (data_pack.local[1] + (d[22]*1.5f))
  data_pack.local[1] = (data_pack.local[1] + d[25])
  data_pack.local[1] = (data_pack.local[1] + (d[26]*-2.5f))
  data_pack.local[1] = (data_pack.local[1] + (d[27]*0.5f))
  data_pack.local[1] = (data_pack.local[1] + d[28])
  data_pack.local[2] = 0f
  data_pack.local[2] = (data_pack.local[2] + (d[1]*-1f))
  data_pack.local[2] = (data_pack.local[2] + (d[2]*0.5f))
  data_pack.local[2] = (data_pack.local[2] + (d[3]*2.5f))
  data_pack.local[2] = (data_pack.local[2] + d[4])
  data_pack.local[2] = (data_pack.local[2] + ((d[7]*-1.5f)*-1f))
  data_pack.local[2] = (data_pack.local[2] + ((d[8]*-1.5f)*0.5f))
  data_pack.local[2] = (data_pack.local[2] + ((d[9]*-1.5f)*2.5f))
  data_pack.local[2] = (data_pack.local[2] + (d[10]*-1.5f))
  data_pack.local[2] = (data_pack.local[2] + ((d[13]*-2f)*-1f))
  data_pack.local[2] = (data_pack.local[2] + ((d[14]*-2f)*0.5f))
  data_pack.local[2] = (data_pack.local[2] + ((d[15]*-2f)*2.5f))
  data_pack.local[2] = (data_pack.local[2] + (d[16]*-2f))
  data_pack.local[2] = (data_pack.local[2] + ((d[19]*1.5f)*-1f))
  data_pack.local[2] = (data_pack.local[2] + ((d[20]*1.5f)*0.5f))
  data_pack.local[2] = (data_pack.local[2] + ((d[21]*1.5f)*2.5f))
  data_pack.local[2] = (data_pack.local[2] + (d[22]*1.5f))
  data_pack.local[2] = (data_pack.local[2] + (d[25]*-1f))
  data_pack.local[2] = (data_pack.local[2] + (d[26]*0.5f))
  data_pack.local[2] = (data_pack.local[2] + (d[27]*2.5f))
  data_pack.local[2] = (data_pack.local[2] + d[28])
  data_pack.local[3] = 0f
  data_pack.local[3] = (data_pack.local[3] + (d[1]*-2f))
  data_pack.local[3] = (data_pack.local[3] + (d[2]*-1f))
  data_pack.local[3] = (data_pack.local[3] + (d[3]*2f))
  data_pack.local[3] = (data_pack.local[3] + d[4])
  data_pack.local[3] = (data_pack.local[3] + ((d[7]*-1.5f)*-2f))
  data_pack.local[3] = (data_pack.local[3] + ((d[8]*-1.5f)*-1f))
  data_pack.local[3] = (data_pack.local[3] + ((d[9]*-1.5f)*2f))
  data_pack.local[3] = (data_pack.local[3] + (d[10]*-1.5f))
  data_pack.local[3] = (data_pack.local[3] + ((d[13]*-2f)*-2f))
  data_pack.local[3] = (data_pack.local[3] + ((d[14]*-2f)*-1f))
  data_pack.local[3] = (data_pack.local[3] + ((d[15]*-2f)*2f))
  data_pack.local[3] = (data_pack.local[3] + (d[16]*-2f))
  data_pack.local[3] = (data_pack.local[3] + ((d[19]*1.5f)*-2f))
  data_pack.local[3] = (data_pack.local[3] + ((d[20]*1.5f)*-1f))
  data_pack.local[3] = (data_pack.local[3] + ((d[21]*1.5f)*2f))
  data_pack.local[3] = (data_pack.local[3] + (d[22]*1.5f))
  data_pack.local[3] = (data_pack.local[3] + (d[25]*-2f))
  data_pack.local[3] = (data_pack.local[3] + (d[26]*-1f))
  data_pack.local[3] = (data_pack.local[3] + (d[27]*2f))
  data_pack.local[3] = (data_pack.local[3] + d[28])
  data_pack.local[4] = 0f
  data_pack.local[4] = (data_pack.local[4] + (d[1]*0.5f))
  data_pack.local[4] = (data_pack.local[4] + (d[2]*-1f))
  data_pack.local[4] = (data_pack.local[4] + (d[3]*-0.5f))
  data_pack.local[4] = (data_pack.local[4] + d[4])
  data_pack.local[4] = (data_pack.local[4] + ((d[7]*-1.5f)*0.5f))
  data_pack.local[4] = (data_pack.local[4] + ((d[8]*-1.5f)*-1f))
  data_pack.local[4] = (data_pack.local[4] + ((d[9]*-1.5f)*-0.5f))
  data_pack.local[4] = (data_pack.local[4] + (d[10]*-1.5f))
  data_pack.local[4] = (data_pack.local[4] + ((d[13]*-2f)*0.5f))
  data_pack.local[4] = (data_pack.local[4] + ((d[14]*-2f)*-1f))
  data_pack.local[4] = (data_pack.local[4] + ((d[15]*-2f)*-0.5f))
  data_pack.local[4] = (data_pack.local[4] + (d[16]*-2f))
  data_pack.local[4] = (data_pack.local[4] + ((d[19]*1.5f)*0.5f))
  data_pack.local[4] = (data_pack.local[4] + ((d[20]*1.5f)*-1f))
  data_pack.local[4] = (data_pack.local[4] + ((d[21]*1.5f)*-0.5f))
  data_pack.local[4] = (data_pack.local[4] + (d[22]*1.5f))
  data_pack.local[4] = (data_pack.local[4] + (d[25]*0.5f))
  data_pack.local[4] = (data_pack.local[4] + (d[26]*-1f))
  data_pack.local[4] = (data_pack.local[4] + (d[27]*-0.5f))
  data_pack.local[4] = (data_pack.local[4] + d[28])
  data_pack.local[5] = 0f
  data_pack.local[5] = (data_pack.local[5] + d[1])
  data_pack.local[5] = (data_pack.local[5] + (d[2]*-1.5f))
  data_pack.local[5] = (data_pack.local[5] + (d[3]*-2f))
  data_pack.local[5] = (data_pack.local[5] + (d[4]*1.5f))
  data_pack.local[5] = (data_pack.local[5] + d[5])
  data_pack.local[5] = (data_pack.local[5] + (d[7]*-1.5f))
  data_pack.local[5] = (data_pack.local[5] + ((d[8]*-1.5f)*-1.5f))
  data_pack.local[5] = (data_pack.local[5] + ((d[9]*-1.5f)*-2f))
  data_pack.local[5] = (data_pack.local[5] + ((d[10]*-1.5f)*1.5f))
  data_pack.local[5] = (data_pack.local[5] + (d[11]*-1.5f))
  data_pack.local[5] = (data_pack.local[5] + (d[13]*-2f))
  data_pack.local[5] = (data_pack.local[5] + ((d[14]*-2f)*-1.5f))
  data_pack.local[5] = (data_pack.local[5] + ((d[15]*-2f)*-2f))
  data_pack.local[5] = (data_pack.local[5] + ((d[16]*-2f)*1.5f))
  data_pack.local[5] = (data_pack.local[5] + (d[17]*-2f))
  data_pack.local[5] = (data_pack.local[5] + (d[19]*1.5f))
  data_pack.local[5] = (data_pack.local[5] + ((d[20]*1.5f)*-1.5f))
  data_pack.local[5] = (data_pack.local[5] + ((d[21]*1.5f)*-2f))
  data_pack.local[5] = (data_pack.local[5] + ((d[22]*1.5f)*1.5f))
  data_pack.local[5] = (data_pack.local[5] + (d[23]*1.5f))
  data_pack.local[5] = (data_pack.local[5] + d[25])
  data_pack.local[5] = (data_pack.local[5] + (d[26]*-1.5f))
  data_pack.local[5] = (data_pack.local[5] + (d[27]*-2f))
  data_pack.local[5] = (data_pack.local[5] + (d[28]*1.5f))
  data_pack.local[5] = (data_pack.local[5] + d[29])
  data_pack.local[6] = 0f
  data_pack.local[6] = (data_pack.local[6] + d[6])
  data_pack.local[6] = (data_pack.local[6] + (d[7]*-1.5f))
  data_pack.local[6] = (data_pack.local[6] + (d[8]*-2f))
  data_pack.local[6] = (data_pack.local[6] + (d[9]*1.5f))
  data_pack.local[6] = (data_pack.local[6] + d[10])
  data_pack.local[6] = (data_pack.local[6] + (d[12]*-2.5f))
  data_pack.local[6] = (data_pack.local[6] + ((d[13]*-2.5f)*-1.5f))
  data_pack.local[6] = (data_pack.local[6] + ((d[14]*-2.5f)*-2f))
  data_pack.local[6] = (data_pack.local[6] + ((d[15]*-2.5f)*1.5f))
  data_pack.local[6] = (data_pack.local[6] + (d[16]*-2.5f))
  data_pack.local[6] = (data_pack.local[6] + (d[18]*0.5f))
  data_pack.local[6] = (data_pack.local[6] + ((d[19]*0.5f)*-1.5f))
  data_pack.local[6] = (data_pack.local[6] + ((d[20]*0.5f)*-2f))
  data_pack.local[6] = (data_pack.local[6] + ((d[21]*0.5f)*1.5f))
  data_pack.local[6] = (data_pack.local[6] + (d[22]*0.5f))
  data_pack.local[6] = (data_pack.local[6] + d[24])
  data_pack.local[6] = (data_pack.local[6] + (d[25]*-1.5f))
  data_pack.local[6] = (data_pack.local[6] + (d[26]*-2f))
  data_pack.local[6] = (data_pack.local[6] + (d[27]*1.5f))
  data_pack.local[6] = (data_pack.local[6] + d[28])
  data_pack.local[7] = 0f
  data_pack.local[7] = (data_pack.local[7] + d[7])
  data_pack.local[7] = (data_pack.local[7] + (d[8]*-2.5f))
  data_pack.local[7] = (data_pack.local[7] + (d[9]*0.5f))
  data_pack.local[7] = (data_pack.local[7] + d[10])
  data_pack.local[7] = (data_pack.local[7] + (d[13]*-2.5f))
  data_pack.local[7] = (data_pack.local[7] + ((d[14]*-2.5f)*-2.5f))
  data_pack.local[7] = (data_pack.local[7] + ((d[15]*-2.5f)*0.5f))
  data_pack.local[7] = (data_pack.local[7] + (d[16]*-2.5f))
  data_pack.local[7] = (data_pack.local[7] + (d[19]*0.5f))
  data_pack.local[7] = (data_pack.local[7] + ((d[20]*0.5f)*-2.5f))
  data_pack.local[7] = (data_pack.local[7] + ((d[21]*0.5f)*0.5f))
  data_pack.local[7] = (data_pack.local[7] + (d[22]*0.5f))
  data_pack.local[7] = (data_pack.local[7] + d[25])
  data_pack.local[7] = (data_pack.local[7] + (d[26]*-2.5f))
  data_pack.local[7] = (data_pack.local[7] + (d[27]*0.5f))
  data_pack.local[7] = (data_pack.local[7] + d[28])
  data_pack.local[8] = 0f
  data_pack.local[8] = (data_pack.local[8] + (d[7]*-1f))
  data_pack.local[8] = (data_pack.local[8] + (d[8]*0.5f))
  data_pack.local[8] = (data_pack.local[8] + (d[9]*2.5f))
  data_pack.local[8] = (data_pack.local[8] + d[10])
  data_pack.local[8] = (data_pack.local[8] + ((d[13]*-2.5f)*-1f))
  data_pack.local[8] = (data_pack.local[8] + ((d[14]*-2.5f)*0.5f))
  data_pack.local[8] = (data_pack.local[8] + ((d[15]*-2.5f)*2.5f))
  data_pack.local[8] = (data_pack.local[8] + (d[16]*-2.5f))
  data_pack.local[8] = (data_pack.local[8] + ((d[19]*0.5f)*-1f))
  data_pack.local[8] = (data_pack.local[8] + ((d[20]*0.5f)*0.5f))
  data_pack.local[8] = (data_pack.local[8] + ((d[21]*0.5f)*2.5f))
  data_pack.local[8] = (data_pack.local[8] + (d[22]*0.5f))
  data_pack.local[8] = (data_pack.local[8] + (d[25]*-1f))
  data_pack.local[8] = (data_pack.local[8] + (d[26]*0.5f))
  data_pack.local[8] = (data_pack.local[8] + (d[27]*2.5f))
  data_pack.local[8] = (data_pack.local[8] + d[28])
  data_pack.local[9] = 0f
  data_pack.local[9] = (data_pack.local[9] + (d[7]*-2f))
  data_pack.local[9] = (data_pack.local[9] + (d[8]*-1f))
  data_pack.local[9] = (data_pack.local[9] + (d[9]*2f))
  data_pack.local[9] = (data_pack.local[9] + d[10])
  data_pack.local[9] = (data_pack.local[9] + ((d[13]*-2.5f)*-2f))
  data_pack.local[9] = (data_pack.local[9] + ((d[14]*-2.5f)*-1f))
  data_pack.local[9] = (data_pack.local[9] + ((d[15]*-2.5f)*2f))
  data_pack.local[9] = (data_pack.local[9] + (d[16]*-2.5f))
  data_pack.local[9] = (data_pack.local[9] + ((d[19]*0.5f)*-2f))
  data_pack.local[9] = (data_pack.local[9] + ((d[20]*0.5f)*-1f))
  data_pack.local[9] = (data_pack.local[9] + ((d[21]*0.5f)*2f))
  data_pack.local[9] = (data_pack.local[9] + (d[22]*0.5f))
  data_pack.local[9] = (data_pack.local[9] + (d[25]*-2f))
  data_pack.local[9] = (data_pack.local[9] + (d[26]*-1f))
  data_pack.local[9] = (data_pack.local[9] + (d[27]*2f))
  data_pack.local[9] = (data_pack.local[9] + d[28])
  data_pack.local[10] = 0f
  data_pack.local[10] = (data_pack.local[10] + (d[7]*0.5f))
  data_pack.local[10] = (data_pack.local[10] + (d[8]*-1f))
  data_pack.local[10] = (data_pack.local[10] + (d[9]*-0.5f))
  data_pack.local[10] = (data_pack.local[10] + d[10])
  data_pack.local[10] = (data_pack.local[10] + ((d[13]*-2.5f)*0.5f))
  data_pack.local[10] = (data_pack.local[10] + ((d[14]*-2.5f)*-1f))
  data_pack.local[10] = (data_pack.local[10] + ((d[15]*-2.5f)*-0.5f))
  data_pack.local[10] = (data_pack.local[10] + (d[16]*-2.5f))
  data_pack.local[10] = (data_pack.local[10] + ((d[19]*0.5f)*0.5f))
  data_pack.local[10] = (data_pack.local[10] + ((d[20]*0.5f)*-1f))
  data_pack.local[10] = (data_pack.local[10] + ((d[21]*0.5f)*-0.5f))
  data_pack.local[10] = (data_pack.local[10] + (d[22]*0.5f))
  data_pack.local[10] = (data_pack.local[10] + (d[25]*0.5f))
  data_pack.local[10] = (data_pack.local[10] + (d[26]*-1f))
  data_pack.local[10] = (data_pack.local[10] + (d[27]*-0.5f))
  data_pack.local[10] = (data_pack.local[10] + d[28])
  data_pack.local[11] = 0f
  data_pack.local[11] = (data_pack.local[11] + d[7])
  data_pack.local[11] = (data_pack.local[11] + (d[8]*-1.5f))
  data_pack.local[11] = (data_pack.local[11] + (d[9]*-2f))
  data_pack.local[11] = (data_pack.local[11] + (d[10]*1.5f))
  data_pack.local[11] = (data_pack.local[11] + d[11])
  data_pack.local[11] = (data_pack.local[11] + (d[13]*-2.5f))
  data_pack.local[11] = (data_pack.local[11] + ((d[14]*-2.5f)*-1.5f))
  data_pack.local[11] = (data_pack.local[11] + ((d[15]*-2.5f)*-2f))
  data_pack.local[11] = (data_pack.local[11] + ((d[16]*-2.5f)*1.5f))
  data_pack.local[11] = (data_pack.local[11] + (d[17]*-2.5f))
  data_pack.local[11] = (data_pack.local[11] + (d[19]*0.5f))
  data_pack.local[11] = (data_pack.local[11] + ((d[20]*0.5f)*-1.5f))
  data_pack.local[11] = (data_pack.local[11] + ((d[21]*0.5f)*-2f))
  data_pack.local[11] = (data_pack.local[11] + ((d[22]*0.5f)*1.5f))
  data_pack.local[11] = (data_pack.local[11] + (d[23]*0.5f))
  data_pack.local[11] = (data_pack.local[11] + d[25])
  data_pack.local[11] = (data_pack.local[11] + (d[26]*-1.5f))
  data_pack.local[11] = (data_pack.local[11] + (d[27]*-2f))
  data_pack.local[11] = (data_pack.local[11] + (d[28]*1.5f))
  data_pack.local[11] = (data_pack.local[11] + d[29])
  data_pack.local[12] = 0f
  data_pack.local[12] = (data_pack.local[12] + (d[6]*-1f))
  data_pack.local[12] = (data_pack.local[12] + ((d[7]*-1f)*-1.5f))
  data_pack.local[12] = (data_pack.local[12] + ((d[8]*-1f)*-2f))
  data_pack.local[12] = (data_pack.local[12] + ((d[9]*-1f)*1.5f))
  data_pack.local[12] = (data_pack.local[12] + (d[10]*-1f))
  data_pack.local[12] = (data_pack.local[12] + (d[12]*0.5f))
  data_pack.local[12] = (data_pack.local[12] + ((d[13]*0.5f)*-1.5f))
  data_pack.local[12] = (data_pack.local[12] + ((d[14]*0.5f)*-2f))
  data_pack.local[12] = (data_pack.local[12] + ((d[15]*0.5f)*1.5f))
  data_pack.local[12] = (data_pack.local[12] + (d[16]*0.5f))
  data_pack.local[12] = (data_pack.local[12] + (d[18]*2.5f))
  data_pack.local[12] = (data_pack.local[12] + ((d[19]*2.5f)*-1.5f))
  data_pack.local[12] = (data_pack.local[12] + ((d[20]*2.5f)*-2f))
  data_pack.local[12] = (data_pack.local[12] + ((d[21]*2.5f)*1.5f))
  data_pack.local[12] = (data_pack.local[12] + (d[22]*2.5f))
  data_pack.local[12] = (data_pack.local[12] + d[24])
  data_pack.local[12] = (data_pack.local[12] + (d[25]*-1.5f))
  data_pack.local[12] = (data_pack.local[12] + (d[26]*-2f))
  data_pack.local[12] = (data_pack.local[12] + (d[27]*1.5f))
  data_pack.local[12] = (data_pack.local[12] + d[28])
  data_pack.local[13] = 0f
  data_pack.local[13] = (data_pack.local[13] + (d[7]*-1f))
  data_pack.local[13] = (data_pack.local[13] + ((d[8]*-1f)*-2.5f))
  data_pack.local[13] = (data_pack.local[13] + ((d[9]*-1f)*0.5f))
  data_pack.local[13] = (data_pack.local[13] + (d[10]*-1f))
  data_pack.local[13] = (data_pack.local[13] + (d[13]*0.5f))
  data_pack.local[13] = (data_pack.local[13] + ((d[14]*0.5f)*-2.5f))
  data_pack.local[13] = (data_pack.local[13] + ((d[15]*0.5f)*0.5f))
  data_pack.local[13] = (data_pack.local[13] + (d[16]*0.5f))
  data_pack.local[13] = (data_pack.local[13] + (d[19]*2.5f))
  data_pack.local[13] = (data_pack.local[13] + ((d[20]*2.5f)*-2.5f))
  data_pack.local[13] = (data_pack.local[13] + ((d[21]*2.5f)*0.5f))
  data_pack.local[13] = (data_pack.local[13] + (d[22]*2.5f))
  data_pack.local[13] = (data_pack.local[13] + d[25])
  data_pack.local[13] = (data_pack.local[13] + (d[26]*-2.5f))
  data_pack.local[13] = (data_pack.local[13] + (d[27]*0.5f))
  data_pack.local[13] = (data_pack.local[13] + d[28])
  data_pack.local[14] = 0f
  data_pack.local[14] = (data_pack.local[14] + ((d[7]*-1f)*-1f))
  data_pack.local[14] = (data_pack.local[14] + ((d[8]*-1f)*0.5f))
  data_pack.local[14] = (data_pack.local[14] + ((d[9]*-1f)*2.5f))
  data_pack.local[14] = (data_pack.local[14] + (d[10]*-1f))
  data_pack.local[14] = (data_pack.local[14] + ((d[13]*0.5f)*-1f))
  data_pack.local[14] = (data_pack.local[14] + ((d[14]*0.5f)*0.5f))
  data_pack.local[14] = (data_pack.local[14] + ((d[15]*0.5f)*2.5f))
  data_pack.local[14] = (data_pack.local[14] + (d[16]*0.5f))
  data_pack.local[14] = (data_pack.local[14] + ((d[19]*2.5f)*-1f))
  data_pack.local[14] = (data_pack.local[14] + ((d[20]*2.5f)*0.5f))
  data_pack.local[14] = (data_pack.local[14] + ((d[21]*2.5f)*2.5f))
  data_pack.local[14] = (data_pack.local[14] + (d[22]*2.5f))
  data_pack.local[14] = (data_pack.local[14] + (d[25]*-1f))
  data_pack.local[14] = (data_pack.local[14] + (d[26]*0.5f))
  data_pack.local[14] = (data_pack.local[14] + (d[27]*2.5f))
  data_pack.local[14] = (data_pack.local[14] + d[28])
  data_pack.local[15] = 0f
  data_pack.local[15] = (data_pack.local[15] + ((d[7]*-1f)*-2f))
  data_pack.local[15] = (data_pack.local[15] + ((d[8]*-1f)*-1f))
  data_pack.local[15] = (data_pack.local[15] + ((d[9]*-1f)*2f))
  data_pack.local[15] = (data_pack.local[15] + (d[10]*-1f))
  data_pack.local[15] = (data_pack.local[15] + ((d[13]*0.5f)*-2f))
  data_pack.local[15] = (data_pack.local[15] + ((d[14]*0.5f)*-1f))
  data_pack.local[15] = (data_pack.local[15] + ((d[15]*0.5f)*2f))
  data_pack.local[15] = (data_pack.local[15] + (d[16]*0.5f))
  data_pack.local[15] = (data_pack.local[15] + ((d[19]*2.5f)*-2f))
  data_pack.local[15] = (data_pack.local[15] + ((d[20]*2.5f)*-1f))
  data_pack.local[15] = (data_pack.local[15] + ((d[21]*2.5f)*2f))
  data_pack.local[15] = (data_pack.local[15] + (d[22]*2.5f))
  data_pack.local[15] = (data_pack.local[15] + (d[25]*-2f))
  data_pack.local[15] = (data_pack.local[15] + (d[26]*-1f))
  data_pack.local[15] = (data_pack.local[15] + (d[27]*2f))
  data_pack.local[15] = (data_pack.local[15] + d[28])
  data_pack.local[16] = 0f
  data_pack.local[16] = (data_pack.local[16] + ((d[7]*-1f)*0.5f))
  data_pack.local[16] = (data_pack.local[16] + ((d[8]*-1f)*-1f))
  data_pack.local[16] = (data_pack.local[16] + ((d[9]*-1f)*-0.5f))
  data_pack.local[16] = (data_pack.local[16] + (d[10]*-1f))
  data_pack.local[16] = (data_pack.local[16] + ((d[13]*0.5f)*0.5f))
  data_pack.local[16] = (data_pack.local[16] + ((d[14]*0.5f)*-1f))
  data_pack.local[16] = (data_pack.local[16] + ((d[15]*0.5f)*-0.5f))
  data_pack.local[16] = (data_pack.local[16] + (d[16]*0.5f))
  data_pack.local[16] = (data_pack.local[16] + ((d[19]*2.5f)*0.5f))
  data_pack.local[16] = (data_pack.local[16] + ((d[20]*2.5f)*-1f))
  data_pack.local[16] = (data_pack.local[16] + ((d[21]*2.5f)*-0.5f))
  data_pack.local[16] = (data_pack.local[16] + (d[22]*2.5f))
  data_pack.local[16] = (data_pack.local[16] + (d[25]*0.5f))
  data_pack.local[16] = (data_pack.local[16] + (d[26]*-1f))
  data_pack.local[16] = (data_pack.local[16] + (d[27]*-0.5f))
  data_pack.local[16] = (data_pack.local[16] + d[28])
  data_pack.local[17] = 0f
  data_pack.local[17] = (data_pack.local[17] + (d[7]*-1f))
  data_pack.local[17] = (data_pack.local[17] + ((d[8]*-1f)*-1.5f))
  data_pack.local[17] = (data_pack.local[17] + ((d[9]*-1f)*-2f))
  data_pack.local[17] = (data_pack.local[17] + ((d[10]*-1f)*1.5f))
  data_pack.local[17] = (data_pack.local[17] + (d[11]*-1f))
  data_pack.local[17] = (data_pack.local[17] + (d[13]*0.5f))
  data_pack.local[17] = (data_pack.local[17] + ((d[14]*0.5f)*-1.5f))
  data_pack.local[17] = (data_pack.local[17] + ((d[15]*0.5f)*-2f))
  data_pack.local[17] = (data_pack.local[17] + ((d[16]*0.5f)*1.5f))
  data_pack.local[17] = (data_pack.local[17] + (d[17]*0.5f))
  data_pack.local[17] = (data_pack.local[17] + (d[19]*2.5f))
  data_pack.local[17] = (data_pack.local[17] + ((d[20]*2.5f)*-1.5f))
  data_pack.local[17] = (data_pack.local[17] + ((d[21]*2.5f)*-2f))
  data_pack.local[17] = (data_pack.local[17] + ((d[22]*2.5f)*1.5f))
  data_pack.local[17] = (data_pack.local[17] + (d[23]*2.5f))
  data_pack.local[17] = (data_pack.local[17] + d[25])
  data_pack.local[17] = (data_pack.local[17] + (d[26]*-1.5f))
  data_pack.local[17] = (data_pack.local[17] + (d[27]*-2f))
  data_pack.local[17] = (data_pack.local[17] + (d[28]*1.5f))
  data_pack.local[17] = (data_pack.local[17] + d[29])
  data_pack.local[18] = 0f
  data_pack.local[18] = (data_pack.local[18] + (d[6]*-2f))
  data_pack.local[18] = (data_pack.local[18] + ((d[7]*-2f)*-1.5f))
  data_pack.local[18] = (data_pack.local[18] + ((d[8]*-2f)*-2f))
  data_pack.local[18] = (data_pack.local[18] + ((d[9]*-2f)*1.5f))
  data_pack.local[18] = (data_pack.local[18] + (d[10]*-2f))
  data_pack.local[18] = (data_pack.local[18] + (d[12]*-1f))
  data_pack.local[18] = (data_pack.local[18] + ((d[13]*-1f)*-1.5f))
  data_pack.local[18] = (data_pack.local[18] + ((d[14]*-1f)*-2f))
  data_pack.local[18] = (data_pack.local[18] + ((d[15]*-1f)*1.5f))
  data_pack.local[18] = (data_pack.local[18] + (d[16]*-1f))
  data_pack.local[18] = (data_pack.local[18] + (d[18]*2f))
  data_pack.local[18] = (data_pack.local[18] + ((d[19]*2f)*-1.5f))
  data_pack.local[18] = (data_pack.local[18] + ((d[20]*2f)*-2f))
  data_pack.local[18] = (data_pack.local[18] + ((d[21]*2f)*1.5f))
  data_pack.local[18] = (data_pack.local[18] + (d[22]*2f))
  data_pack.local[18] = (data_pack.local[18] + d[24])
  data_pack.local[18] = (data_pack.local[18] + (d[25]*-1.5f))
  data_pack.local[18] = (data_pack.local[18] + (d[26]*-2f))
  data_pack.local[18] = (data_pack.local[18] + (d[27]*1.5f))
  data_pack.local[18] = (data_pack.local[18] + d[28])
  data_pack.local[19] = 0f
  data_pack.local[19] = (data_pack.local[19] + (d[7]*-2f))
  data_pack.local[19] = (data_pack.local[19] + ((d[8]*-2f)*-2.5f))
  data_pack.local[19] = (data_pack.local[19] + ((d[9]*-2f)*0.5f))
  data_pack.local[19] = (data_pack.local[19] + (d[10]*-2f))
  data_pack.local[19] = (data_pack.local[19] + (d[13]*-1f))
  data_pack.local[19] = (data_pack.local[19] + ((d[14]*-1f)*-2.5f))
  data_pack.local[19] = (data_pack.local[19] + ((d[15]*-1f)*0.5f))
  data_pack.local[19] = (data_pack.local[19] + (d[16]*-1f))
  data_pack.local[19] = (data_pack.local[19] + (d[19]*2f))
  data_pack.local[19] = (data_pack.local[19] + ((d[20]*2f)*-2.5f))
  data_pack.local[19] = (data_pack.local[19] + ((d[21]*2f)*0.5f))
  data_pack.local[19] = (data_pack.local[19] + (d[22]*2f))
  data_pack.local[19] = (data_pack.local[19] + d[25])
  data_pack.local[19] = (data_pack.local[19] + (d[26]*-2.5f))
  data_pack.local[19] = (data_pack.local[19] + (d[27]*0.5f))
  data_pack.local[19] = (data_pack.local[19] + d[28])
  data_pack.local[20] = 0f
  data_pack.local[20] = (data_pack.local[20] + ((d[7]*-2f)*-1f))
  data_pack.local[20] = (data_pack.local[20] + ((d[8]*-2f)*0.5f))
  data_pack.local[20] = (data_pack.local[20] + ((d[9]*-2f)*2.5f))
  data_pack.local[20] = (data_pack.local[20] + (d[10]*-2f))
  data_pack.local[20] = (data_pack.local[20] + ((d[13]*-1f)*-1f))
  data_pack.local[20] = (data_pack.local[20] + ((d[14]*-1f)*0.5f))
  data_pack.local[20] = (data_pack.local[20] + ((d[15]*-1f)*2.5f))
  data_pack.local[20] = (data_pack.local[20] + (d[16]*-1f))
  data_pack.local[20] = (data_pack.local[20] + ((d[19]*2f)*-1f))
  data_pack.local[20] = (data_pack.local[20] + ((d[20]*2f)*0.5f))
  data_pack.local[20] = (data_pack.local[20] + ((d[21]*2f)*2.5f))
  data_pack.local[20] = (data_pack.local[20] + (d[22]*2f))
  data_pack.local[20] = (data_pack.local[20] + (d[25]*-1f))
  data_pack.local[20] = (data_pack.local[20] + (d[26]*0.5f))
  data_pack.local[20] = (data_pack.local[20] + (d[27]*2.5f))
  data_pack.local[20] = (data_pack.local[20] + d[28])
  data_pack.local[21] = 0f
  data_pack.local[21] = (data_pack.local[21] + ((d[7]*-2f)*-2f))
  data_pack.local[21] = (data_pack.local[21] + ((d[8]*-2f)*-1f))
  data_pack.local[21] = (data_pack.local[21] + ((d[9]*-2f)*2f))
  data_pack.local[21] = (data_pack.local[21] + (d[10]*-2f))
  data_pack.local[21] = (data_pack.local[21] + ((d[13]*-1f)*-2f))
  data_pack.local[21] = (data_pack.local[21] + ((d[14]*-1f)*-1f))
  data_pack.local[21] = (data_pack.local[21] + ((d[15]*-1f)*2f))
  data_pack.local[21] = (data_pack.local[21] + (d[16]*-1f))
  data_pack.local[21] = (data_pack.local[21] + ((d[19]*2f)*-2f))
  data_pack.local[21] = (data_pack.local[21] + ((d[20]*2f)*-1f))
  data_pack.local[21] = (data_pack.local[21] + ((d[21]*2f)*2f))
  data_pack.local[21] = (data_pack.local[21] + (d[22]*2f))
  data_pack.local[21] = (data_pack.local[21] + (d[25]*-2f))
  data_pack.local[21] = (data_pack.local[21] + (d[26]*-1f))
  data_pack.local[21] = (data_pack.local[21] + (d[27]*2f))
  data_pack.local[21] = (data_pack.local[21] + d[28])
  data_pack.local[22] = 0f
  data_pack.local[22] = (data_pack.local[22] + ((d[7]*-2f)*0.5f))
  data_pack.local[22] = (data_pack.local[22] + ((d[8]*-2f)*-1f))
  data_pack.local[22] = (data_pack.local[22] + ((d[9]*-2f)*-0.5f))
  data_pack.local[22] = (data_pack.local[22] + (d[10]*-2f))
  data_pack.local[22] = (data_pack.local[22] + ((d[13]*-1f)*0.5f))
  data_pack.local[22] = (data_pack.local[22] + ((d[14]*-1f)*-1f))
  data_pack.local[22] = (data_pack.local[22] + ((d[15]*-1f)*-0.5f))
  data_pack.local[22] = (data_pack.local[22] + (d[16]*-1f))
  data_pack.local[22] = (data_pack.local[22] + ((d[19]*2f)*0.5f))
  data_pack.local[22] = (data_pack.local[22] + ((d[20]*2f)*-1f))
  data_pack.local[22] = (data_pack.local[22] + ((d[21]*2f)*-0.5f))
  data_pack.local[22] = (data_pack.local[22] + (d[22]*2f))
  data_pack.local[22] = (data_pack.local[22] + (d[25]*0.5f))
  data_pack.local[22] = (data_pack.local[22] + (d[26]*-1f))
  data_pack.local[22] = (data_pack.local[22] + (d[27]*-0.5f))
  data_pack.local[22] = (data_pack.local[22] + d[28])
  data_pack.local[23] = 0f
  data_pack.local[23] = (data_pack.local[23] + (d[7]*-2f))
  data_pack.local[23] = (data_pack.local[23] + ((d[8]*-2f)*-1.5f))
  data_pack.local[23] = (data_pack.local[23] + ((d[9]*-2f)*-2f))
  data_pack.local[23] = (data_pack.local[23] + ((d[10]*-2f)*1.5f))
  data_pack.local[23] = (data_pack.local[23] + (d[11]*-2f))
  data_pack.local[23] = (data_pack.local[23] + (d[13]*-1f))
  data_pack.local[23] = (data_pack.local[23] + ((d[14]*-1f)*-1.5f))
  data_pack.local[23] = (data_pack.local[23] + ((d[15]*-1f)*-2f))
  data_pack.local[23] = (data_pack.local[23] + ((d[16]*-1f)*1.5f))
  data_pack.local[23] = (data_pack.local[23] + (d[17]*-1f))
  data_pack.local[23] = (data_pack.local[23] + (d[19]*2f))
  data_pack.local[23] = (data_pack.local[23] + ((d[20]*2f)*-1.5f))
  data_pack.local[23] = (data_pack.local[23] + ((d[21]*2f)*-2f))
  data_pack.local[23] = (data_pack.local[23] + ((d[22]*2f)*1.5f))
  data_pack.local[23] = (data_pack.local[23] + (d[23]*2f))
  data_pack.local[23] = (data_pack.local[23] + d[25])
  data_pack.local[23] = (data_pack.local[23] + (d[26]*-1.5f))
  data_pack.local[23] = (data_pack.local[23] + (d[27]*-2f))
  data_pack.local[23] = (data_pack.local[23] + (d[28]*1.5f))
  data_pack.local[23] = (data_pack.local[23] + d[29])
  data_pack.local[24] = 0f
  data_pack.local[24] = (data_pack.local[24] + (d[6]*0.5f))
  data_pack.local[24] = (data_pack.local[24] + ((d[7]*0.5f)*-1.5f))
  data_pack.local[24] = (data_pack.local[24] + ((d[8]*0.5f)*-2f))
  data_pack.local[24] = (data_pack.local[24] + ((d[9]*0.5f)*1.5f))
  data_pack.local[24] = (data_pack.local[24] + (d[10]*0.5f))
  data_pack.local[24] = (data_pack.local[24] + (d[12]*-1f))
  data_pack.local[24] = (data_pack.local[24] + ((d[13]*-1f)*-1.5f))
  data_pack.local[24] = (data_pack.local[24] + ((d[14]*-1f)*-2f))
  data_pack.local[24] = (data_pack.local[24] + ((d[15]*-1f)*1.5f))
  data_pack.local[24] = (data_pack.local[24] + (d[16]*-1f))
  data_pack.local[24] = (data_pack.local[24] + (d[18]*-0.5f))
  data_pack.local[24] = (data_pack.local[24] + ((d[19]*-0.5f)*-1.5f))
  data_pack.local[24] = (data_pack.local[24] + ((d[20]*-0.5f)*-2f))
  data_pack.local[24] = (data_pack.local[24] + ((d[21]*-0.5f)*1.5f))
  data_pack.local[24] = (data_pack.local[24] + (d[22]*-0.5f))
  data_pack.local[24] = (data_pack.local[24] + d[24])
  data_pack.local[24] = (data_pack.local[24] + (d[25]*-1.5f))
  data_pack.local[24] = (data_pack.local[24] + (d[26]*-2f))
  data_pack.local[24] = (data_pack.local[24] + (d[27]*1.5f))
  data_pack.local[24] = (data_pack.local[24] + d[28])
  data_pack.local[25] = 0f
  data_pack.local[25] = (data_pack.local[25] + (d[7]*0.5f))
  data_pack.local[25] = (data_pack.local[25] + ((d[8]*0.5f)*-2.5f))
  data_pack.local[25] = (data_pack.local[25] + ((d[9]*0.5f)*0.5f))
  data_pack.local[25] = (data_pack.local[25] + (d[10]*0.5f))
  data_pack.local[25] = (data_pack.local[25] + (d[13]*-1f))
  data_pack.local[25] = (data_pack.local[25] + ((d[14]*-1f)*-2.5f))
  data_pack.local[25] = (data_pack.local[25] + ((d[15]*-1f)*0.5f))
  data_pack.local[25] = (data_pack.local[25] + (d[16]*-1f))
  data_pack.local[25] = (data_pack.local[25] + (d[19]*-0.5f))
  data_pack.local[25] = (data_pack.local[25] + ((d[20]*-0.5f)*-2.5f))
  data_pack.local[25] = (data_pack.local[25] + ((d[21]*-0.5f)*0.5f))
  data_pack.local[25] = (data_pack.local[25] + (d[22]*-0.5f))
  data_pack.local[25] = (data_pack.local[25] + d[25])
  data_pack.local[25] = (data_pack.local[25] + (d[26]*-2.5f))
  data_pack.local[25] = (data_pack.local[25] + (d[27]*0.5f))
  data_pack.local[25] = (data_pack.local[25] + d[28])
  data_pack.local[26] = 0f
  data_pack.local[26] = (data_pack.local[26] + ((d[7]*0.5f)*-1f))
  data_pack.local[26] = (data_pack.local[26] + ((d[8]*0.5f)*0.5f))
  data_pack.local[26] = (data_pack.local[26] + ((d[9]*0.5f)*2.5f))
  data_pack.local[26] = (data_pack.local[26] + (d[10]*0.5f))
  data_pack.local[26] = (data_pack.local[26] + ((d[13]*-1f)*-1f))
  data_pack.local[26] = (data_pack.local[26] + ((d[14]*-1f)*0.5f))
  data_pack.local[26] = (data_pack.local[26] + ((d[15]*-1f)*2.5f))
  data_pack.local[26] = (data_pack.local[26] + (d[16]*-1f))
  data_pack.local[26] = (data_pack.local[26] + ((d[19]*-0.5f)*-1f))
  data_pack.local[26] = (data_pack.local[26] + ((d[20]*-0.5f)*0.5f))
  data_pack.local[26] = (data_pack.local[26] + ((d[21]*-0.5f)*2.5f))
  data_pack.local[26] = (data_pack.local[26] + (d[22]*-0.5f))
  data_pack.local[26] = (data_pack.local[26] + (d[25]*-1f))
  data_pack.local[26] = (data_pack.local[26] + (d[26]*0.5f))
  data_pack.local[26] = (data_pack.local[26] + (d[27]*2.5f))
  data_pack.local[26] = (data_pack.local[26] + d[28])
  data_pack.local[27] = 0f
  data_pack.local[27] = (data_pack.local[27] + ((d[7]*0.5f)*-2f))
  data_pack.local[27] = (data_pack.local[27] + ((d[8]*0.5f)*-1f))
  data_pack.local[27] = (data_pack.local[27] + ((d[9]*0.5f)*2f))
  data_pack.local[27] = (data_pack.local[27] + (d[10]*0.5f))
  data_pack.local[27] = (data_pack.local[27] + ((d[13]*-1f)*-2f))
  data_pack.local[27] = (data_pack.local[27] + ((d[14]*-1f)*-1f))
  data_pack.local[27] = (data_pack.local[27] + ((d[15]*-1f)*2f))
  data_pack.local[27] = (data_pack.local[27] + (d[16]*-1f))
  data_pack.local[27] = (data_pack.local[27] + ((d[19]*-0.5f)*-2f))
  data_pack.local[27] = (data_pack.local[27] + ((d[20]*-0.5f)*-1f))
  data_pack.local[27] = (data_pack.local[27] + ((d[21]*-0.5f)*2f))
  data_pack.local[27] = (data_pack.local[27] + (d[22]*-0.5f))
  data_pack.local[27] = (data_pack.local[27] + (d[25]*-2f))
  data_pack.local[27] = (data_pack.local[27] + (d[26]*-1f))
  data_pack.local[27] = (data_pack.local[27] + (d[27]*2f))
  data_pack.local[27] = (data_pack.local[27] + d[28])
  data_pack.local[28] = 0f
  data_pack.local[28] = (data_pack.local[28] + ((d[7]*0.5f)*0.5f))
  data_pack.local[28] = (data_pack.local[28] + ((d[8]*0.5f)*-1f))
  data_pack.local[28] = (data_pack.local[28] + ((d[9]*0.5f)*-0.5f))
  data_pack.local[28] = (data_pack.local[28] + (d[10]*0.5f))
  data_pack.local[28] = (data_pack.local[28] + ((d[13]*-1f)*0.5f))
  data_pack.local[28] = (data_pack.local[28] + ((d[14]*-1f)*-1f))
  data_pack.local[28] = (data_pack.local[28] + ((d[15]*-1f)*-0.5f))
  data_pack.local[28] = (data_pack.local[28] + (d[16]*-1f))
  data_pack.local[28] = (data_pack.local[28] + ((d[19]*-0.5f)*0.5f))
  data_pack.local[28] = (data_pack.local[28] + ((d[20]*-0.5f)*-1f))
  data_pack.local[28] = (data_pack.local[28] + ((d[21]*-0.5f)*-0.5f))
  data_pack.local[28] = (data_pack.local[28] + (d[22]*-0.5f))
  data_pack.local[28] = (data_pack.local[28] + (d[25]*0.5f))
  data_pack.local[28] = (data_pack.local[28] + (d[26]*-1f))
  data_pack.local[28] = (data_pack.local[28] + (d[27]*-0.5f))
  data_pack.local[28] = (data_pack.local[28] + d[28])
  data_pack.local[29] = 0f
  data_pack.local[29] = (data_pack.local[29] + (d[7]*0.5f))
  data_pack.local[29] = (data_pack.local[29] + ((d[8]*0.5f)*-1.5f))
  data_pack.local[29] = (data_pack.local[29] + ((d[9]*0.5f)*-2f))
  data_pack.local[29] = (data_pack.local[29] + ((d[10]*0.5f)*1.5f))
  data_pack.local[29] = (data_pack.local[29] + (d[11]*0.5f))
  data_pack.local[29] = (data_pack.local[29] + (d[13]*-1f))
  data_pack.local[29] = (data_pack.local[29] + ((d[14]*-1f)*-1.5f))
  data_pack.local[29] = (data_pack.local[29] + ((d[15]*-1f)*-2f))
  data_pack.local[29] = (data_pack.local[29] + ((d[16]*-1f)*1.5f))
  data_pack.local[29] = (data_pack.local[29] + (d[17]*-1f))
  data_pack.local[29] = (data_pack.local[29] + (d[19]*-0.5f))
  data_pack.local[29] = (data_pack.local[29] + ((d[20]*-0.5f)*-1.5f))
  data_pack.local[29] = (data_pack.local[29] + ((d[21]*-0.5f)*-2f))
  data_pack.local[29] = (data_pack.local[29] + ((d[22]*-0.5f)*1.5f))
  data_pack.local[29] = (data_pack.local[29] + (d[23]*-0.5f))
  data_pack.local[29] = (data_pack.local[29] + d[25])
  data_pack.local[29] = (data_pack.local[29] + (d[26]*-1.5f))
  data_pack.local[29] = (data_pack.local[29] + (d[27]*-2f))
  data_pack.local[29] = (data_pack.local[29] + (d[28]*1.5f))
  data_pack.local[29] = (data_pack.local[29] + d[29])
  data_pack.local[30] = 0f
  data_pack.local[30] = (data_pack.local[30] + d[6])
  data_pack.local[30] = (data_pack.local[30] + (d[7]*-1.5f))
  data_pack.local[30] = (data_pack.local[30] + (d[8]*-2f))
  data_pack.local[30] = (data_pack.local[30] + (d[9]*1.5f))
  data_pack.local[30] = (data_pack.local[30] + d[10])
  data_pack.local[30] = (data_pack.local[30] + (d[12]*-1.5f))
  data_pack.local[30] = (data_pack.local[30] + ((d[13]*-1.5f)*-1.5f))
  data_pack.local[30] = (data_pack.local[30] + ((d[14]*-1.5f)*-2f))
  data_pack.local[30] = (data_pack.local[30] + ((d[15]*-1.5f)*1.5f))
  data_pack.local[30] = (data_pack.local[30] + (d[16]*-1.5f))
  data_pack.local[30] = (data_pack.local[30] + (d[18]*-2f))
  data_pack.local[30] = (data_pack.local[30] + ((d[19]*-2f)*-1.5f))
  data_pack.local[30] = (data_pack.local[30] + ((d[20]*-2f)*-2f))
  data_pack.local[30] = (data_pack.local[30] + ((d[21]*-2f)*1.5f))
  data_pack.local[30] = (data_pack.local[30] + (d[22]*-2f))
  data_pack.local[30] = (data_pack.local[30] + (d[24]*1.5f))
  data_pack.local[30] = (data_pack.local[30] + ((d[25]*1.5f)*-1.5f))
  data_pack.local[30] = (data_pack.local[30] + ((d[26]*1.5f)*-2f))
  data_pack.local[30] = (data_pack.local[30] + ((d[27]*1.5f)*1.5f))
  data_pack.local[30] = (data_pack.local[30] + (d[28]*1.5f))
  data_pack.local[30] = (data_pack.local[30] + d[30])
  data_pack.local[30] = (data_pack.local[30] + (d[31]*-1.5f))
  data_pack.local[30] = (data_pack.local[30] + (d[32]*-2f))
  data_pack.local[30] = (data_pack.local[30] + (d[33]*1.5f))
  data_pack.local[30] = (data_pack.local[30] + d[34])
  data_pack.local[31] = 0f
  data_pack.local[31] = (data_pack.local[31] + d[7])
  data_pack.local[31] = (data_pack.local[31] + (d[8]*-2.5f))
  data_pack.local[31] = (data_pack.local[31] + (d[9]*0.5f))
  data_pack.local[31] = (data_pack.local[31] + d[10])
  data_pack.local[31] = (data_pack.local[31] + (d[13]*-1.5f))
  data_pack.local[31] = (data_pack.local[31] + ((d[14]*-1.5f)*-2.5f))
  data_pack.local[31] = (data_pack.local[31] + ((d[15]*-1.5f)*0.5f))
  data_pack.local[31] = (data_pack.local[31] + (d[16]*-1.5f))
  data_pack.local[31] = (data_pack.local[31] + (d[19]*-2f))
  data_pack.local[31] = (data_pack.local[31] + ((d[20]*-2f)*-2.5f))
  data_pack.local[31] = (data_pack.local[31] + ((d[21]*-2f)*0.5f))
  data_pack.local[31] = (data_pack.local[31] + (d[22]*-2f))
  data_pack.local[31] = (data_pack.local[31] + (d[25]*1.5f))
  data_pack.local[31] = (data_pack.local[31] + ((d[26]*1.5f)*-2.5f))
  data_pack.local[31] = (data_pack.local[31] + ((d[27]*1.5f)*0.5f))
  data_pack.local[31] = (data_pack.local[31] + (d[28]*1.5f))
  data_pack.local[31] = (data_pack.local[31] + d[31])
  data_pack.local[31] = (data_pack.local[31] + (d[32]*-2.5f))
  data_pack.local[31] = (data_pack.local[31] + (d[33]*0.5f))
  data_pack.local[31] = (data_pack.local[31] + d[34])
  data_pack.local[32] = 0f
  data_pack.local[32] = (data_pack.local[32] + (d[7]*-1f))
  data_pack.local[32] = (data_pack.local[32] + (d[8]*0.5f))
  data_pack.local[32] = (data_pack.local[32] + (d[9]*2.5f))
  data_pack.local[32] = (data_pack.local[32] + d[10])
  data_pack.local[32] = (data_pack.local[32] + ((d[13]*-1.5f)*-1f))
  data_pack.local[32] = (data_pack.local[32] + ((d[14]*-1.5f)*0.5f))
  data_pack.local[32] = (data_pack.local[32] + ((d[15]*-1.5f)*2.5f))
  data_pack.local[32] = (data_pack.local[32] + (d[16]*-1.5f))
  data_pack.local[32] = (data_pack.local[32] + ((d[19]*-2f)*-1f))
  data_pack.local[32] = (data_pack.local[32] + ((d[20]*-2f)*0.5f))
  data_pack.local[32] = (data_pack.local[32] + ((d[21]*-2f)*2.5f))
  data_pack.local[32] = (data_pack.local[32] + (d[22]*-2f))
  data_pack.local[32] = (data_pack.local[32] + ((d[25]*1.5f)*-1f))
  data_pack.local[32] = (data_pack.local[32] + ((d[26]*1.5f)*0.5f))
  data_pack.local[32] = (data_pack.local[32] + ((d[27]*1.5f)*2.5f))
  data_pack.local[32] = (data_pack.local[32] + (d[28]*1.5f))
  data_pack.local[32] = (data_pack.local[32] + (d[31]*-1f))
  data_pack.local[32] = (data_pack.local[32] + (d[32]*0.5f))
  data_pack.local[32] = (data_pack.local[32] + (d[33]*2.5f))
  data_pack.local[32] = (data_pack.local[32] + d[34])
  data_pack.local[33] = 0f
  data_pack.local[33] = (data_pack.local[33] + (d[7]*-2f))
  data_pack.local[33] = (data_pack.local[33] + (d[8]*-1f))
  data_pack.local[33] = (data_pack.local[33] + (d[9]*2f))
  data_pack.local[33] = (data_pack.local[33] + d[10])
  data_pack.local[33] = (data_pack.local[33] + ((d[13]*-1.5f)*-2f))
  data_pack.local[33] = (data_pack.local[33] + ((d[14]*-1.5f)*-1f))
  data_pack.local[33] = (data_pack.local[33] + ((d[15]*-1.5f)*2f))
  data_pack.local[33] = (data_pack.local[33] + (d[16]*-1.5f))
  data_pack.local[33] = (data_pack.local[33] + ((d[19]*-2f)*-2f))
  data_pack.local[33] = (data_pack.local[33] + ((d[20]*-2f)*-1f))
  data_pack.local[33] = (data_pack.local[33] + ((d[21]*-2f)*2f))
  data_pack.local[33] = (data_pack.local[33] + (d[22]*-2f))
  data_pack.local[33] = (data_pack.local[33] + ((d[25]*1.5f)*-2f))
  data_pack.local[33] = (data_pack.local[33] + ((d[26]*1.5f)*-1f))
  data_pack.local[33] = (data_pack.local[33] + ((d[27]*1.5f)*2f))
  data_pack.local[33] = (data_pack.local[33] + (d[28]*1.5f))
  data_pack.local[33] = (data_pack.local[33] + (d[31]*-2f))
  data_pack.local[33] = (data_pack.local[33] + (d[32]*-1f))
  data_pack.local[33] = (data_pack.local[33] + (d[33]*2f))
  data_pack.local[33] = (data_pack.local[33] + d[34])
  data_pack.local[34] = 0f
  data_pack.local[34] = (data_pack.local[34] + (d[7]*0.5f))
  data_pack.local[34] = (data_pack.local[34] + (d[8]*-1f))
  data_pack.local[34] = (data_pack.local[34] + (d[9]*-0.5f))
  data_pack.local[34] = (data_pack.local[34] + d[10])
  data_pack.local[34] = (data_pack.local[34] + ((d[13]*-1.5f)*0.5f))
  data_pack.local[34] = (data_pack.local[34] + ((d[14]*-1.5f)*-1f))
  data_pack.local[34] = (data_pack.local[34] + ((d[15]*-1.5f)*-0.5f))
  data_pack.local[34] = (data_pack.local[34] + (d[16]*-1.5f))
  data_pack.local[34] = (data_pack.local[34] + ((d[19]*-2f)*0.5f))
  data_pack.local[34] = (data_pack.local[34] + ((d[20]*-2f)*-1f))
  data_pack.local[34] = (data_pack.local[34] + ((d[21]*-2f)*-0.5f))
  data_pack.local[34] = (data_pack.local[34] + (d[22]*-2f))
  data_pack.local[34] = (data_pack.local[34] + ((d[25]*1.5f)*0.5f))
  data_pack.local[34] = (data_pack.local[34] + ((d[26]*1.5f)*-1f))
  data_pack.local[34] = (data_pack.local[34] + ((d[27]*1.5f)*-0.5f))
  data_pack.local[34] = (data_pack.local[34] + (d[28]*1.5f))
  data_pack.local[34] = (data_pack.local[34] + (d[31]*0.5f))
  data_pack.local[34] = (data_pack.local[34] + (d[32]*-1f))
  data_pack.local[34] = (data_pack.local[34] + (d[33]*-0.5f))
  data_pack.local[34] = (data_pack.local[34] + d[34])
  data_pack.local[35] = 0f
  data_pack.local[35] = (data_pack.local[35] + d[7])
  data_pack.local[35] = (data_pack.local[35] + (d[8]*-1.5f))
  data_pack.local[35] = (data_pack.local[35] + (d[9]*-2f))
  data_pack.local[35] = (data_pack.local[35] + (d[10]*1.5f))
  data_pack.local[35] = (data_pack.local[35] + d[11])
  data_pack.local[35] = (data_pack.local[35] + (d[13]*-1.5f))
  data_pack.local[35] = (data_pack.local[35] + ((d[14]*-1.5f)*-1.5f))
  data_pack.local[35] = (data_pack.local[35] + ((d[15]*-1.5f)*-2f))
  data_pack.local[35] = (data_pack.local[35] + ((d[16]*-1.5f)*1.5f))
  data_pack.local[35] = (data_pack.local[35] + (d[17]*-1.5f))
  data_pack.local[35] = (data_pack.local[35] + (d[19]*-2f))
  data_pack.local[35] = (data_pack.local[35] + ((d[20]*-2f)*-1.5f))
  data_pack.local[35] = (data_pack.local[35] + ((d[21]*-2f)*-2f))
  data_pack.local[35] = (data_pack.local[35] + ((d[22]*-2f)*1.5f))
  data_pack.local[35] = (data_pack.local[35] + (d[23]*-2f))
  data_pack.local[35] = (data_pack.local[35] + (d[25]*1.5f))
  data_pack.local[35] = (data_pack.local[35] + ((d[26]*1.5f)*-1.5f))
  data_pack.local[35] = (data_pack.local[35] + ((d[27]*1.5f)*-2f))
  data_pack.local[35] = (data_pack.local[35] + ((d[28]*1.5f)*1.5f))
  data_pack.local[35] = (data_pack.local[35] + (d[29]*1.5f))
  data_pack.local[35] = (data_pack.local[35] + d[31])
  data_pack.local[35] = (data_pack.local[35] + (d[32]*-1.5f))
  data_pack.local[35] = (data_pack.local[35] + (d[33]*-2f))
  data_pack.local[35] = (data_pack.local[35] + (d[34]*1.5f))
  data_pack.local[35] = (data_pack.local[35] + d[35])
  for (eps, 0, 6) {
    for (nu, 0, 6) {
      data_pack[((((eps*75264) + (nu*12544)) + (blockIdx.x*128)) + threadIdx.x)] = data_pack.local[((eps*6) + nu)]
    }
  }
  // attr [iter_var(blockIdx.z, , blockIdx.z)] thread_extent = 36
  allocate bgemm.local[float32 * 32], storage_scope = local
  allocate kernel_pack.shared[float32 * 256], storage_scope = shared
  allocate data_pack.shared[float32 * 1568], storage_scope = shared
  // attr [iter_var(blockIdx.y, , blockIdx.y)] thread_extent = 2
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 1
  // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
  // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 98
  for (co.c.init, 0, 8) {
    bgemm.local[co.c.init] = 0f
    bgemm.local[(co.c.init + 16)] = 0f
    bgemm.local[(co.c.init + 8)] = 0f
    bgemm.local[(co.c.init + 24)] = 0f
  }
  for (ci.outer, 0, 8) {
    for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer, 0, 2) {
      // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
      // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
      // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 98
      if (((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*196) + (threadIdx.y*98)) + threadIdx.x) < 256)) {
        if ((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*2) + threadIdx.y) < 3)) {
          kernel_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*196) + (threadIdx.y*98)) + threadIdx.x)] = kernel_pack[(((((blockIdx.z*4096) + (ci.outer*512)) + (floordiv((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*196) + (threadIdx.y*98)) + threadIdx.x), 32)*64)) + (blockIdx.y*32)) + floormod((((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*196) + (threadIdx.y*98)) + threadIdx.x), 32))]
        }
      }
    }
    for (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer, 0, 8) {
      // attr [iter_var(threadIdx.z, , threadIdx.z)] thread_extent = 1
      // attr [iter_var(threadIdx.y, , threadIdx.y)] thread_extent = 2
      // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 98
      data_pack.shared[(((ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*196) + (threadIdx.y*98)) + threadIdx.x)] = data_pack[(((((blockIdx.z*12544) + (ci.outer*1568)) + (ax0.ax1.fused.ax2.fused.ax3.fused.outer.outer.outer*196)) + (threadIdx.y*98)) + threadIdx.x)]
    }
    for (ci.inner, 0, 8) {
      for (co.c, 0, 8) {
        bgemm.local[co.c] = (bgemm.local[co.c] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*8)) + co.c)]*data_pack.shared[((ci.inner*196) + threadIdx.x)]))
        bgemm.local[(co.c + 16)] = (bgemm.local[(co.c + 16)] + (kernel_pack.shared[((((ci.inner*32) + (threadIdx.y*8)) + co.c) + 16)]*data_pack.shared[((ci.inner*196) + threadIdx.x)]))
        bgemm.local[(co.c + 8)] = (bgemm.local[(co.c + 8)] + (kernel_pack.shared[(((ci.inner*32) + (threadIdx.y*8)) + co.c)]*data_pack.shared[(((ci.inner*196) + threadIdx.x) + 98)]))
        bgemm.local[(co.c + 24)] = (bgemm.local[(co.c + 24)] + (kernel_pack.shared[((((ci.inner*32) + (threadIdx.y*8)) + co.c) + 16)]*data_pack.shared[(((ci.inner*196) + threadIdx.x) + 98)]))
      }
    }
  }
  for (co.inner.inner.inner, 0, 8) {
    bgemm[(((((blockIdx.z*12544) + (blockIdx.y*6272)) + (threadIdx.y*1568)) + (co.inner.inner.inner*196)) + threadIdx.x)] = bgemm.local[co.inner.inner.inner]
    bgemm[((((((blockIdx.z*12544) + (blockIdx.y*6272)) + (threadIdx.y*1568)) + (co.inner.inner.inner*196)) + threadIdx.x) + 3136)] = bgemm.local[(co.inner.inner.inner + 16)]
    bgemm[((((((blockIdx.z*12544) + (blockIdx.y*6272)) + (threadIdx.y*1568)) + (co.inner.inner.inner*196)) + threadIdx.x) + 98)] = bgemm.local[(co.inner.inner.inner + 8)]
    bgemm[((((((blockIdx.z*12544) + (blockIdx.y*6272)) + (threadIdx.y*1568)) + (co.inner.inner.inner*196)) + threadIdx.x) + 3234)] = bgemm.local[(co.inner.inner.inner + 24)]
  }
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 98
  allocate inverse[float32 * 16], storage_scope = local
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 128
  inverse[0] = 0f
  inverse[0] = (inverse[0] + bgemm[((blockIdx.x*128) + threadIdx.x)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 12544)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 25088)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 37632)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 50176)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 75264)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 150528)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 225792)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 301056)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)])
  inverse[0] = (inverse[0] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)])
  inverse[1] = 0f
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 12544)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 25088)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 37632)]*0.5f))
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 50176)]*-2f))
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*0.5f))
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-2f))
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.5f))
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*-2f))
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.5f))
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*-2f))
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-1f))
  inverse[1] = (inverse[1] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)])
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*0.5f))
  inverse[1] = (inverse[1] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-2f))
  inverse[2] = 0f
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 12544)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 25088)])
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 37632)]*0.25f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 50176)]*4f))
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*0.25f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*4f))
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.25f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*4f))
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)])
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.25f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*4f))
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)])
  inverse[2] = (inverse[2] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)])
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*0.25f))
  inverse[2] = (inverse[2] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*4f))
  inverse[3] = 0f
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 12544)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 25088)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 37632)]*0.125f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 50176)]*-8f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 62720)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*0.125f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-8f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 137984)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.125f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*-8f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 213248)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.125f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*-8f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 288512)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-1f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)])
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*0.125f))
  inverse[3] = (inverse[3] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-8f))
  inverse[3] = (inverse[3] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 363776)])
  inverse[4] = 0f
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 75264)]*-1f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)]*-1f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f))
  inverse[4] = (inverse[4] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 150528)])
  inverse[4] = (inverse[4] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)])
  inverse[4] = (inverse[4] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[4] = (inverse[4] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)])
  inverse[4] = (inverse[4] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)])
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 225792)]*0.5f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.5f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.5f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.5f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.5f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 301056)]*-2f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-2f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*-2f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*-2f))
  inverse[4] = (inverse[4] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-2f))
  inverse[5] = 0f
  inverse[5] = (inverse[5] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f)*-1f))
  inverse[5] = (inverse[5] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)]*-1f))
  inverse[5] = (inverse[5] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f)*0.5f))
  inverse[5] = (inverse[5] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f)*-2f))
  inverse[5] = (inverse[5] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)]*-1f))
  inverse[5] = (inverse[5] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[5] = (inverse[5] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.5f))
  inverse[5] = (inverse[5] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*-2f))
  inverse[5] = (inverse[5] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.5f)*-1f))
  inverse[5] = (inverse[5] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.5f))
  inverse[5] = (inverse[5] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.5f)*0.5f))
  inverse[5] = (inverse[5] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.5f)*-2f))
  inverse[5] = (inverse[5] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-2f)*-1f))
  inverse[5] = (inverse[5] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*-2f))
  inverse[5] = (inverse[5] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*-2f)*0.5f))
  inverse[5] = (inverse[5] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-2f)*-2f))
  inverse[6] = 0f
  inverse[6] = (inverse[6] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f))
  inverse[6] = (inverse[6] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)]*-1f))
  inverse[6] = (inverse[6] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f)*0.25f))
  inverse[6] = (inverse[6] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f)*4f))
  inverse[6] = (inverse[6] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)])
  inverse[6] = (inverse[6] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[6] = (inverse[6] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.25f))
  inverse[6] = (inverse[6] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*4f))
  inverse[6] = (inverse[6] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.5f))
  inverse[6] = (inverse[6] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.5f))
  inverse[6] = (inverse[6] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.5f)*0.25f))
  inverse[6] = (inverse[6] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.5f)*4f))
  inverse[6] = (inverse[6] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-2f))
  inverse[6] = (inverse[6] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*-2f))
  inverse[6] = (inverse[6] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*-2f)*0.25f))
  inverse[6] = (inverse[6] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-2f)*4f))
  inverse[7] = 0f
  inverse[7] = (inverse[7] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f)*-1f))
  inverse[7] = (inverse[7] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)]*-1f))
  inverse[7] = (inverse[7] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f)*0.125f))
  inverse[7] = (inverse[7] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f)*-8f))
  inverse[7] = (inverse[7] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 137984)]*-1f))
  inverse[7] = (inverse[7] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)]*-1f))
  inverse[7] = (inverse[7] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[7] = (inverse[7] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.125f))
  inverse[7] = (inverse[7] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*-8f))
  inverse[7] = (inverse[7] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 213248)])
  inverse[7] = (inverse[7] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.5f)*-1f))
  inverse[7] = (inverse[7] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.5f))
  inverse[7] = (inverse[7] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.5f)*0.125f))
  inverse[7] = (inverse[7] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.5f)*-8f))
  inverse[7] = (inverse[7] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 288512)]*0.5f))
  inverse[7] = (inverse[7] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-2f)*-1f))
  inverse[7] = (inverse[7] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*-2f))
  inverse[7] = (inverse[7] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*-2f)*0.125f))
  inverse[7] = (inverse[7] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-2f)*-8f))
  inverse[7] = (inverse[7] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 363776)]*-2f))
  inverse[8] = 0f
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 75264)])
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)])
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)])
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)])
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 150528)])
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)])
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)])
  inverse[8] = (inverse[8] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)])
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 225792)]*0.25f))
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.25f))
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.25f))
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.25f))
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.25f))
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 301056)]*4f))
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*4f))
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*4f))
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*4f))
  inverse[8] = (inverse[8] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*4f))
  inverse[9] = 0f
  inverse[9] = (inverse[9] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f))
  inverse[9] = (inverse[9] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[9] = (inverse[9] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*0.5f))
  inverse[9] = (inverse[9] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-2f))
  inverse[9] = (inverse[9] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)]*-1f))
  inverse[9] = (inverse[9] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[9] = (inverse[9] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.5f))
  inverse[9] = (inverse[9] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*-2f))
  inverse[9] = (inverse[9] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.25f)*-1f))
  inverse[9] = (inverse[9] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.25f))
  inverse[9] = (inverse[9] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.25f)*0.5f))
  inverse[9] = (inverse[9] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.25f)*-2f))
  inverse[9] = (inverse[9] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*4f)*-1f))
  inverse[9] = (inverse[9] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*4f))
  inverse[9] = (inverse[9] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*4f)*0.5f))
  inverse[9] = (inverse[9] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*4f)*-2f))
  inverse[10] = 0f
  inverse[10] = (inverse[10] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)])
  inverse[10] = (inverse[10] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[10] = (inverse[10] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*0.25f))
  inverse[10] = (inverse[10] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*4f))
  inverse[10] = (inverse[10] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)])
  inverse[10] = (inverse[10] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[10] = (inverse[10] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.25f))
  inverse[10] = (inverse[10] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*4f))
  inverse[10] = (inverse[10] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.25f))
  inverse[10] = (inverse[10] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.25f))
  inverse[10] = (inverse[10] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.25f)*0.25f))
  inverse[10] = (inverse[10] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.25f)*4f))
  inverse[10] = (inverse[10] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*4f))
  inverse[10] = (inverse[10] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*4f))
  inverse[10] = (inverse[10] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*4f)*0.25f))
  inverse[10] = (inverse[10] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*4f)*4f))
  inverse[11] = 0f
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f))
  inverse[11] = (inverse[11] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)])
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*0.125f))
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-8f))
  inverse[11] = (inverse[11] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 137984)])
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)]*-1f))
  inverse[11] = (inverse[11] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.125f))
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*-8f))
  inverse[11] = (inverse[11] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 213248)])
  inverse[11] = (inverse[11] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.25f)*-1f))
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.25f))
  inverse[11] = (inverse[11] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.25f)*0.125f))
  inverse[11] = (inverse[11] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.25f)*-8f))
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 288512)]*0.25f))
  inverse[11] = (inverse[11] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*4f)*-1f))
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*4f))
  inverse[11] = (inverse[11] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*4f)*0.125f))
  inverse[11] = (inverse[11] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*4f)*-8f))
  inverse[11] = (inverse[11] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 363776)]*4f))
  inverse[12] = 0f
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 75264)]*-1f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)]*-1f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f))
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 150528)])
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)])
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)])
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)])
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 225792)]*0.125f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.125f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.125f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.125f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.125f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 301056)]*-8f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-8f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*-8f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*-8f))
  inverse[12] = (inverse[12] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-8f))
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 376320)])
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 388864)])
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 401408)])
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 413952)])
  inverse[12] = (inverse[12] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 426496)])
  inverse[13] = 0f
  inverse[13] = (inverse[13] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f)*-1f))
  inverse[13] = (inverse[13] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)]*-1f))
  inverse[13] = (inverse[13] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f)*0.5f))
  inverse[13] = (inverse[13] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f)*-2f))
  inverse[13] = (inverse[13] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)]*-1f))
  inverse[13] = (inverse[13] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[13] = (inverse[13] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.5f))
  inverse[13] = (inverse[13] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*-2f))
  inverse[13] = (inverse[13] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.125f)*-1f))
  inverse[13] = (inverse[13] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.125f))
  inverse[13] = (inverse[13] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.125f)*0.5f))
  inverse[13] = (inverse[13] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.125f)*-2f))
  inverse[13] = (inverse[13] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-8f)*-1f))
  inverse[13] = (inverse[13] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*-8f))
  inverse[13] = (inverse[13] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*-8f)*0.5f))
  inverse[13] = (inverse[13] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-8f)*-2f))
  inverse[13] = (inverse[13] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 388864)]*-1f))
  inverse[13] = (inverse[13] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 401408)])
  inverse[13] = (inverse[13] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 413952)]*0.5f))
  inverse[13] = (inverse[13] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 426496)]*-2f))
  inverse[14] = 0f
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f))
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)]*-1f))
  inverse[14] = (inverse[14] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f)*0.25f))
  inverse[14] = (inverse[14] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f)*4f))
  inverse[14] = (inverse[14] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)])
  inverse[14] = (inverse[14] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.25f))
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*4f))
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.125f))
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.125f))
  inverse[14] = (inverse[14] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.125f)*0.25f))
  inverse[14] = (inverse[14] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.125f)*4f))
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-8f))
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*-8f))
  inverse[14] = (inverse[14] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*-8f)*0.25f))
  inverse[14] = (inverse[14] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-8f)*4f))
  inverse[14] = (inverse[14] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 388864)])
  inverse[14] = (inverse[14] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 401408)])
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 413952)]*0.25f))
  inverse[14] = (inverse[14] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 426496)]*4f))
  inverse[15] = 0f
  inverse[15] = (inverse[15] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 87808)]*-1f)*-1f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 100352)]*-1f))
  inverse[15] = (inverse[15] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 112896)]*-1f)*0.125f))
  inverse[15] = (inverse[15] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 125440)]*-1f)*-8f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 137984)]*-1f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 163072)]*-1f))
  inverse[15] = (inverse[15] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 175616)])
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 188160)]*0.125f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 200704)]*-8f))
  inverse[15] = (inverse[15] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 213248)])
  inverse[15] = (inverse[15] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 238336)]*0.125f)*-1f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 250880)]*0.125f))
  inverse[15] = (inverse[15] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 263424)]*0.125f)*0.125f))
  inverse[15] = (inverse[15] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 275968)]*0.125f)*-8f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 288512)]*0.125f))
  inverse[15] = (inverse[15] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 313600)]*-8f)*-1f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 326144)]*-8f))
  inverse[15] = (inverse[15] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 338688)]*-8f)*0.125f))
  inverse[15] = (inverse[15] + ((bgemm[(((blockIdx.x*128) + threadIdx.x) + 351232)]*-8f)*-8f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 363776)]*-8f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 388864)]*-1f))
  inverse[15] = (inverse[15] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 401408)])
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 413952)]*0.125f))
  inverse[15] = (inverse[15] + (bgemm[(((blockIdx.x*128) + threadIdx.x) + 426496)]*-8f))
  inverse[15] = (inverse[15] + bgemm[(((blockIdx.x*128) + threadIdx.x) + 439040)])
  for (h.inner, 0, 4) {
    for (w.inner, 0, 4) {
      output[((((floordiv(((blockIdx.x*128) + threadIdx.x), 14)*224) + (h.inner*56)) + (floormod(((blockIdx.x*128) + threadIdx.x), 14)*4)) + w.inner)] = inverse[((h.inner*4) + w.inner)]
    }
  }
}
, GlobalVar(tvmgen_default_fused_multiply_12): PrimFunc([placeholder, placeholder, T_multiply]) attrs={"from_legacy_te_schedule": (bool)1, "global_symbol": "tvmgen_default_fused_multiply_12", "tir.noalias": (bool)1, "target": cuda -keys=cuda,gpu -arch=sm_70 -max_num_threads=1024 -thread_warp_size=32} {
  // attr [iter_var(blockIdx.x, , blockIdx.x)] thread_extent = 196
  // attr [iter_var(threadIdx.x, , threadIdx.x)] thread_extent = 1024
  T_multiply[((blockIdx.x*1024) + threadIdx.x)] = (placeholder[((blockIdx.x*1024) + threadIdx.x)]*placeholder[floordiv(((blockIdx.x*1024) + threadIdx.x), 784)])
}
})}